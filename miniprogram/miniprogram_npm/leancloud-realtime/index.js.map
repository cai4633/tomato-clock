{"version":3,"sources":["im-node.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar platformAdaptersNode = require('@leancloud/platform-adapters-node');\nvar _Object$defineProperty = _interopDefault(require('@babel/runtime-corejs2/core-js/object/define-property'));\nvar _Object$defineProperties = _interopDefault(require('@babel/runtime-corejs2/core-js/object/define-properties'));\nvar _Object$getOwnPropertyDescriptors = _interopDefault(require('@babel/runtime-corejs2/core-js/object/get-own-property-descriptors'));\nvar _Object$getOwnPropertyDescriptor = _interopDefault(require('@babel/runtime-corejs2/core-js/object/get-own-property-descriptor'));\nvar _Object$getOwnPropertySymbols = _interopDefault(require('@babel/runtime-corejs2/core-js/object/get-own-property-symbols'));\nvar _Object$keys = _interopDefault(require('@babel/runtime-corejs2/core-js/object/keys'));\nvar _defineProperty = _interopDefault(require('@babel/runtime-corejs2/helpers/defineProperty'));\nvar _Promise = _interopDefault(require('@babel/runtime-corejs2/core-js/promise'));\nvar protobufLight = _interopDefault(require('protobufjs/dist/protobuf-light'));\nvar EventEmitter = _interopDefault(require('eventemitter3'));\nvar _Date$now = _interopDefault(require('@babel/runtime-corejs2/core-js/date/now'));\nvar _JSON$stringify = _interopDefault(require('@babel/runtime-corejs2/core-js/json/stringify'));\nvar _regeneratorRuntime = _interopDefault(require('@babel/runtime-corejs2/regenerator'));\nvar _asyncToGenerator = _interopDefault(require('@babel/runtime-corejs2/helpers/asyncToGenerator'));\nvar _toConsumableArray = _interopDefault(require('@babel/runtime-corejs2/helpers/toConsumableArray'));\nvar _Set = _interopDefault(require('@babel/runtime-corejs2/core-js/set'));\nvar _objectWithoutProperties = _interopDefault(require('@babel/runtime-corejs2/helpers/objectWithoutProperties'));\nvar _assertThisInitialized = _interopDefault(require('@babel/runtime-corejs2/helpers/assertThisInitialized'));\nvar _inheritsLoose = _interopDefault(require('@babel/runtime-corejs2/helpers/inheritsLoose'));\nvar d = _interopDefault(require('debug'));\nvar shuffle = _interopDefault(require('lodash/shuffle'));\nvar _Symbol = _interopDefault(require('@babel/runtime-corejs2/core-js/symbol'));\nvar _toArray = _interopDefault(require('@babel/runtime-corejs2/helpers/toArray'));\nvar _createClass = _interopDefault(require('@babel/runtime-corejs2/helpers/createClass'));\nvar _applyDecoratedDescriptor = _interopDefault(require('@babel/runtime-corejs2/helpers/applyDecoratedDescriptor'));\nvar StateMachine = _interopDefault(require('javascript-state-machine'));\nvar _Object$assign = _interopDefault(require('@babel/runtime-corejs2/core-js/object/assign'));\nvar _typeof = _interopDefault(require('@babel/runtime-corejs2/helpers/typeof'));\nvar _WeakMap = _interopDefault(require('@babel/runtime-corejs2/core-js/weak-map'));\nvar _Array$from = _interopDefault(require('@babel/runtime-corejs2/core-js/array/from'));\nvar _Array$isArray = _interopDefault(require('@babel/runtime-corejs2/core-js/array/is-array'));\nvar isPlainObject = _interopDefault(require('lodash/isPlainObject'));\nvar _Object$freeze = _interopDefault(require('@babel/runtime-corejs2/core-js/object/freeze'));\nvar promiseTimeout = require('promise-timeout');\nvar uuid = _interopDefault(require('uuid/v4'));\nvar _slicedToArray = _interopDefault(require('@babel/runtime-corejs2/helpers/slicedToArray'));\nvar base64Arraybuffer = require('base64-arraybuffer');\nvar remove = _interopDefault(require('lodash/remove'));\nvar values = _interopDefault(require('lodash/values'));\nvar isEmpty = _interopDefault(require('lodash/isEmpty'));\nvar cloneDeep = _interopDefault(require('lodash/cloneDeep'));\nvar find = _interopDefault(require('lodash/find'));\nvar _getIterator = _interopDefault(require('@babel/runtime-corejs2/core-js/get-iterator'));\nvar _Symbol$iterator = _interopDefault(require('@babel/runtime-corejs2/core-js/symbol/iterator'));\n\nvar messageCompiled = protobufLight.newBuilder({})['import']({\n  \"package\": 'push_server.messages2',\n  syntax: 'proto2',\n  options: {\n    objc_class_prefix: 'AVIM'\n  },\n  messages: [{\n    name: 'JsonObjectMessage',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'required',\n      type: 'string',\n      name: 'data',\n      id: 1\n    }]\n  }, {\n    name: 'UnreadTuple',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'required',\n      type: 'string',\n      name: 'cid',\n      id: 1\n    }, {\n      rule: 'required',\n      type: 'int32',\n      name: 'unread',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'mid',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'timestamp',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'from',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'data',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'patchTimestamp',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'mentioned',\n      id: 8\n    }, {\n      rule: 'optional',\n      type: 'bytes',\n      name: 'binaryMsg',\n      id: 9\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'convType',\n      id: 10\n    }]\n  }, {\n    name: 'LogItem',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'from',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'data',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'timestamp',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'msgId',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'ackAt',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'readAt',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'patchTimestamp',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'mentionAll',\n      id: 8\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'mentionPids',\n      id: 9\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'bin',\n      id: 10\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'convType',\n      id: 11\n    }]\n  }, {\n    name: 'ConvMemberInfo',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'pid',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'role',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'infoId',\n      id: 3\n    }]\n  }, {\n    name: 'DataCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'repeated',\n      type: 'string',\n      name: 'ids',\n      id: 1\n    }, {\n      rule: 'repeated',\n      type: 'JsonObjectMessage',\n      name: 'msg',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'offline',\n      id: 3\n    }]\n  }, {\n    name: 'SessionCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'int64',\n      name: 't',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'n',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 's',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'ua',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'r',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'tag',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'deviceId',\n      id: 7\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'sessionPeerIds',\n      id: 8\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'onlineSessionPeerIds',\n      id: 9\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'st',\n      id: 10\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'stTtl',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'code',\n      id: 12\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'reason',\n      id: 13\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'deviceToken',\n      id: 14\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'sp',\n      id: 15\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'detail',\n      id: 16\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'lastUnreadNotifTime',\n      id: 17\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'lastPatchTime',\n      id: 18\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'configBitmap',\n      id: 19\n    }]\n  }, {\n    name: 'ErrorCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'required',\n      type: 'int32',\n      name: 'code',\n      id: 1\n    }, {\n      rule: 'required',\n      type: 'string',\n      name: 'reason',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'appCode',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'detail',\n      id: 4\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'pids',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'appMsg',\n      id: 6\n    }]\n  }, {\n    name: 'DirectCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'msg',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'uid',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'fromPeerId',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'timestamp',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'offline',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'hasMore',\n      id: 6\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'toPeerIds',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'r',\n      id: 10\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'id',\n      id: 12\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'transient',\n      id: 13\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'dt',\n      id: 14\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'roomId',\n      id: 15\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'pushData',\n      id: 16\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'will',\n      id: 17\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'patchTimestamp',\n      id: 18\n    }, {\n      rule: 'optional',\n      type: 'bytes',\n      name: 'binaryMsg',\n      id: 19\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'mentionPids',\n      id: 20\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'mentionAll',\n      id: 21\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'convType',\n      id: 22\n    }]\n  }, {\n    name: 'AckCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'int32',\n      name: 'code',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'reason',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'mid',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 't',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'uid',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'fromts',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'tots',\n      id: 8\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'type',\n      id: 9\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'ids',\n      id: 10\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'appCode',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'appMsg',\n      id: 12\n    }]\n  }, {\n    name: 'UnreadCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'repeated',\n      type: 'UnreadTuple',\n      name: 'convs',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'notifTime',\n      id: 2\n    }]\n  }, {\n    name: 'ConvCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'repeated',\n      type: 'string',\n      name: 'm',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'transient',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'unique',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'cdate',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'initBy',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'sort',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'limit',\n      id: 8\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'skip',\n      id: 9\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'flag',\n      id: 10\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'count',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'udate',\n      id: 12\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 't',\n      id: 13\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'n',\n      id: 14\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 's',\n      id: 15\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'statusSub',\n      id: 16\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'statusPub',\n      id: 17\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'statusTTL',\n      id: 18\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'uniqueId',\n      id: 19\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'targetClientId',\n      id: 20\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'maxReadTimestamp',\n      id: 21\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'maxAckTimestamp',\n      id: 22\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'queryAllMembers',\n      id: 23\n    }, {\n      rule: 'repeated',\n      type: 'MaxReadTuple',\n      name: 'maxReadTuples',\n      id: 24\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'cids',\n      id: 25\n    }, {\n      rule: 'optional',\n      type: 'ConvMemberInfo',\n      name: 'info',\n      id: 26\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'tempConv',\n      id: 27\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'tempConvTTL',\n      id: 28\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'tempConvIds',\n      id: 29\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'allowedPids',\n      id: 30\n    }, {\n      rule: 'repeated',\n      type: 'ErrorCommand',\n      name: 'failedPids',\n      id: 31\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'next',\n      id: 40\n    }, {\n      rule: 'optional',\n      type: 'JsonObjectMessage',\n      name: 'results',\n      id: 100\n    }, {\n      rule: 'optional',\n      type: 'JsonObjectMessage',\n      name: 'where',\n      id: 101\n    }, {\n      rule: 'optional',\n      type: 'JsonObjectMessage',\n      name: 'attr',\n      id: 103\n    }, {\n      rule: 'optional',\n      type: 'JsonObjectMessage',\n      name: 'attrModified',\n      id: 104\n    }]\n  }, {\n    name: 'RoomCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'roomId',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 's',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 't',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'n',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'transient',\n      id: 5\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'roomPeerIds',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'byPeerId',\n      id: 7\n    }]\n  }, {\n    name: 'LogsCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'l',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'limit',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 't',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'tt',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'tmid',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'mid',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'checksum',\n      id: 8\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'stored',\n      id: 9\n    }, {\n      rule: 'optional',\n      type: 'QueryDirection',\n      name: 'direction',\n      id: 10,\n      options: {\n        \"default\": 'OLD'\n      }\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'tIncluded',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'ttIncluded',\n      id: 12\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'lctype',\n      id: 13\n    }, {\n      rule: 'repeated',\n      type: 'LogItem',\n      name: 'logs',\n      id: 105\n    }],\n    enums: [{\n      name: 'QueryDirection',\n      syntax: 'proto2',\n      values: [{\n        name: 'OLD',\n        id: 1\n      }, {\n        name: 'NEW',\n        id: 2\n      }]\n    }]\n  }, {\n    name: 'RcpCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'id',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 't',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'read',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'from',\n      id: 5\n    }]\n  }, {\n    name: 'ReadTuple',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'required',\n      type: 'string',\n      name: 'cid',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'timestamp',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'mid',\n      id: 3\n    }]\n  }, {\n    name: 'MaxReadTuple',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'pid',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'maxAckTimestamp',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'maxReadTimestamp',\n      id: 3\n    }]\n  }, {\n    name: 'ReadCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 1\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'cids',\n      id: 2\n    }, {\n      rule: 'repeated',\n      type: 'ReadTuple',\n      name: 'convs',\n      id: 3\n    }]\n  }, {\n    name: 'PresenceCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'StatusType',\n      name: 'status',\n      id: 1\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'sessionPeerIds',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 3\n    }]\n  }, {\n    name: 'ReportCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'bool',\n      name: 'initiative',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'type',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'data',\n      id: 3\n    }]\n  }, {\n    name: 'PatchItem',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'mid',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'timestamp',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'recall',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'data',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'patchTimestamp',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'from',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'bytes',\n      name: 'binaryMsg',\n      id: 8\n    }, {\n      rule: 'optional',\n      type: 'bool',\n      name: 'mentionAll',\n      id: 9\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'mentionPids',\n      id: 10\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'patchCode',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'patchReason',\n      id: 12\n    }]\n  }, {\n    name: 'PatchCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'repeated',\n      type: 'PatchItem',\n      name: 'patches',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'lastPatchTime',\n      id: 2\n    }]\n  }, {\n    name: 'PubsubCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'cid',\n      id: 1\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'cids',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'topic',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'subtopic',\n      id: 4\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'topics',\n      id: 5\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'subtopics',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'JsonObjectMessage',\n      name: 'results',\n      id: 7\n    }]\n  }, {\n    name: 'BlacklistCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'string',\n      name: 'srcCid',\n      id: 1\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'toPids',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'srcPid',\n      id: 3\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'toCids',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'limit',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'next',\n      id: 6\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'blockedPids',\n      id: 8\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'blockedCids',\n      id: 9\n    }, {\n      rule: 'repeated',\n      type: 'string',\n      name: 'allowedPids',\n      id: 10\n    }, {\n      rule: 'repeated',\n      type: 'ErrorCommand',\n      name: 'failedPids',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 't',\n      id: 12\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'n',\n      id: 13\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 's',\n      id: 14\n    }]\n  }, {\n    name: 'GenericCommand',\n    syntax: 'proto2',\n    fields: [{\n      rule: 'optional',\n      type: 'CommandType',\n      name: 'cmd',\n      id: 1\n    }, {\n      rule: 'optional',\n      type: 'OpType',\n      name: 'op',\n      id: 2\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'appId',\n      id: 3\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'peerId',\n      id: 4\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'i',\n      id: 5\n    }, {\n      rule: 'optional',\n      type: 'string',\n      name: 'installationId',\n      id: 6\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'priority',\n      id: 7\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'service',\n      id: 8\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'serverTs',\n      id: 9\n    }, {\n      rule: 'optional',\n      type: 'int64',\n      name: 'clientTs',\n      id: 10\n    }, {\n      rule: 'optional',\n      type: 'int32',\n      name: 'notificationType',\n      id: 11\n    }, {\n      rule: 'optional',\n      type: 'DataCommand',\n      name: 'dataMessage',\n      id: 101\n    }, {\n      rule: 'optional',\n      type: 'SessionCommand',\n      name: 'sessionMessage',\n      id: 102\n    }, {\n      rule: 'optional',\n      type: 'ErrorCommand',\n      name: 'errorMessage',\n      id: 103\n    }, {\n      rule: 'optional',\n      type: 'DirectCommand',\n      name: 'directMessage',\n      id: 104\n    }, {\n      rule: 'optional',\n      type: 'AckCommand',\n      name: 'ackMessage',\n      id: 105\n    }, {\n      rule: 'optional',\n      type: 'UnreadCommand',\n      name: 'unreadMessage',\n      id: 106\n    }, {\n      rule: 'optional',\n      type: 'ReadCommand',\n      name: 'readMessage',\n      id: 107\n    }, {\n      rule: 'optional',\n      type: 'RcpCommand',\n      name: 'rcpMessage',\n      id: 108\n    }, {\n      rule: 'optional',\n      type: 'LogsCommand',\n      name: 'logsMessage',\n      id: 109\n    }, {\n      rule: 'optional',\n      type: 'ConvCommand',\n      name: 'convMessage',\n      id: 110\n    }, {\n      rule: 'optional',\n      type: 'RoomCommand',\n      name: 'roomMessage',\n      id: 111\n    }, {\n      rule: 'optional',\n      type: 'PresenceCommand',\n      name: 'presenceMessage',\n      id: 112\n    }, {\n      rule: 'optional',\n      type: 'ReportCommand',\n      name: 'reportMessage',\n      id: 113\n    }, {\n      rule: 'optional',\n      type: 'PatchCommand',\n      name: 'patchMessage',\n      id: 114\n    }, {\n      rule: 'optional',\n      type: 'PubsubCommand',\n      name: 'pubsubMessage',\n      id: 115\n    }, {\n      rule: 'optional',\n      type: 'BlacklistCommand',\n      name: 'blacklistMessage',\n      id: 116\n    }]\n  }],\n  enums: [{\n    name: 'CommandType',\n    syntax: 'proto2',\n    values: [{\n      name: 'session',\n      id: 0\n    }, {\n      name: 'conv',\n      id: 1\n    }, {\n      name: 'direct',\n      id: 2\n    }, {\n      name: 'ack',\n      id: 3\n    }, {\n      name: 'rcp',\n      id: 4\n    }, {\n      name: 'unread',\n      id: 5\n    }, {\n      name: 'logs',\n      id: 6\n    }, {\n      name: 'error',\n      id: 7\n    }, {\n      name: 'login',\n      id: 8\n    }, {\n      name: 'data',\n      id: 9\n    }, {\n      name: 'room',\n      id: 10\n    }, {\n      name: 'read',\n      id: 11\n    }, {\n      name: 'presence',\n      id: 12\n    }, {\n      name: 'report',\n      id: 13\n    }, {\n      name: 'echo',\n      id: 14\n    }, {\n      name: 'loggedin',\n      id: 15\n    }, {\n      name: 'logout',\n      id: 16\n    }, {\n      name: 'loggedout',\n      id: 17\n    }, {\n      name: 'patch',\n      id: 18\n    }, {\n      name: 'pubsub',\n      id: 19\n    }, {\n      name: 'blacklist',\n      id: 20\n    }, {\n      name: 'goaway',\n      id: 21\n    }]\n  }, {\n    name: 'OpType',\n    syntax: 'proto2',\n    values: [{\n      name: 'open',\n      id: 1\n    }, {\n      name: 'add',\n      id: 2\n    }, {\n      name: 'remove',\n      id: 3\n    }, {\n      name: 'close',\n      id: 4\n    }, {\n      name: 'opened',\n      id: 5\n    }, {\n      name: 'closed',\n      id: 6\n    }, {\n      name: 'query',\n      id: 7\n    }, {\n      name: 'query_result',\n      id: 8\n    }, {\n      name: 'conflict',\n      id: 9\n    }, {\n      name: 'added',\n      id: 10\n    }, {\n      name: 'removed',\n      id: 11\n    }, {\n      name: 'refresh',\n      id: 12\n    }, {\n      name: 'refreshed',\n      id: 13\n    }, {\n      name: 'start',\n      id: 30\n    }, {\n      name: 'started',\n      id: 31\n    }, {\n      name: 'joined',\n      id: 32\n    }, {\n      name: 'members_joined',\n      id: 33\n    }, {\n      name: 'left',\n      id: 39\n    }, {\n      name: 'members_left',\n      id: 40\n    }, {\n      name: 'results',\n      id: 42\n    }, {\n      name: 'count',\n      id: 43\n    }, {\n      name: 'result',\n      id: 44\n    }, {\n      name: 'update',\n      id: 45\n    }, {\n      name: 'updated',\n      id: 46\n    }, {\n      name: 'mute',\n      id: 47\n    }, {\n      name: 'unmute',\n      id: 48\n    }, {\n      name: 'status',\n      id: 49\n    }, {\n      name: 'members',\n      id: 50\n    }, {\n      name: 'max_read',\n      id: 51\n    }, {\n      name: 'is_member',\n      id: 52\n    }, {\n      name: 'member_info_update',\n      id: 53\n    }, {\n      name: 'member_info_updated',\n      id: 54\n    }, {\n      name: 'member_info_changed',\n      id: 55\n    }, {\n      name: 'join',\n      id: 80\n    }, {\n      name: 'invite',\n      id: 81\n    }, {\n      name: 'leave',\n      id: 82\n    }, {\n      name: 'kick',\n      id: 83\n    }, {\n      name: 'reject',\n      id: 84\n    }, {\n      name: 'invited',\n      id: 85\n    }, {\n      name: 'kicked',\n      id: 86\n    }, {\n      name: 'upload',\n      id: 100\n    }, {\n      name: 'uploaded',\n      id: 101\n    }, {\n      name: 'subscribe',\n      id: 120\n    }, {\n      name: 'subscribed',\n      id: 121\n    }, {\n      name: 'unsubscribe',\n      id: 122\n    }, {\n      name: 'unsubscribed',\n      id: 123\n    }, {\n      name: 'is_subscribed',\n      id: 124\n    }, {\n      name: 'modify',\n      id: 150\n    }, {\n      name: 'modified',\n      id: 151\n    }, {\n      name: 'block',\n      id: 170\n    }, {\n      name: 'unblock',\n      id: 171\n    }, {\n      name: 'blocked',\n      id: 172\n    }, {\n      name: 'unblocked',\n      id: 173\n    }, {\n      name: 'members_blocked',\n      id: 174\n    }, {\n      name: 'members_unblocked',\n      id: 175\n    }, {\n      name: 'check_block',\n      id: 176\n    }, {\n      name: 'check_result',\n      id: 177\n    }, {\n      name: 'add_shutup',\n      id: 180\n    }, {\n      name: 'remove_shutup',\n      id: 181\n    }, {\n      name: 'query_shutup',\n      id: 182\n    }, {\n      name: 'shutup_added',\n      id: 183\n    }, {\n      name: 'shutup_removed',\n      id: 184\n    }, {\n      name: 'shutup_result',\n      id: 185\n    }, {\n      name: 'shutuped',\n      id: 186\n    }, {\n      name: 'unshutuped',\n      id: 187\n    }, {\n      name: 'members_shutuped',\n      id: 188\n    }, {\n      name: 'members_unshutuped',\n      id: 189\n    }, {\n      name: 'check_shutup',\n      id: 190\n    }]\n  }, {\n    name: 'StatusType',\n    syntax: 'proto2',\n    values: [{\n      name: 'on',\n      id: 1\n    }, {\n      name: 'off',\n      id: 2\n    }]\n  }],\n  isNamespace: true\n}).build();\n\nvar _messages$push_server = messageCompiled.push_server.messages2,\n    JsonObjectMessage = _messages$push_server.JsonObjectMessage,\n    UnreadTuple = _messages$push_server.UnreadTuple,\n    LogItem = _messages$push_server.LogItem,\n    DataCommand = _messages$push_server.DataCommand,\n    SessionCommand = _messages$push_server.SessionCommand,\n    ErrorCommand = _messages$push_server.ErrorCommand,\n    DirectCommand = _messages$push_server.DirectCommand,\n    AckCommand = _messages$push_server.AckCommand,\n    UnreadCommand = _messages$push_server.UnreadCommand,\n    ConvCommand = _messages$push_server.ConvCommand,\n    RoomCommand = _messages$push_server.RoomCommand,\n    LogsCommand = _messages$push_server.LogsCommand,\n    RcpCommand = _messages$push_server.RcpCommand,\n    ReadTuple = _messages$push_server.ReadTuple,\n    MaxReadTuple = _messages$push_server.MaxReadTuple,\n    ReadCommand = _messages$push_server.ReadCommand,\n    PresenceCommand = _messages$push_server.PresenceCommand,\n    ReportCommand = _messages$push_server.ReportCommand,\n    GenericCommand = _messages$push_server.GenericCommand,\n    BlacklistCommand = _messages$push_server.BlacklistCommand,\n    PatchCommand = _messages$push_server.PatchCommand,\n    PatchItem = _messages$push_server.PatchItem,\n    ConvMemberInfo = _messages$push_server.ConvMemberInfo,\n    CommandType = _messages$push_server.CommandType,\n    OpType = _messages$push_server.OpType,\n    StatusType = _messages$push_server.StatusType;\n\nvar message = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  JsonObjectMessage: JsonObjectMessage,\n  UnreadTuple: UnreadTuple,\n  LogItem: LogItem,\n  DataCommand: DataCommand,\n  SessionCommand: SessionCommand,\n  ErrorCommand: ErrorCommand,\n  DirectCommand: DirectCommand,\n  AckCommand: AckCommand,\n  UnreadCommand: UnreadCommand,\n  ConvCommand: ConvCommand,\n  RoomCommand: RoomCommand,\n  LogsCommand: LogsCommand,\n  RcpCommand: RcpCommand,\n  ReadTuple: ReadTuple,\n  MaxReadTuple: MaxReadTuple,\n  ReadCommand: ReadCommand,\n  PresenceCommand: PresenceCommand,\n  ReportCommand: ReportCommand,\n  GenericCommand: GenericCommand,\n  BlacklistCommand: BlacklistCommand,\n  PatchCommand: PatchCommand,\n  PatchItem: PatchItem,\n  ConvMemberInfo: ConvMemberInfo,\n  CommandType: CommandType,\n  OpType: OpType,\n  StatusType: StatusType\n});\n\nvar adapters = {};\n\nvar getAdapter = function getAdapter(name) {\n  var adapter = adapters[name];\n\n  if (adapter === undefined) {\n    throw new Error(\"\".concat(name, \" adapter is not configured\"));\n  }\n\n  return adapter;\n};\n/**\n * 指定 Adapters\n * @function\n * @memberof module:leancloud-realtime\n * @param {Adapters} newAdapters Adapters 的类型请参考 {@link https://url.leanapp.cn/adapter-type-definitions @leancloud/adapter-types} 中的定义\n */\n\n\nvar setAdapters = function setAdapters(newAdapters) {\n  _Object$assign(adapters, newAdapters);\n};\n\n/* eslint-disable */\nvar global$1 = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};\n\nvar EXPIRED = _Symbol('expired');\n\nvar debug = d('LC:Expirable');\n\nvar Expirable = /*#__PURE__*/function () {\n  function Expirable(value, ttl) {\n    this.originalValue = value;\n\n    if (typeof ttl === 'number') {\n      this.expiredAt = _Date$now() + ttl;\n    }\n  }\n\n  _createClass(Expirable, [{\n    key: \"value\",\n    get: function get() {\n      var expired = this.expiredAt && this.expiredAt <= _Date$now();\n\n      if (expired) debug(\"expired: \".concat(this.originalValue));\n      return expired ? EXPIRED : this.originalValue;\n    }\n  }]);\n\n  return Expirable;\n}();\nExpirable.EXPIRED = EXPIRED;\n\nvar debug$1 = d('LC:Cache');\n\nvar Cache = /*#__PURE__*/function () {\n  function Cache() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'anonymous';\n    this.name = name;\n    this._map = {};\n  }\n\n  var _proto = Cache.prototype;\n\n  _proto.get = function get(key) {\n    var cache = this._map[key];\n\n    if (cache) {\n      var value = cache.value;\n\n      if (value !== Expirable.EXPIRED) {\n        debug$1('[%s] hit: %s', this.name, key);\n        return value;\n      }\n\n      delete this._map[key];\n    }\n\n    debug$1(\"[\".concat(this.name, \"] missed: \").concat(key));\n    return null;\n  };\n\n  _proto.set = function set(key, value, ttl) {\n    debug$1('[%s] set: %s %d', this.name, key, ttl);\n    this._map[key] = new Expirable(value, ttl);\n  };\n\n  return Cache;\n}();\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n/**\n * 调试日志控制器\n * @const\n * @memberof module:leancloud-realtime\n * @example\n * debug.enable();  // 启用调试日志\n * debug.disable(); // 关闭调试日志\n */\n\nvar debug$2 = {\n  enable: function enable() {\n    var namespaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'LC*';\n    return d.enable(namespaces);\n  },\n  disable: d.disable\n};\nvar tryAll = function tryAll(promiseConstructors) {\n  var promise = new _Promise(promiseConstructors[0]);\n\n  if (promiseConstructors.length === 1) {\n    return promise;\n  }\n\n  return promise[\"catch\"](function () {\n    return tryAll(promiseConstructors.slice(1));\n  });\n}; // eslint-disable-next-line no-sequences\n\nvar tap = function tap(interceptor) {\n  return function (value) {\n    return interceptor(value), value;\n  };\n};\nvar finalize = function finalize(callback) {\n  return [// eslint-disable-next-line no-sequences\n  function (value) {\n    return callback(), value;\n  }, function (error) {\n    callback();\n    throw error;\n  }];\n};\n/**\n * 将对象转换为 Date，支持 string、number、ProtoBuf Long 以及 LeanCloud 的 Date 类型，\n * 其他情况下（包括对象为 falsy）返回原值。\n * @private\n */\n\nvar decodeDate = function decodeDate(date) {\n  if (!date) return date;\n\n  if (typeof date === 'string' || typeof date === 'number') {\n    return new Date(date);\n  }\n\n  if (date.__type === 'Date' && date.iso) {\n    return new Date(date.iso);\n  } // Long\n\n\n  if (typeof date.toNumber === 'function') {\n    return new Date(date.toNumber());\n  }\n\n  return date;\n};\n/**\n * 获取 Date 的毫秒数，如果不是一个 Date 返回 undefined。\n * @private\n */\n\nvar getTime = function getTime(date) {\n  return date && date.getTime ? date.getTime() : undefined;\n};\n/**\n * 解码对象中的 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\n\nvar decode = function decode(value) {\n  if (!value) return value;\n\n  if (value.__type === 'Date' && value.iso) {\n    return new Date(value.iso);\n  }\n\n  if (_Array$isArray(value)) {\n    return value.map(decode);\n  }\n\n  if (isPlainObject(value)) {\n    return _Object$keys(value).reduce(function (result, key) {\n      return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, decode(value[key])));\n    }, {});\n  }\n\n  return value;\n};\n/**\n * 将对象中的特殊类型编码为 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\n\nvar encode = function encode(value) {\n  if (value instanceof Date) return {\n    __type: 'Date',\n    iso: value.toJSON()\n  };\n\n  if (_Array$isArray(value)) {\n    return value.map(encode);\n  }\n\n  if (isPlainObject(value)) {\n    return _Object$keys(value).reduce(function (result, key) {\n      return _objectSpread(_objectSpread({}, result), {}, _defineProperty({}, key, encode(value[key])));\n    }, {});\n  }\n\n  return value;\n};\nvar keyRemap = function keyRemap(keymap, obj) {\n  return _Object$keys(obj).reduce(function (newObj, key) {\n    var newKey = keymap[key] || key;\n    return _Object$assign(newObj, _defineProperty({}, newKey, obj[key]));\n  }, {});\n};\nvar isIE10 = global$1.navigator && global$1.navigator.userAgent && global$1.navigator.userAgent.indexOf('MSIE 10.') !== -1;\n/* eslint-disable no-proto */\n\nvar getStaticProperty = function getStaticProperty(klass, property) {\n  return klass[property] || (klass.__proto__ ? getStaticProperty(klass.__proto__, property) : undefined);\n};\n/* eslint-enable no-proto */\n\nvar union = function union(a, b) {\n  return _Array$from(new _Set([].concat(_toConsumableArray(a), _toConsumableArray(b))));\n};\nvar difference = function difference(a, b) {\n  return _Array$from(function (bSet) {\n    return new _Set(a.filter(function (x) {\n      return !bSet.has(x);\n    }));\n  }(new _Set(b)));\n};\nvar map = new _WeakMap(); // protected property helper\n\nvar internal = function internal(object) {\n  if (!map.has(object)) {\n    map.set(object, {});\n  }\n\n  return map.get(object);\n};\nvar compact = function compact(obj, filter) {\n  if (!isPlainObject(obj)) return obj;\n\n  var object = _objectSpread({}, obj);\n\n  _Object$keys(object).forEach(function (prop) {\n    var value = object[prop];\n\n    if (value === filter) {\n      delete object[prop];\n    } else {\n      object[prop] = compact(value, filter);\n    }\n  });\n\n  return object;\n}; // debug utility\n\nvar removeNull = function removeNull(obj) {\n  return compact(obj, null);\n};\n\nvar trim = function trim(message) {\n  return removeNull(JSON.parse(_JSON$stringify(message)));\n};\nvar ensureArray = function ensureArray(target) {\n  if (_Array$isArray(target)) {\n    return target;\n  }\n\n  if (target === undefined || target === null) {\n    return [];\n  }\n\n  return [target];\n};\nvar setValue = function setValue(target, key, value) {\n  // '.' is not allowed in Class keys, escaping is not in concern now.\n  var segs = key.split('.');\n  var lastSeg = segs.pop();\n  var currentTarget = target;\n  segs.forEach(function (seg) {\n    if (currentTarget[seg] === undefined) currentTarget[seg] = {};\n    currentTarget = currentTarget[seg];\n  });\n  currentTarget[lastSeg] = value;\n  return target;\n};\nvar isWeapp = // eslint-disable-next-line no-undef\n(typeof wx === \"undefined\" ? \"undefined\" : _typeof(wx)) === 'object' && typeof wx.connectSocket === 'function'; // throttle decorator\n\nvar throttle = function throttle(wait) {\n  return function (target, property, descriptor) {\n    var callback = descriptor.value; // very naive, internal use only\n\n    if (callback.length) {\n      throw new Error('throttled function should not accept any arguments');\n    }\n\n    return _objectSpread(_objectSpread({}, descriptor), {}, {\n      value: function value() {\n        var _this = this;\n\n        var _internal = internal(this),\n            throttleMeta = _internal.throttleMeta;\n\n        if (!throttleMeta) {\n          throttleMeta = {};\n          internal(this).throttleMeta = throttleMeta;\n        }\n\n        var _throttleMeta = throttleMeta,\n            propertyMeta = _throttleMeta[property];\n\n        if (!propertyMeta) {\n          propertyMeta = {};\n          throttleMeta[property] = propertyMeta;\n        }\n\n        var _propertyMeta = propertyMeta,\n            _propertyMeta$previou = _propertyMeta.previouseTimestamp,\n            previouseTimestamp = _propertyMeta$previou === void 0 ? 0 : _propertyMeta$previou,\n            timeout = _propertyMeta.timeout;\n\n        var now = _Date$now();\n\n        var remainingTime = wait - (now - previouseTimestamp);\n\n        if (remainingTime <= 0) {\n          throttleMeta[property].previouseTimestamp = now;\n          callback.apply(this);\n        } else if (!timeout) {\n          propertyMeta.timeout = setTimeout(function () {\n            propertyMeta.previouseTimestamp = _Date$now();\n            delete propertyMeta.timeout;\n            callback.apply(_this);\n          }, remainingTime);\n        }\n      }\n    });\n  };\n};\nvar isCNApp = function isCNApp(appId) {\n  return appId.slice(-9) !== '-MdYXbMMI';\n};\n\nvar _class;\n\nfunction ownKeys$1(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar debug$3 = d('LC:WebSocketPlus');\nvar OPEN = 'open';\nvar DISCONNECT = 'disconnect';\nvar RECONNECT = 'reconnect';\nvar RETRY = 'retry';\nvar SCHEDULE = 'schedule';\nvar OFFLINE = 'offline';\nvar ONLINE = 'online';\nvar ERROR = 'error';\nvar MESSAGE = 'message';\nvar HEARTBEAT_TIME = 180000;\nvar TIMEOUT_TIME = 380000;\n\nvar DEFAULT_RETRY_STRATEGY = function DEFAULT_RETRY_STRATEGY(attempt) {\n  return Math.min(1000 * Math.pow(2, attempt), 300000);\n};\n\nvar requireConnected = function requireConnected(target, name, descriptor) {\n  return _objectSpread$1(_objectSpread$1({}, descriptor), {}, {\n    value: function requireConnectedWrapper() {\n      var _descriptor$value;\n\n      this.checkConnectionAvailability(name);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_descriptor$value = descriptor.value).call.apply(_descriptor$value, [this].concat(args));\n    }\n  });\n};\n\nvar WebSocketPlus = (_class = /*#__PURE__*/function (_EventEmitter) {\n  _inheritsLoose(WebSocketPlus, _EventEmitter);\n\n  _createClass(WebSocketPlus, [{\n    key: \"urls\",\n    get: function get() {\n      return this._urls;\n    },\n    set: function set(urls) {\n      this._urls = ensureArray(urls);\n    }\n  }]);\n\n  function WebSocketPlus(getUrls, protocol) {\n    var _this;\n\n    _this = _EventEmitter.call(this) || this;\n\n    _this.init();\n\n    _this._protocol = protocol;\n\n    _Promise.resolve(typeof getUrls === 'function' ? getUrls() : getUrls).then(ensureArray).then(function (urls) {\n      _this._urls = urls;\n      return _this._open();\n    }).then(function () {\n      _this.__postponeTimeoutTimer = _this._postponeTimeoutTimer.bind(_assertThisInitialized(_this));\n\n      if (global$1.addEventListener) {\n        _this.__pause = function () {\n          if (_this.can('pause')) _this.pause();\n        };\n\n        _this.__resume = function () {\n          if (_this.can('resume')) _this.resume();\n        };\n\n        global$1.addEventListener('offline', _this.__pause);\n        global$1.addEventListener('online', _this.__resume);\n      }\n\n      _this.open();\n    })[\"catch\"](_this[\"throw\"].bind(_assertThisInitialized(_this)));\n\n    return _this;\n  }\n\n  var _proto = WebSocketPlus.prototype;\n\n  _proto._open = function _open() {\n    var _this2 = this;\n\n    return this._createWs(this._urls, this._protocol).then(function (ws) {\n      var _this2$_urls = _toArray(_this2._urls),\n          first = _this2$_urls[0],\n          reset = _this2$_urls.slice(1);\n\n      _this2._urls = [].concat(_toConsumableArray(reset), [first]);\n      return ws;\n    });\n  };\n\n  _proto._createWs = function _createWs(urls, protocol) {\n    var _this3 = this;\n\n    return tryAll(urls.map(function (url) {\n      return function (resolve, reject) {\n        debug$3(\"connect [\".concat(url, \"] \").concat(protocol));\n        var WebSocket = getAdapter('WebSocket');\n        var ws = protocol ? new WebSocket(url, protocol) : new WebSocket(url);\n        ws.binaryType = _this3.binaryType || 'arraybuffer';\n\n        ws.onopen = function () {\n          return resolve(ws);\n        };\n\n        ws.onclose = function (error) {\n          if (error instanceof Error) {\n            return reject(error);\n          } // in browser, error event is useless\n\n\n          return reject(new Error(\"Failed to connect [\".concat(url, \"]\")));\n        };\n\n        ws.onerror = ws.onclose;\n      };\n    })).then(function (ws) {\n      _this3._ws = ws;\n      _this3._ws.onclose = _this3._handleClose.bind(_this3);\n      _this3._ws.onmessage = _this3._handleMessage.bind(_this3);\n      return ws;\n    });\n  };\n\n  _proto._destroyWs = function _destroyWs() {\n    var ws = this._ws;\n    if (!ws) return;\n    ws.onopen = null;\n    ws.onclose = null;\n    ws.onerror = null;\n    ws.onmessage = null;\n    this._ws = null;\n    ws.close();\n  } // eslint-disable-next-line class-methods-use-this\n  ;\n\n  _proto.onbeforeevent = function onbeforeevent(event, from, to) {\n    for (var _len2 = arguments.length, payload = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      payload[_key2 - 3] = arguments[_key2];\n    }\n\n    debug$3(\"\".concat(event, \": \").concat(from, \" -> \").concat(to, \" %o\"), payload);\n  };\n\n  _proto.onopen = function onopen() {\n    this.emit(OPEN);\n  };\n\n  _proto.onconnected = function onconnected() {\n    this._startConnectionKeeper();\n  };\n\n  _proto.onleaveconnected = function onleaveconnected(event, from, to) {\n    this._stopConnectionKeeper();\n\n    this._destroyWs();\n\n    if (to === 'offline' || to === 'disconnected') {\n      this.emit(DISCONNECT);\n    }\n  };\n\n  _proto.onpause = function onpause() {\n    this.emit(OFFLINE);\n  };\n\n  _proto.onbeforeresume = function onbeforeresume() {\n    this.emit(ONLINE);\n  };\n\n  _proto.onreconnect = function onreconnect() {\n    this.emit(RECONNECT);\n  };\n\n  _proto.ondisconnected = function ondisconnected(event, from, to) {\n    var _this4 = this;\n\n    var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    var delay = from === OFFLINE ? 0 : DEFAULT_RETRY_STRATEGY.call(null, attempt);\n    debug$3(\"schedule attempt=\".concat(attempt, \" delay=\").concat(delay));\n    this.emit(SCHEDULE, attempt, delay);\n\n    if (this.__scheduledRetry) {\n      clearTimeout(this.__scheduledRetry);\n    }\n\n    this.__scheduledRetry = setTimeout(function () {\n      if (_this4.is('disconnected')) {\n        _this4.retry(attempt);\n      }\n    }, delay);\n  };\n\n  _proto.onretry = function onretry(event, from, to) {\n    var _this5 = this;\n\n    var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    this.emit(RETRY, attempt);\n\n    this._open().then(function () {\n      return _this5.can('reconnect') ? _this5.reconnect() : _this5._destroyWs();\n    }, function () {\n      return _this5.can('fail') && _this5.fail(attempt + 1);\n    });\n  };\n\n  _proto.onerror = function onerror(event, from, to, error) {\n    this.emit(ERROR, error);\n  };\n\n  _proto.onclose = function onclose() {\n    if (global$1.removeEventListener) {\n      if (this.__pause) global$1.removeEventListener('offline', this.__pause);\n      if (this.__resume) global$1.removeEventListener('online', this.__resume);\n    }\n  };\n\n  _proto.checkConnectionAvailability = function checkConnectionAvailability() {\n    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'API';\n\n    if (!this.is('connected')) {\n      var currentState = this.current;\n      console.warn(\"\".concat(name, \" should not be called when the connection is \").concat(currentState));\n\n      if (this.is('disconnected') || this.is('reconnecting')) {\n        console.warn('disconnect and reconnect event should be handled to avoid such calls.');\n      }\n\n      throw new Error('Connection unavailable');\n    }\n  } // jsdoc-ignore-start\n  ;\n\n  _proto. // jsdoc-ignore-end\n  _ping = function _ping() {\n    debug$3('ping');\n\n    try {\n      this.ping();\n    } catch (error) {\n      console.warn(\"websocket ping error: \".concat(error.message));\n    }\n  };\n\n  _proto.ping = function ping() {\n    if (this._ws.ping) {\n      this._ws.ping();\n    } else {\n      console.warn(\"The WebSocket implement does not support sending ping frame.\\n        Override ping method to use application defined ping/pong mechanism.\");\n    }\n  };\n\n  _proto._postponeTimeoutTimer = function _postponeTimeoutTimer() {\n    var _this6 = this;\n\n    debug$3('_postponeTimeoutTimer');\n\n    this._clearTimeoutTimers();\n\n    this._timeoutTimer = setTimeout(function () {\n      debug$3('timeout');\n\n      _this6.disconnect();\n    }, TIMEOUT_TIME);\n  };\n\n  _proto._clearTimeoutTimers = function _clearTimeoutTimers() {\n    if (this._timeoutTimer) {\n      clearTimeout(this._timeoutTimer);\n    }\n  };\n\n  _proto._startConnectionKeeper = function _startConnectionKeeper() {\n    debug$3('start connection keeper');\n    this._heartbeatTimer = setInterval(this._ping.bind(this), HEARTBEAT_TIME);\n    var addListener = this._ws.addListener || this._ws.addEventListener;\n\n    if (!addListener) {\n      debug$3('connection keeper disabled due to the lack of #addEventListener.');\n      return;\n    }\n\n    addListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n    addListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n\n    this._postponeTimeoutTimer();\n  };\n\n  _proto._stopConnectionKeeper = function _stopConnectionKeeper() {\n    debug$3('stop connection keeper'); // websockets/ws#489\n\n    var removeListener = this._ws.removeListener || this._ws.removeEventListener;\n\n    if (removeListener) {\n      removeListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n      removeListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n\n      this._clearTimeoutTimers();\n    }\n\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n    }\n  };\n\n  _proto._handleClose = function _handleClose(event) {\n    debug$3(\"ws closed [\".concat(event.code, \"] \").concat(event.reason)); // socket closed manually, ignore close event.\n\n    if (this.isFinished()) return;\n    this.handleClose(event);\n  };\n\n  _proto.handleClose = function handleClose() {\n    // reconnect\n    this.disconnect();\n  } // jsdoc-ignore-start\n  ;\n\n  _proto. // jsdoc-ignore-end\n  send = function send(data) {\n    debug$3('send', data);\n\n    this._ws.send(data);\n  };\n\n  _proto._handleMessage = function _handleMessage(event) {\n    debug$3('message', event.data);\n    this.handleMessage(event.data);\n  };\n\n  _proto.handleMessage = function handleMessage(message) {\n    this.emit(MESSAGE, message);\n  };\n\n  return WebSocketPlus;\n}(EventEmitter), (_applyDecoratedDescriptor(_class.prototype, \"_ping\", [requireConnected], _Object$getOwnPropertyDescriptor(_class.prototype, \"_ping\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"send\", [requireConnected], _Object$getOwnPropertyDescriptor(_class.prototype, \"send\"), _class.prototype)), _class);\nStateMachine.create({\n  target: WebSocketPlus.prototype,\n  initial: {\n    state: 'initialized',\n    event: 'init',\n    defer: true\n  },\n  terminal: 'closed',\n  events: [{\n    name: 'open',\n    from: 'initialized',\n    to: 'connected'\n  }, {\n    name: 'disconnect',\n    from: 'connected',\n    to: 'disconnected'\n  }, {\n    name: 'retry',\n    from: 'disconnected',\n    to: 'reconnecting'\n  }, {\n    name: 'fail',\n    from: 'reconnecting',\n    to: 'disconnected'\n  }, {\n    name: 'reconnect',\n    from: 'reconnecting',\n    to: 'connected'\n  }, {\n    name: 'pause',\n    from: ['connected', 'disconnected', 'reconnecting'],\n    to: 'offline'\n  }, {}, {\n    name: 'resume',\n    from: 'offline',\n    to: 'disconnected'\n  }, {\n    name: 'close',\n    from: ['connected', 'disconnected', 'reconnecting', 'offline'],\n    to: 'closed'\n  }, {\n    name: 'throw',\n    from: '*',\n    to: 'error'\n  }]\n});\n\nvar error = _Object$freeze({\n  1000: {\n    name: 'CLOSE_NORMAL'\n  },\n  1006: {\n    name: 'CLOSE_ABNORMAL'\n  },\n  4100: {\n    name: 'APP_NOT_AVAILABLE',\n    message: 'App not exists or realtime message service is disabled.'\n  },\n  4102: {\n    name: 'SIGNATURE_FAILED',\n    message: 'Login signature mismatch.'\n  },\n  4103: {\n    name: 'INVALID_LOGIN',\n    message: 'Malformed clientId.'\n  },\n  4105: {\n    name: 'SESSION_REQUIRED',\n    message: 'Message sent before session opened.'\n  },\n  4107: {\n    name: 'READ_TIMEOUT'\n  },\n  4108: {\n    name: 'LOGIN_TIMEOUT'\n  },\n  4109: {\n    name: 'FRAME_TOO_LONG'\n  },\n  4110: {\n    name: 'INVALID_ORIGIN',\n    message: 'Access denied by domain whitelist.'\n  },\n  4111: {\n    name: 'SESSION_CONFLICT'\n  },\n  4112: {\n    name: 'SESSION_TOKEN_EXPIRED'\n  },\n  4113: {\n    name: 'APP_QUOTA_EXCEEDED',\n    message: 'The daily active users limit exceeded.'\n  },\n  4116: {\n    name: 'MESSAGE_SENT_QUOTA_EXCEEDED',\n    message: 'Command sent too fast.'\n  },\n  4200: {\n    name: 'INTERNAL_ERROR',\n    message: 'Internal error, please contact LeanCloud for support.'\n  },\n  4301: {\n    name: 'CONVERSATION_API_FAILED',\n    message: 'Upstream Conversatoin API failed, see error.detail for details.'\n  },\n  4302: {\n    name: 'CONVERSATION_SIGNATURE_FAILED',\n    message: 'Conversation action signature mismatch.'\n  },\n  4303: {\n    name: 'CONVERSATION_NOT_FOUND'\n  },\n  4304: {\n    name: 'CONVERSATION_FULL'\n  },\n  4305: {\n    name: 'CONVERSATION_REJECTED_BY_APP',\n    message: 'Conversation action rejected by hook.'\n  },\n  4306: {\n    name: 'CONVERSATION_UPDATE_FAILED'\n  },\n  4307: {\n    name: 'CONVERSATION_READ_ONLY'\n  },\n  4308: {\n    name: 'CONVERSATION_NOT_ALLOWED'\n  },\n  4309: {\n    name: 'CONVERSATION_UPDATE_REJECTED',\n    message: 'Conversation update rejected because the client is not a member.'\n  },\n  4310: {\n    name: 'CONVERSATION_QUERY_FAILED',\n    message: 'Conversation query failed because it is too expansive.'\n  },\n  4311: {\n    name: 'CONVERSATION_LOG_FAILED'\n  },\n  4312: {\n    name: 'CONVERSATION_LOG_REJECTED',\n    message: 'Message query rejected because the client is not a member of the conversation.'\n  },\n  4313: {\n    name: 'SYSTEM_CONVERSATION_REQUIRED'\n  },\n  4314: {\n    name: 'NORMAL_CONVERSATION_REQUIRED'\n  },\n  4315: {\n    name: 'CONVERSATION_BLACKLISTED',\n    message: 'Blacklisted in the conversation.'\n  },\n  4316: {\n    name: 'TRANSIENT_CONVERSATION_REQUIRED'\n  },\n  4317: {\n    name: 'CONVERSATION_MEMBERSHIP_REQUIRED'\n  },\n  4318: {\n    name: 'CONVERSATION_API_QUOTA_EXCEEDED',\n    message: 'LeanCloud API quota exceeded. You may upgrade your plan.'\n  },\n  4323: {\n    name: 'TEMPORARY_CONVERSATION_EXPIRED',\n    message: 'Temporary conversation expired or does not exist.'\n  },\n  4401: {\n    name: 'INVALID_MESSAGING_TARGET',\n    message: 'Conversation does not exist or client is not a member.'\n  },\n  4402: {\n    name: 'MESSAGE_REJECTED_BY_APP',\n    message: 'Message rejected by hook.'\n  },\n  4403: {\n    name: 'MESSAGE_OWNERSHIP_REQUIRED'\n  },\n  4404: {\n    name: 'MESSAGE_NOT_FOUND'\n  },\n  4405: {\n    name: 'MESSAGE_UPDATE_REJECTED_BY_APP',\n    message: 'Message update rejected by hook.'\n  },\n  4406: {\n    name: 'MESSAGE_EDIT_DISABLED'\n  },\n  4407: {\n    name: 'MESSAGE_RECALL_DISABLED'\n  },\n  5130: {\n    name: 'OWNER_PROMOTION_NOT_ALLOWED',\n    message: \"Updating a member's role to owner is not allowed.\"\n  }\n});\nvar ErrorCode = _Object$freeze(_Object$keys(error).reduce(function (result, code) {\n  return _Object$assign(result, _defineProperty({}, error[code].name, Number(code)));\n}, {}));\nvar createError = function createError(_ref) {\n  var code = _ref.code,\n      reason = _ref.reason,\n      appCode = _ref.appCode,\n      detail = _ref.detail,\n      errorMessage = _ref.error;\n  var message = reason || detail || errorMessage;\n  var name = reason;\n\n  if (!message && error[code]) {\n    name = error[code].name;\n    message = error[code].message || name;\n  }\n\n  if (!message) {\n    message = \"Unknow Error: \".concat(code);\n  }\n\n  var err = new Error(message);\n  return _Object$assign(err, {\n    code: code,\n    appCode: appCode,\n    detail: detail,\n    name: name\n  });\n};\n\nvar debug$4 = d('LC:Connection');\nvar COMMAND_TIMEOUT = 20000;\n\nvar EXPIRE = _Symbol('expire');\n\nvar Connection = /*#__PURE__*/function (_WebSocketPlus) {\n  _inheritsLoose(Connection, _WebSocketPlus);\n\n  function Connection(getUrl, _ref) {\n    var _this;\n\n    var format = _ref.format,\n        version = _ref.version;\n    debug$4('initializing Connection');\n    var protocolString = \"lc.\".concat(format, \".\").concat(version);\n    _this = _WebSocketPlus.call(this, getUrl, protocolString) || this;\n    _this._protocolFormat = format;\n    _this._commands = {};\n    _this._serialId = 0;\n    return _this;\n  }\n\n  var _proto = Connection.prototype;\n\n  _proto.send = /*#__PURE__*/function () {\n    var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(command) {\n      var _this2 = this;\n\n      var waitingForRespond,\n          serialId,\n          message,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              waitingForRespond = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n\n              if (waitingForRespond) {\n                this._serialId += 1;\n                serialId = this._serialId;\n                command.i = serialId; // eslint-disable-line no-param-reassign\n              }\n\n              if (debug$4.enabled) debug$4('↑ %O sent', trim(command));\n\n              if (this._protocolFormat === 'proto2base64') {\n                message = command.toBase64();\n              } else if (command.toArrayBuffer) {\n                message = command.toArrayBuffer();\n              }\n\n              if (message) {\n                _context.next = 6;\n                break;\n              }\n\n              throw new TypeError(\"\".concat(command, \" is not a GenericCommand\"));\n\n            case 6:\n              _WebSocketPlus.prototype.send.call(this, message);\n\n              if (waitingForRespond) {\n                _context.next = 9;\n                break;\n              }\n\n              return _context.abrupt(\"return\", undefined);\n\n            case 9:\n              return _context.abrupt(\"return\", new _Promise(function (resolve, reject) {\n                _this2._commands[serialId] = {\n                  resolve: resolve,\n                  reject: reject,\n                  timeout: setTimeout(function () {\n                    if (_this2._commands[serialId]) {\n                      if (debug$4.enabled) debug$4('✗ %O timeout', trim(command));\n                      reject(createError({\n                        error: \"Command Timeout [cmd:\".concat(command.cmd, \" op:\").concat(command.op, \"]\"),\n                        name: 'COMMAND_TIMEOUT'\n                      }));\n                      delete _this2._commands[serialId];\n                    }\n                  }, COMMAND_TIMEOUT)\n                };\n              }));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function send(_x) {\n      return _send.apply(this, arguments);\n    }\n\n    return send;\n  }();\n\n  _proto.handleMessage = function handleMessage(msg) {\n    var message;\n\n    try {\n      message = GenericCommand.decode(msg);\n      if (debug$4.enabled) debug$4('↓ %O received', trim(message));\n    } catch (e) {\n      console.warn('Decode message failed:', e.message, msg);\n      return;\n    }\n\n    var serialId = message.i;\n\n    if (serialId) {\n      if (this._commands[serialId]) {\n        clearTimeout(this._commands[serialId].timeout);\n\n        if (message.cmd === CommandType.error) {\n          this._commands[serialId].reject(createError(message.errorMessage));\n        } else {\n          this._commands[serialId].resolve(message);\n        }\n\n        delete this._commands[serialId];\n      } else {\n        console.warn(\"Unexpected command received with serialId [\".concat(serialId, \"],\\n         which have timed out or never been requested.\"));\n      }\n    } else {\n      switch (message.cmd) {\n        case CommandType.error:\n          {\n            this.emit(ERROR, createError(message.errorMessage));\n            return;\n          }\n\n        case CommandType.goaway:\n          {\n            this.emit(EXPIRE);\n            return;\n          }\n\n        default:\n          {\n            this.emit(MESSAGE, message);\n          }\n      }\n    }\n  };\n\n  _proto.ping = function ping() {\n    return this.send(new GenericCommand({\n      cmd: CommandType.echo\n    }))[\"catch\"](function (error) {\n      return debug$4('ping failed:', error);\n    });\n  };\n\n  return Connection;\n}(WebSocketPlus);\n\nvar debug$5 = d('LC:request');\nvar request = (function (_ref) {\n  var _ref$method = _ref.method,\n      method = _ref$method === void 0 ? 'GET' : _ref$method,\n      _url = _ref.url,\n      query = _ref.query,\n      headers = _ref.headers,\n      data = _ref.data,\n      time = _ref.timeout;\n  var url = _url;\n\n  if (query) {\n    var queryString = _Object$keys(query).map(function (key) {\n      var value = query[key];\n      if (value === undefined) return undefined;\n      var v = isPlainObject(value) ? _JSON$stringify(value) : value;\n      return \"\".concat(encodeURIComponent(key), \"=\").concat(encodeURIComponent(v));\n    }).filter(function (qs) {\n      return qs;\n    }).join('&');\n\n    url = \"\".concat(url, \"?\").concat(queryString);\n  }\n\n  debug$5('Req: %O %O %O', method, url, {\n    headers: headers,\n    data: data\n  });\n  var request = getAdapter('request');\n  var promise = request(url, {\n    method: method,\n    headers: headers,\n    data: data\n  }).then(function (response) {\n    if (response.ok === false) {\n      var error = createError(response.data);\n      error.response = response;\n      throw error;\n    }\n\n    debug$5('Res: %O %O %O', url, response.status, response.data);\n    return response.data;\n  })[\"catch\"](function (error) {\n    if (error.response) {\n      debug$5('Error: %O %O %O', url, error.response.status, error.response.data);\n    }\n\n    throw error;\n  });\n  return time ? promiseTimeout.timeout(promise, time) : promise;\n});\n\nvar checkType = function checkType(middleware) {\n  return function (param) {\n    var constructor = param.constructor;\n    return _Promise.resolve(param).then(middleware).then(tap(function (result) {\n      if (result === undefined || result === null) {\n        // eslint-disable-next-line max-len\n        return console.warn(\"Middleware[\".concat(middleware._pluginName || 'anonymous plugin', \":\").concat(middleware.name || 'anonymous middleware', \"] param/return types not match. It returns \").concat(result, \" while a \").concat(param.constructor.name, \" expected.\"));\n      }\n\n      if (!(result instanceof constructor)) {\n        // eslint-disable-next-line max-len\n        return console.warn(\"Middleware[\".concat(middleware._pluginName || 'anonymous plugin', \":\").concat(middleware.name || 'anonymous middleware', \"] param/return types not match. It returns a \").concat(result.constructor.name, \" while a \").concat(param.constructor.name, \" expected.\"));\n      }\n\n      return 0;\n    }));\n  };\n};\n\nvar applyDecorators = function applyDecorators(decorators, target) {\n  if (decorators) {\n    decorators.forEach(function (decorator) {\n      try {\n        decorator(target);\n      } catch (error) {\n        if (decorator._pluginName) {\n          error.message += \"[\".concat(decorator._pluginName, \"]\");\n        }\n\n        throw error;\n      }\n    });\n  }\n};\nvar applyMiddlewares = function applyMiddlewares(middlewares) {\n  return function (target) {\n    return ensureArray(middlewares).reduce(function (previousPromise, middleware) {\n      return previousPromise.then(checkType(middleware))[\"catch\"](function (error) {\n        if (middleware._pluginName) {\n          // eslint-disable-next-line no-param-reassign\n          error.message += \"[\".concat(middleware._pluginName, \"]\");\n        }\n\n        throw error;\n      });\n    }, _Promise.resolve(target));\n  };\n};\nvar applyDispatcher = function applyDispatcher(dispatchers, payload) {\n  return ensureArray(dispatchers).reduce(function (resultPromise, dispatcher) {\n    return resultPromise.then(function (shouldDispatch) {\n      return shouldDispatch === false ? false : dispatcher.apply(void 0, _toConsumableArray(payload));\n    })[\"catch\"](function (error) {\n      if (dispatcher._pluginName) {\n        // eslint-disable-next-line no-param-reassign\n        error.message += \"[\".concat(dispatcher._pluginName, \"]\");\n      }\n\n      throw error;\n    });\n  }, _Promise.resolve(true));\n};\n\nvar version = \"5.0.0-rc.3\";\n\nfunction ownKeys$2(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar debug$6 = d('LC:Realtime');\nvar routerCache = new Cache('push-router');\nvar initializedApp = {};\n\nvar Realtime = /*#__PURE__*/function (_EventEmitter) {\n  _inheritsLoose(Realtime, _EventEmitter);\n\n  /**\n   * @extends EventEmitter\n   * @param  {Object} options\n   * @param  {String} options.appId\n   * @param  {String} options.appKey （since 4.0.0）\n   * @param  {String|Object} [options.server] 指定服务器域名，中国节点应用此参数必填（since 4.0.0）\n   * @param  {Boolean} [options.pushOfflineMessages=false] 启用推送离线消息模式（默认为发送未读消息通知模式）\n   * @param  {Boolean} [options.noBinary=false] 设置 WebSocket 使用字符串格式收发消息（默认为二进制格式）。\n   *                                            适用于 WebSocket 实现不支持二进制数据格式的情况\n   * @param  {Boolean} [options.ssl=true] 使用 wss 进行连接\n   * @param  {String|String[]} [options.RTMServers] 指定私有部署的 RTM 服务器地址（since 4.0.0）\n   * @param  {Plugin[]} [options.plugins] 加载插件（since 3.1.0）\n   */\n  function Realtime(_ref) {\n    var _this2;\n\n    var plugins = _ref.plugins,\n        options = _objectWithoutProperties(_ref, [\"plugins\"]);\n\n    debug$6('initializing Realtime %s %O', version, options);\n    _this2 = _EventEmitter.call(this) || this;\n    var appId = options.appId;\n\n    if (typeof appId !== 'string') {\n      throw new TypeError(\"appId [\".concat(appId, \"] is not a string\"));\n    }\n\n    if (initializedApp[appId]) {\n      throw new Error(\"App [\".concat(appId, \"] is aleady initialized.\"));\n    }\n\n    initializedApp[appId] = true;\n\n    if (typeof options.appKey !== 'string') {\n      throw new TypeError(\"appKey [\".concat(options.appKey, \"] is not a string\"));\n    }\n\n    if (isCNApp(appId)) {\n      if (!options.server) {\n        throw new TypeError(\"server option is required for apps from CN region\");\n      }\n    }\n\n    _this2._options = _objectSpread$2({\n      appId: undefined,\n      appKey: undefined,\n      pushOfflineMessages: false,\n      noBinary: false,\n      ssl: true,\n      RTMServerName: typeof process !== 'undefined' ? process.env.RTM_SERVER_NAME : undefined\n    }, options);\n    _this2._cache = new Cache('endpoints');\n\n    var _this = internal(_assertThisInitialized(_this2));\n\n    _this.clients = new _Set();\n    _this.pendingClients = new _Set();\n    var mergedPlugins = [].concat(_toConsumableArray(ensureArray(Realtime.__preRegisteredPlugins)), _toConsumableArray(ensureArray(plugins)));\n    debug$6('Using plugins %o', mergedPlugins.map(function (plugin) {\n      return plugin.name;\n    }));\n    _this2._plugins = mergedPlugins.reduce(function (result, plugin) {\n      _Object$keys(plugin).forEach(function (hook) {\n        if ({}.hasOwnProperty.call(plugin, hook) && hook !== 'name') {\n          if (plugin.name) {\n            ensureArray(plugin[hook]).forEach(function (value) {\n              // eslint-disable-next-line no-param-reassign\n              value._pluginName = plugin.name;\n            });\n          } // eslint-disable-next-line no-param-reassign\n\n\n          result[hook] = ensureArray(result[hook]).concat(plugin[hook]);\n        }\n      });\n\n      return result;\n    }, {}); // onRealtimeCreate hook\n\n    applyDecorators(_this2._plugins.onRealtimeCreate, _assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  var _proto = Realtime.prototype;\n\n  _proto._request = /*#__PURE__*/function () {\n    var _request2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {\n      var method, _url, _ref2$version, version, path, query, headers, data, url, _this$_options, appId, server, _yield$this$construct, api;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              method = _ref2.method, _url = _ref2.url, _ref2$version = _ref2.version, version = _ref2$version === void 0 ? '1.1' : _ref2$version, path = _ref2.path, query = _ref2.query, headers = _ref2.headers, data = _ref2.data;\n              url = _url;\n\n              if (url) {\n                _context.next = 9;\n                break;\n              }\n\n              _this$_options = this._options, appId = _this$_options.appId, server = _this$_options.server;\n              _context.next = 6;\n              return this.constructor._getServerUrls({\n                appId: appId,\n                server: server\n              });\n\n            case 6:\n              _yield$this$construct = _context.sent;\n              api = _yield$this$construct.api;\n              url = \"\".concat(api, \"/\").concat(version).concat(path);\n\n            case 9:\n              return _context.abrupt(\"return\", request({\n                url: url,\n                method: method,\n                query: query,\n                headers: _objectSpread$2({\n                  'X-LC-Id': this._options.appId,\n                  'X-LC-Key': this._options.appKey\n                }, headers),\n                data: data\n              }));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function _request(_x) {\n      return _request2.apply(this, arguments);\n    }\n\n    return _request;\n  }();\n\n  _proto._open = function _open() {\n    var _this3 = this;\n\n    if (this._openPromise) return this._openPromise;\n    var format = 'protobuf2';\n\n    if (this._options.noBinary) {\n      // 不发送 binary data，fallback to base64 string\n      format = 'proto2base64';\n    }\n\n    var version = 3;\n\n    if (this._options.pushOfflineMessages) {\n      // 不推送离线消息，而是发送对话的未读通知\n      version = 1;\n    }\n\n    var protocol = {\n      format: format,\n      version: version\n    };\n    this._openPromise = new _Promise(function (resolve, reject) {\n      debug$6('No connection established, create a new one.');\n      var connection = new Connection(function () {\n        return _this3._getRTMServers(_this3._options);\n      }, protocol);\n      connection.on(OPEN, function () {\n        return resolve(connection);\n      }).on(ERROR, reject).on(EXPIRE, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                debug$6('Connection expired. Refresh endpoints.');\n\n                _this3._cache.set('endpoints', null, 0);\n\n                _context2.next = 4;\n                return _this3._getRTMServers(_this3._options);\n\n              case 4:\n                connection.urls = _context2.sent;\n                connection.disconnect();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))).on(MESSAGE, _this3._dispatchCommand.bind(_this3));\n      /**\n       * 连接断开。\n       * 连接断开可能是因为 SDK 进入了离线状态（see {@link Realtime#event:OFFLINE}），或长时间没有收到服务器心跳。\n       * 连接断开后所有的网络操作都会失败，请在连接断开后禁用相关的 UI 元素。\n       * @event Realtime#DISCONNECT\n       */\n\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event Realtime#SCHEDULE\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       */\n\n      /**\n       * 正在尝试重新连接\n       * @event Realtime#RETRY\n       * @param {Number} attempt 尝试重连的次数\n       */\n\n      /**\n       * 连接恢复正常。\n       * 请重新启用在 {@link Realtime#event:DISCONNECT} 事件中禁用的相关 UI 元素\n       * @event Realtime#RECONNECT\n       */\n\n      /**\n       * 客户端连接断开\n       * @event IMClient#DISCONNECT\n       * @see Realtime#event:DISCONNECT\n       * @since 3.2.0\n       */\n\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event IMClient#SCHEDULE\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       * @since 3.2.0\n       */\n\n      /**\n       * 正在尝试重新连接\n       * @event IMClient#RETRY\n       * @param {Number} attempt 尝试重连的次数\n       * @since 3.2.0\n       */\n\n      /**\n       * 客户端进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event Realtime#OFFLINE\n       * @since 3.4.0\n       */\n\n      /**\n       * 客户端恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event Realtime#ONLINE\n       * @since 3.4.0\n       */\n\n      /**\n       * 进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event IMClient#OFFLINE\n       * @since 3.4.0\n       */\n\n      /**\n       * 恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event IMClient#ONLINE\n       * @since 3.4.0\n       */\n      // event proxy\n\n      [DISCONNECT, RECONNECT, RETRY, SCHEDULE, OFFLINE, ONLINE].forEach(function (event) {\n        return connection.on(event, function () {\n          for (var _len = arguments.length, payload = new Array(_len), _key = 0; _key < _len; _key++) {\n            payload[_key] = arguments[_key];\n          }\n\n          debug$6(\"\".concat(event, \" event emitted. %o\"), payload);\n\n          _this3.emit.apply(_this3, [event].concat(payload));\n\n          if (event !== RECONNECT) {\n            internal(_this3).clients.forEach(function (client) {\n              client.emit.apply(client, [event].concat(payload));\n            });\n          }\n        });\n      }); // override handleClose\n\n      connection.handleClose = function handleClose(event) {\n        var isFatal = [ErrorCode.APP_NOT_AVAILABLE, ErrorCode.INVALID_LOGIN, ErrorCode.INVALID_ORIGIN].some(function (errorCode) {\n          return errorCode === event.code;\n        });\n\n        if (isFatal) {\n          // in these cases, SDK should throw.\n          this[\"throw\"](createError(event));\n        } else {\n          // reconnect\n          this.disconnect();\n        }\n      };\n\n      internal(_this3).connection = connection;\n    });\n    return this._openPromise;\n  };\n\n  _proto._getRTMServers = /*#__PURE__*/function () {\n    var _getRTMServers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {\n      var info, cachedEndPoints, _info, server, secondary, ttl;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!options.RTMServers) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", shuffle(ensureArray(options.RTMServers)));\n\n            case 2:\n              cachedEndPoints = this._cache.get('endpoints');\n\n              if (!cachedEndPoints) {\n                _context3.next = 7;\n                break;\n              }\n\n              info = cachedEndPoints;\n              _context3.next = 14;\n              break;\n\n            case 7:\n              _context3.next = 9;\n              return this.constructor._fetchRTMServers(options);\n\n            case 9:\n              info = _context3.sent;\n              _info = info, server = _info.server, secondary = _info.secondary, ttl = _info.ttl;\n\n              if (!(typeof server !== 'string' && typeof secondary !== 'string' && typeof ttl !== 'number')) {\n                _context3.next = 13;\n                break;\n              }\n\n              throw new Error(\"malformed RTM route response: \".concat(_JSON$stringify(info)));\n\n            case 13:\n              this._cache.set('endpoints', info, info.ttl * 1000);\n\n            case 14:\n              debug$6('endpoint info: %O', info);\n              return _context3.abrupt(\"return\", [info.server, info.secondary]);\n\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function _getRTMServers(_x2) {\n      return _getRTMServers2.apply(this, arguments);\n    }\n\n    return _getRTMServers;\n  }();\n\n  Realtime._getServerUrls = /*#__PURE__*/function () {\n    var _getServerUrls2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref4) {\n      var appId, server, cachedRouter, defaultProtocol;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              appId = _ref4.appId, server = _ref4.server;\n              debug$6('fetch server urls');\n\n              if (!server) {\n                _context4.next = 6;\n                break;\n              }\n\n              if (!(typeof server !== 'string')) {\n                _context4.next = 5;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", server);\n\n            case 5:\n              return _context4.abrupt(\"return\", {\n                RTMRouter: server,\n                api: server\n              });\n\n            case 6:\n              cachedRouter = routerCache.get(appId);\n\n              if (!cachedRouter) {\n                _context4.next = 9;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", cachedRouter);\n\n            case 9:\n              defaultProtocol = 'https://';\n              return _context4.abrupt(\"return\", request({\n                url: 'https://app-router.com/2/route',\n                query: {\n                  appId: appId\n                },\n                timeout: 20000\n              }).then(tap(debug$6)).then(function (_ref5) {\n                var RTMRouterServer = _ref5.rtm_router_server,\n                    APIServer = _ref5.api_server,\n                    _ref5$ttl = _ref5.ttl,\n                    ttl = _ref5$ttl === void 0 ? 3600 : _ref5$ttl;\n\n                if (!RTMRouterServer) {\n                  throw new Error('rtm router not exists');\n                }\n\n                var serverUrls = {\n                  RTMRouter: \"\".concat(defaultProtocol).concat(RTMRouterServer),\n                  api: \"\".concat(defaultProtocol).concat(APIServer)\n                };\n                routerCache.set(appId, serverUrls, ttl * 1000);\n                return serverUrls;\n              })[\"catch\"](function () {\n                var id = appId.slice(0, 8).toLowerCase();\n                var domain = 'lncldglobal.com';\n                return {\n                  RTMRouter: \"\".concat(defaultProtocol).concat(id, \".rtm.\").concat(domain),\n                  api: \"\".concat(defaultProtocol).concat(id, \".api.\").concat(domain)\n                };\n              }));\n\n            case 11:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function _getServerUrls(_x3) {\n      return _getServerUrls2.apply(this, arguments);\n    }\n\n    return _getServerUrls;\n  }();\n\n  Realtime._fetchRTMServers = function _fetchRTMServers(_ref6) {\n    var appId = _ref6.appId,\n        ssl = _ref6.ssl,\n        server = _ref6.server,\n        RTMServerName = _ref6.RTMServerName;\n    debug$6('fetch endpoint info');\n    return this._getServerUrls({\n      appId: appId,\n      server: server\n    }).then(tap(debug$6)).then(function (_ref7) {\n      var RTMRouter = _ref7.RTMRouter;\n      return request({\n        url: \"\".concat(RTMRouter, \"/v1/route\"),\n        query: {\n          appId: appId,\n          secure: ssl,\n          features: isWeapp ? 'wechat' : undefined,\n          server: RTMServerName,\n          _t: _Date$now()\n        },\n        timeout: 20000\n      }).then(tap(debug$6));\n    });\n  };\n\n  _proto._close = function _close() {\n    if (this._openPromise) {\n      this._openPromise.then(function (connection) {\n        return connection.close();\n      });\n    }\n\n    delete this._openPromise;\n  }\n  /**\n   * 手动进行重连。\n   * SDK 在网络出现异常时会自动按照一定的时间间隔尝试重连，调用该方法会立即尝试重连并重置重连尝试计数器。\n   * 只能在 `SCHEDULE` 事件之后，`RETRY` 事件之前调用，如果当前网络正常或者正在进行重连，调用该方法会抛异常。\n   */\n  ;\n\n  _proto.retry = function retry() {\n    var _internal = internal(this),\n        connection = _internal.connection;\n\n    if (!connection) {\n      throw new Error('no connection established');\n    }\n\n    if (connection.cannot('retry')) {\n      throw new Error(\"retrying not allowed when not disconnected. the connection is now \".concat(connection.current));\n    }\n\n    return connection.retry();\n  }\n  /**\n   * 暂停，使 SDK 进入离线状态。\n   * 你可以在网络断开、应用进入后台等时刻调用该方法让 SDK 进入离线状态，离线状态下不会尝试重连。\n   * 在浏览器中 SDK 会自动监听网络变化，因此无需手动调用该方法。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:OFFLINE\n   */\n  ;\n\n  _proto.pause = function pause() {\n    // 这个方法常常在网络断开、进入后台时被调用，此时 connection 可能没有建立或者已经 close。\n    // 因此不像 retry，这个方法应该尽可能 loose\n    var _internal2 = internal(this),\n        connection = _internal2.connection;\n\n    if (!connection) return;\n    if (connection.can('pause')) connection.pause();\n  }\n  /**\n   * 恢复在线状态。\n   * 你可以在网络恢复、应用回到前台等时刻调用该方法让 SDK 恢复在线状态，恢复在线状态后 SDK 会开始尝试重连。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:ONLINE\n   */\n  ;\n\n  _proto.resume = function resume() {\n    // 与 pause 一样，这个方法应该尽可能 loose\n    var _internal3 = internal(this),\n        connection = _internal3.connection;\n\n    if (!connection) return;\n    if (connection.can('resume')) connection.resume();\n  };\n\n  _proto._registerPending = function _registerPending(value) {\n    internal(this).pendingClients.add(value);\n  };\n\n  _proto._deregisterPending = function _deregisterPending(client) {\n    internal(this).pendingClients[\"delete\"](client);\n  };\n\n  _proto._register = function _register(client) {\n    internal(this).clients.add(client);\n  };\n\n  _proto._deregister = function _deregister(client) {\n    var _this = internal(this);\n\n    _this.clients[\"delete\"](client);\n\n    if (_this.clients.size + _this.pendingClients.size === 0) {\n      this._close();\n    }\n  };\n\n  _proto._dispatchCommand = function _dispatchCommand(command) {\n    return applyDispatcher(this._plugins.beforeCommandDispatch, [command, this]).then(function (shouldDispatch) {\n      // no plugin handled this command\n      if (shouldDispatch) return debug$6('[WARN] Unexpected message received: %O', trim(command));\n      return false;\n    });\n  };\n\n  return Realtime;\n}(EventEmitter); // For test purpose only\n\nvar polyfilledPromise = _Promise;\n\n// IMClient\nvar UNREAD_MESSAGES_COUNT_UPDATE = 'unreadmessagescountupdate';\nvar CLOSE = 'close';\nvar CONFLICT = 'conflict';\nvar CONVERSATION_INFO_UPDATED = 'conversationinfoupdated';\nvar UNHANDLED_MESSAGE = 'unhandledmessage'; // shared\n\nvar INVITED = 'invited';\nvar KICKED = 'kicked';\nvar MEMBERS_JOINED = 'membersjoined';\nvar MEMBERS_LEFT = 'membersleft';\nvar MEMBER_INFO_UPDATED = 'memberinfoupdated';\nvar BLOCKED = 'blocked';\nvar UNBLOCKED = 'unblocked';\nvar MEMBERS_BLOCKED = 'membersblocked';\nvar MEMBERS_UNBLOCKED = 'membersunblocked';\nvar MUTED = 'muted';\nvar UNMUTED = 'unmuted';\nvar MEMBERS_MUTED = 'membersmuted';\nvar MEMBERS_UNMUTED = 'membersunmuted';\nvar MESSAGE$1 = 'message';\nvar MESSAGE_RECALL = 'messagerecall';\nvar MESSAGE_UPDATE = 'messageupdate'; // Conversation\n\nvar LAST_DELIVERED_AT_UPDATE = 'lastdeliveredatupdate';\nvar LAST_READ_AT_UPDATE = 'lastreadatupdate';\nvar INFO_UPDATED = 'infoupdated';\n\nvar IMEvent = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  UNREAD_MESSAGES_COUNT_UPDATE: UNREAD_MESSAGES_COUNT_UPDATE,\n  CLOSE: CLOSE,\n  CONFLICT: CONFLICT,\n  CONVERSATION_INFO_UPDATED: CONVERSATION_INFO_UPDATED,\n  UNHANDLED_MESSAGE: UNHANDLED_MESSAGE,\n  INVITED: INVITED,\n  KICKED: KICKED,\n  MEMBERS_JOINED: MEMBERS_JOINED,\n  MEMBERS_LEFT: MEMBERS_LEFT,\n  MEMBER_INFO_UPDATED: MEMBER_INFO_UPDATED,\n  BLOCKED: BLOCKED,\n  UNBLOCKED: UNBLOCKED,\n  MEMBERS_BLOCKED: MEMBERS_BLOCKED,\n  MEMBERS_UNBLOCKED: MEMBERS_UNBLOCKED,\n  MUTED: MUTED,\n  UNMUTED: UNMUTED,\n  MEMBERS_MUTED: MEMBERS_MUTED,\n  MEMBERS_UNMUTED: MEMBERS_UNMUTED,\n  MESSAGE: MESSAGE$1,\n  MESSAGE_RECALL: MESSAGE_RECALL,\n  MESSAGE_UPDATE: MESSAGE_UPDATE,\n  LAST_DELIVERED_AT_UPDATE: LAST_DELIVERED_AT_UPDATE,\n  LAST_READ_AT_UPDATE: LAST_READ_AT_UPDATE,\n  INFO_UPDATED: INFO_UPDATED\n});\n\nvar _rMessageStatus;\n\nfunction ownKeys$3(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n/**\n * 消息状态枚举\n * @enum {Symbol}\n * @since 3.2.0\n * @memberof module:leancloud-realtime\n */\n\nvar MessageStatus = {\n  /** 初始状态、未知状态 */\n  NONE: _Symbol('none'),\n\n  /** 正在发送 */\n  SENDING: _Symbol('sending'),\n\n  /** 已发送 */\n  SENT: _Symbol('sent'),\n\n  /** 已送达 */\n  DELIVERED: _Symbol('delivered'),\n\n  /** 发送失败 */\n  FAILED: _Symbol('failed')\n};\n\n_Object$freeze(MessageStatus);\n\nvar rMessageStatus = (_rMessageStatus = {}, _defineProperty(_rMessageStatus, MessageStatus.NONE, true), _defineProperty(_rMessageStatus, MessageStatus.SENDING, true), _defineProperty(_rMessageStatus, MessageStatus.SENT, true), _defineProperty(_rMessageStatus, MessageStatus.DELIVERED, true), _defineProperty(_rMessageStatus, MessageStatus.READ, true), _defineProperty(_rMessageStatus, MessageStatus.FAILED, true), _rMessageStatus);\n\nvar Message = /*#__PURE__*/function () {\n  /**\n   * @implements AVMessage\n   * @param  {Object|String|ArrayBuffer} content 消息内容\n   */\n  function Message(content) {\n    _Object$assign(this, {\n      content: content\n    }, {\n      /**\n       * @type {String}\n       * @memberof Message#\n       */\n      id: uuid(),\n\n      /**\n       * 消息所在的 conversation id\n       * @memberof Message#\n       * @type {String?}\n       */\n      cid: null,\n\n      /**\n       * 消息发送时间\n       * @memberof Message#\n       * @type {Date}\n       */\n      timestamp: new Date(),\n\n      /**\n       * 消息发送者\n       * @memberof Message#\n       * @type {String}\n       */\n      from: undefined,\n\n      /**\n       * 消息提及的用户\n       * @since 4.0.0\n       * @memberof Message#\n       * @type {String[]}\n       */\n      mentionList: [],\n\n      /**\n       * 消息是否提及了所有人\n       * @since 4.0.0\n       * @memberof Message#\n       * @type {Boolean}\n       */\n      mentionedAll: false,\n      _mentioned: false\n    });\n\n    this._setStatus(MessageStatus.NONE);\n  }\n  /**\n   * 将当前消息的内容序列化为 JSON 对象\n   * @private\n   * @return {Object}\n   */\n\n\n  var _proto = Message.prototype;\n\n  _proto.getPayload = function getPayload() {\n    return this.content;\n  };\n\n  _proto._toJSON = function _toJSON() {\n    var id = this.id,\n        cid = this.cid,\n        from = this.from,\n        timestamp = this.timestamp,\n        deliveredAt = this.deliveredAt,\n        updatedAt = this.updatedAt,\n        mentionList = this.mentionList,\n        mentionedAll = this.mentionedAll,\n        mentioned = this.mentioned;\n    return {\n      id: id,\n      cid: cid,\n      from: from,\n      timestamp: timestamp,\n      deliveredAt: deliveredAt,\n      updatedAt: updatedAt,\n      mentionList: mentionList,\n      mentionedAll: mentionedAll,\n      mentioned: mentioned\n    };\n  }\n  /**\n   * 返回 JSON 格式的消息\n   * @return {Object} 返回值是一个 plain Object\n   */\n  ;\n\n  _proto.toJSON = function toJSON() {\n    return _objectSpread$3(_objectSpread$3({}, this._toJSON()), {}, {\n      data: this.content\n    });\n  }\n  /**\n   * 返回 JSON 格式的消息，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseMessage} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  ;\n\n  _proto.toFullJSON = function toFullJSON() {\n    var content = this.content,\n        id = this.id,\n        cid = this.cid,\n        from = this.from,\n        timestamp = this.timestamp,\n        deliveredAt = this.deliveredAt,\n        _updatedAt = this._updatedAt,\n        mentionList = this.mentionList,\n        mentionedAll = this.mentionedAll;\n    return {\n      data: content,\n      id: id,\n      cid: cid,\n      from: from,\n      timestamp: getTime(timestamp),\n      deliveredAt: getTime(deliveredAt),\n      updatedAt: getTime(_updatedAt),\n      mentionList: mentionList,\n      mentionedAll: mentionedAll\n    };\n  }\n  /**\n   * 消息状态，值为 {@link module:leancloud-realtime.MessageStatus} 之一\n   * @type {Symbol}\n   * @readonly\n   * @since 3.2.0\n   */\n  ;\n\n  _proto._setStatus = function _setStatus(status) {\n    if (!rMessageStatus[status]) {\n      throw new Error('Invalid message status');\n    }\n\n    this._status = status;\n  };\n\n  _proto._updateMentioned = function _updateMentioned(client) {\n    this._mentioned = this.from !== client && (this.mentionedAll || this.mentionList.indexOf(client) > -1);\n  }\n  /**\n   * 获取提及用户列表\n   * @since 4.0.0\n   * @return {String[]} 提及用户的 id 列表\n   */\n  ;\n\n  _proto.getMentionList = function getMentionList() {\n    return this.mentionList;\n  }\n  /**\n   * 设置提及用户列表\n   * @since 4.0.0\n   * @param {String[]} clients 提及用户的 id 列表\n   * @return {this} self\n   */\n  ;\n\n  _proto.setMentionList = function setMentionList(clients) {\n    this.mentionList = ensureArray(clients);\n    return this;\n  }\n  /**\n   * 设置是否提及所有人\n   * @since 4.0.0\n   * @param {Boolean} [value=true]\n   * @return {this} self\n   */\n  ;\n\n  _proto.mentionAll = function mentionAll() {\n    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.mentionedAll = Boolean(value);\n    return this;\n  }\n  /**\n   * 判断给定的内容是否是有效的 Message，\n   * 该方法始终返回 true\n   * @private\n   * @returns {Boolean}\n   * @implements AVMessage.validate\n   */\n  ;\n\n  Message.validate = function validate() {\n    return true;\n  }\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 如果子类提供了 message，返回该 message\n   * 如果没有提供，将 json 作为 content 实例化一个 Message\n   * @private\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {Message} message 子类提供的 message\n   * @return {Message}\n   * @implements AVMessage.parse\n   */\n  ;\n\n  Message.parse = function parse(json, message) {\n    return message || new this(json);\n  };\n\n  _createClass(Message, [{\n    key: \"status\",\n    get: function get() {\n      return this._status;\n    }\n  }, {\n    key: \"timestamp\",\n    get: function get() {\n      return this._timestamp;\n    },\n    set: function set(value) {\n      this._timestamp = decodeDate(value);\n    }\n    /**\n     * 消息送达时间\n     * @type {?Date}\n     */\n\n  }, {\n    key: \"deliveredAt\",\n    get: function get() {\n      return this._deliveredAt;\n    },\n    set: function set(value) {\n      this._deliveredAt = decodeDate(value);\n    }\n    /**\n     * 消息修改或撤回时间，可以通过比较其与消息的 timestamp 是否相等判断消息是否被修改过或撤回过。\n     * @type {Date}\n     * @since 3.5.0\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function get() {\n      return this._updatedAt || this.timestamp;\n    },\n    set: function set(value) {\n      this._updatedAt = decodeDate(value);\n    }\n    /**\n     * 当前用户是否在该消息中被提及\n     * @type {Boolean}\n     * @readonly\n     * @since 4.0.0\n     */\n\n  }, {\n    key: \"mentioned\",\n    get: function get() {\n      return this._mentioned;\n    }\n  }]);\n\n  return Message;\n}();\n\nvar messageType = function messageType(type) {\n  if (typeof type !== 'number') {\n    throw new TypeError(\"\".concat(type, \" is not a Number\"));\n  }\n\n  return function (target) {\n    target.TYPE = type;\n\n    target.validate = function (json) {\n      return json._lctype === type;\n    };\n\n    target.prototype._getType = function () {\n      return {\n        _lctype: type\n      };\n    };\n  };\n}; // documented in ../plugin-im.js\n\nvar messageField = function messageField(fields) {\n  if (typeof fields !== 'string') {\n    if (!_Array$isArray(fields)) {\n      throw new TypeError(\"\".concat(fields, \" is not an Array\"));\n    } else if (fields.some(function (value) {\n      return typeof value !== 'string';\n    })) {\n      throw new TypeError('fields contains non-string typed member');\n    }\n  }\n\n  return function (target) {\n    // IE10 Hack:\n    // static properties in IE10 will not be inherited from super\n    // search for parse method and assign it manually\n    var originalCustomFields = isIE10 ? getStaticProperty(target, '_customFields') : target._customFields;\n    originalCustomFields = _Array$isArray(originalCustomFields) ? originalCustomFields : [];\n    target._customFields = originalCustomFields.concat(fields);\n  };\n}; // IE10 Hack:\n// static properties in IE10 will not be inherited from super\n// search for parse method and assign it manually\n\nvar IE10Compatible = function IE10Compatible(target) {\n  if (isIE10) {\n    target.parse = getStaticProperty(target, 'parse');\n  }\n};\n\nvar _dec, _class$1;\n\nfunction ownKeys$4(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$4(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$4(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar // jsdoc-ignore-end\n\n/**\n * 所有内置的富媒体消息均继承自本类\n * @extends Message\n */\nTypedMessage = (_dec = messageField(['_lctext', '_lcattrs']), _dec(_class$1 = /*#__PURE__*/function (_Message) {\n  _inheritsLoose(TypedMessage, _Message);\n\n  function TypedMessage() {\n    return _Message.apply(this, arguments) || this;\n  }\n\n  var _proto = TypedMessage.prototype;\n\n  /**\n   * @param {String} text\n   * @return {this} self\n   */\n  _proto.setText = function setText(text) {\n    this._lctext = text;\n    return this;\n  }\n  /**\n   * @return {String}\n   */\n  ;\n\n  _proto.getText = function getText() {\n    return this._lctext;\n  }\n  /**\n   * @param {Object} attributes\n   * @return {this} self\n   */\n  ;\n\n  _proto.setAttributes = function setAttributes(attributes) {\n    this._lcattrs = attributes;\n    return this;\n  }\n  /**\n   * @return {Object}\n   */\n  ;\n\n  _proto.getAttributes = function getAttributes() {\n    return this._lcattrs;\n  };\n\n  _proto._getCustomFields = function _getCustomFields() {\n    var _this = this;\n\n    var fields = _Array$isArray(this.constructor._customFields) ? this.constructor._customFields : [];\n    return fields.reduce(function (result, field) {\n      if (typeof field !== 'string') return result;\n      result[field] = _this[field]; // eslint-disable-line no-param-reassign\n\n      return result;\n    }, {});\n  }\n  /* eslint-disable class-methods-use-this */\n  ;\n\n  _proto._getType = function _getType() {\n    throw new Error('not implemented');\n  }\n  /* eslint-enable class-methods-use-this */\n  ;\n\n  _proto.getPayload = function getPayload() {\n    return compact(_objectSpread$4(_objectSpread$4({\n      _lctext: this.getText(),\n      _lcattrs: this.getAttributes()\n    }, this._getCustomFields()), this._getType()));\n  };\n\n  _proto.toJSON = function toJSON() {\n    var type = this.type,\n        text = this.text,\n        attributes = this.attributes,\n        summary = this.summary;\n    return _objectSpread$4(_objectSpread$4({}, _Message.prototype._toJSON.call(this)), {}, {\n      type: type,\n      text: text,\n      attributes: attributes,\n      summary: summary\n    });\n  };\n\n  _proto.toFullJSON = function toFullJSON() {\n    return _objectSpread$4(_objectSpread$4({}, _Message.prototype.toFullJSON.call(this)), {}, {\n      data: this.getPayload()\n    });\n  }\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 为给定的 message 设置 text 与 attributes 属性，返回该 message\n   * 如果子类没有提供 message，new this()\n   * @protected\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {TypedMessage} message 子类提供的 message\n   * @return {TypedMessage}\n   * @implements AVMessage.parse\n   */\n  ;\n\n  TypedMessage.parse = function parse(json) {\n    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new this();\n    message.content = json; // eslint-disable-line no-param-reassign\n\n    var customFields = isIE10 ? getStaticProperty(message.constructor, '_customFields') : message.constructor._customFields;\n    var fields = _Array$isArray(customFields) ? customFields : [];\n    fields = fields.reduce(function (result, field) {\n      if (typeof field !== 'string') return result;\n      result[field] = json[field]; // eslint-disable-line no-param-reassign\n\n      return result;\n    }, {});\n\n    _Object$assign(message, fields);\n\n    return _Message.parse.call(this, json, message);\n  };\n\n  _createClass(TypedMessage, [{\n    key: \"type\",\n\n    /**\n     * @type {Number}\n     * @readonly\n     */\n    get: function get() {\n      return this.constructor.TYPE;\n    }\n    /** @type {String} */\n\n  }, {\n    key: \"text\",\n    set: function set(text) {\n      return this.setText(text);\n    },\n    get: function get() {\n      return this.getText();\n    }\n    /** @type {Object} */\n\n  }, {\n    key: \"attributes\",\n    set: function set(attributes) {\n      return this.setAttributes(attributes);\n    },\n    get: function get() {\n      return this.getAttributes();\n    }\n    /**\n     * 在客户端需要以文本形式展示该消息时显示的文案，\n     * 如 <code>[红包] 新春快乐</code>。\n     * 默认值为消息的 text。\n     * @type {String}\n     * @readonly\n     */\n\n  }, {\n    key: \"summary\",\n    get: function get() {\n      return this.text;\n    }\n  }]);\n\n  return TypedMessage;\n}(Message)) || _class$1);\n\nvar _dec$1, _class$2;\n\nvar // jsdoc-ignore-end\n\n/**\n * 已撤回类型消息，当消息被撤回时，SDK 会使用该类型的消息替代原始消息\n * @extends TypedMessage\n */\nRecalledMessage = (_dec$1 = messageType(-127), _dec$1(_class$2 = IE10Compatible(_class$2 = /*#__PURE__*/function (_TypedMessage) {\n  _inheritsLoose(RecalledMessage, _TypedMessage);\n\n  function RecalledMessage() {\n    return _TypedMessage.apply(this, arguments) || this;\n  }\n\n  _createClass(RecalledMessage, [{\n    key: \"summary\",\n\n    /**\n     * 在客户端需要以文本形式展示该消息时显示的文案，值为 <code>[该消息已撤回]</code>\n     * @type {String}\n     * @readonly\n     */\n    // eslint-disable-next-line class-methods-use-this\n    get: function get() {\n      return '[该消息已撤回]';\n    }\n  }]);\n\n  return RecalledMessage;\n}(TypedMessage)) || _class$2) || _class$2);\n\nfunction ownKeys$5(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$5(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$5(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar debug$7 = d('LC:Conversation');\n\nvar serializeMessage = function serializeMessage(message) {\n  var content = message.getPayload();\n  var msg;\n  var binaryMsg;\n\n  if (content instanceof ArrayBuffer) {\n    binaryMsg = content;\n  } else if (typeof content !== 'string') {\n    msg = _JSON$stringify(content);\n  } else {\n    msg = content;\n  }\n\n  return {\n    msg: msg,\n    binaryMsg: binaryMsg\n  };\n};\n\nvar _LogsCommand$QueryDir = LogsCommand.QueryDirection,\n    NEW = _LogsCommand$QueryDir.NEW,\n    OLD = _LogsCommand$QueryDir.OLD;\n/**\n * 历史消息查询方向枚举\n * @enum {Number}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\n\nvar MessageQueryDirection = {\n  /** 从后向前 */\n  NEW_TO_OLD: OLD,\n\n  /** 从前向后 */\n  OLD_TO_NEW: NEW\n};\n\n_Object$freeze(MessageQueryDirection);\n\nvar ConversationBase = /*#__PURE__*/function (_EventEmitter) {\n  _inheritsLoose(ConversationBase, _EventEmitter);\n\n  /**\n   * @extends EventEmitter\n   * @private\n   * @abstract\n   */\n  function ConversationBase(_ref, client) {\n    var _this;\n\n    var id = _ref.id,\n        lastMessageAt = _ref.lastMessageAt,\n        lastMessage = _ref.lastMessage,\n        lastDeliveredAt = _ref.lastDeliveredAt,\n        lastReadAt = _ref.lastReadAt,\n        _ref$unreadMessagesCo = _ref.unreadMessagesCount,\n        unreadMessagesCount = _ref$unreadMessagesCo === void 0 ? 0 : _ref$unreadMessagesCo,\n        _ref$members = _ref.members,\n        members = _ref$members === void 0 ? [] : _ref$members,\n        _ref$mentioned = _ref.mentioned,\n        mentioned = _ref$mentioned === void 0 ? false : _ref$mentioned,\n        properties = _objectWithoutProperties(_ref, [\"id\", \"lastMessageAt\", \"lastMessage\", \"lastDeliveredAt\", \"lastReadAt\", \"unreadMessagesCount\", \"members\", \"mentioned\"]);\n\n    _this = _EventEmitter.call(this) || this;\n\n    _Object$assign(_assertThisInitialized(_this), _objectSpread$5({\n      /**\n       * 对话 id，对应 _Conversation 表中的 objectId\n       * @memberof ConversationBase#\n       * @type {String}\n       */\n      id: id,\n\n      /**\n       * 最后一条消息时间\n       * @memberof ConversationBase#\n       * @type {?Date}\n       */\n      lastMessageAt: lastMessageAt,\n\n      /**\n       * 最后一条消息\n       * @memberof ConversationBase#\n       * @type {?Message}\n       */\n      lastMessage: lastMessage,\n\n      /**\n       * 参与该对话的用户列表\n       * @memberof ConversationBase#\n       * @type {String[]}\n       */\n      members: members\n    }, properties));\n\n    _this.members = _Array$from(new _Set(_this.members));\n\n    _Object$assign(internal(_assertThisInitialized(_this)), {\n      messagesWaitingForReceipt: {},\n      lastDeliveredAt: lastDeliveredAt,\n      lastReadAt: lastReadAt,\n      unreadMessagesCount: unreadMessagesCount,\n      mentioned: mentioned\n    });\n\n    _this._client = client;\n\n    if (debug$7.enabled) {\n      values(IMEvent).forEach(function (event) {\n        return _this.on(event, function () {\n          for (var _len = arguments.length, payload = new Array(_len), _key = 0; _key < _len; _key++) {\n            payload[_key] = arguments[_key];\n          }\n\n          return _this._debug(\"\".concat(event, \" event emitted. %o\"), payload);\n        });\n      });\n    } // onConversationCreate hook\n\n\n    applyDecorators(_this._client._plugins.onConversationCreate, _assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * 当前用户是否在该对话的未读消息中被提及\n   * @type {Boolean}\n   * @since 4.0.0\n   */\n\n\n  var _proto = ConversationBase.prototype;\n\n  _proto._setUnreadMessagesMentioned = function _setUnreadMessagesMentioned(value) {\n    internal(this).unreadMessagesMentioned = Boolean(value);\n  };\n\n  _proto._setLastDeliveredAt = function _setLastDeliveredAt(value) {\n    var date = decodeDate(value);\n\n    if (!(date < internal(this).lastDeliveredAt)) {\n      internal(this).lastDeliveredAt = date;\n      /**\n       * 最后消息送达时间更新\n       * @event ConversationBase#LAST_DELIVERED_AT_UPDATE\n       * @since 3.4.0\n       */\n\n      this.emit(LAST_DELIVERED_AT_UPDATE);\n    }\n  }\n  /**\n   * 最后消息被阅读时间，常用来实现发送消息的「已读」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n   * @type {?Date}\n   * @since 3.4.0\n   */\n  ;\n\n  _proto._setLastReadAt = function _setLastReadAt(value) {\n    var date = decodeDate(value);\n\n    if (!(date < internal(this).lastReadAt)) {\n      internal(this).lastReadAt = date;\n      /**\n       * 最后消息被阅读时间更新\n       * @event ConversationBase#LAST_READ_AT_UPDATE\n       * @since 3.4.0\n       */\n\n      this.emit(LAST_READ_AT_UPDATE);\n    }\n  }\n  /**\n   * 返回 JSON 格式的对话，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseConversation} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  ;\n\n  _proto.toFullJSON = function toFullJSON() {\n    var id = this.id,\n        members = this.members,\n        lastMessageAt = this.lastMessageAt,\n        lastDeliveredAt = this.lastDeliveredAt,\n        lastReadAt = this.lastReadAt,\n        lastMessage = this.lastMessage,\n        unreadMessagesCount = this.unreadMessagesCount;\n    return {\n      id: id,\n      members: members,\n      lastMessageAt: getTime(lastMessageAt),\n      lastDeliveredAt: getTime(lastDeliveredAt),\n      lastReadAt: getTime(lastReadAt),\n      lastMessage: lastMessage ? lastMessage.toFullJSON() : undefined,\n      unreadMessagesCount: unreadMessagesCount\n    };\n  }\n  /**\n   * 返回 JSON 格式的对话\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  ;\n\n  _proto.toJSON = function toJSON() {\n    var id = this.id,\n        members = this.members,\n        lastMessageAt = this.lastMessageAt,\n        lastDeliveredAt = this.lastDeliveredAt,\n        lastReadAt = this.lastReadAt,\n        lastMessage = this.lastMessage,\n        unreadMessagesCount = this.unreadMessagesCount,\n        unreadMessagesMentioned = this.unreadMessagesMentioned;\n    return {\n      id: id,\n      members: members,\n      lastMessageAt: lastMessageAt,\n      lastDeliveredAt: lastDeliveredAt,\n      lastReadAt: lastReadAt,\n      lastMessage: lastMessage ? lastMessage.toJSON() : undefined,\n      unreadMessagesCount: unreadMessagesCount,\n      unreadMessagesMentioned: unreadMessagesMentioned\n    };\n  };\n\n  _proto._debug = function _debug() {\n    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      params[_key2] = arguments[_key2];\n    }\n\n    debug$7.apply(void 0, params.concat([\"[\".concat(this.id, \"]\")]));\n  };\n\n  _proto._send = function _send(command) {\n    var _this$_client;\n\n    /* eslint-disable no-param-reassign */\n    if (command.cmd === null) {\n      command.cmd = 'conv';\n    }\n\n    if (command.cmd === 'conv' && command.convMessage === null) {\n      command.convMessage = new ConvCommand();\n    }\n\n    if (command.convMessage && command.convMessage.cid === null) {\n      command.convMessage.cid = this.id;\n    }\n    /* eslint-enable no-param-reassign */\n\n\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return (_this$_client = this._client)._send.apply(_this$_client, [command].concat(args));\n  }\n  /**\n   * 发送消息\n   * @param  {Message} message 消息，Message 及其子类的实例\n   * @param {Object} [options] since v3.3.0，发送选项\n   * @param {Boolean} [options.transient] since v3.3.1，是否作为暂态消息发送\n   * @param {Boolean} [options.receipt] 是否需要回执，仅在普通对话中有效\n   * @param {Boolean} [options.will] since v3.4.0，是否指定该消息作为「掉线消息」发送，\n   * 「掉线消息」会延迟到当前用户掉线后发送，常用来实现「下线通知」功能\n   * @param {MessagePriority} [options.priority] 消息优先级，仅在暂态对话中有效，\n   * see: {@link module:leancloud-realtime.MessagePriority MessagePriority}\n   * @param {Object} [options.pushData] 消息对应的离线推送内容，如果消息接收方不在线，会推送指定的内容。其结构说明参见: {@link https://url.leanapp.cn/pushData 推送消息内容}\n   * @return {Promise.<Message>} 发送的消息\n   */\n  ;\n\n  _proto.send =\n  /*#__PURE__*/\n  function () {\n    var _send2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message, options) {\n      var _message$constructor$, _transient, receipt, priority, pushData, will, _serializeMessage, msg, binaryMsg, command, resCommand, _resCommand$ackMessag, uid, t, code, reason, appCode;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this._debug(message, 'send');\n\n              if (message instanceof Message) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new TypeError(\"\".concat(message, \" is not a Message\"));\n\n            case 3:\n              _message$constructor$ = _objectSpread$5(_objectSpread$5(_objectSpread$5({}, message.constructor.sendOptions), typeof message.constructor.getSendOptions === 'function' ? message.constructor.getSendOptions(message) : {}), options), _transient = _message$constructor$[\"transient\"], receipt = _message$constructor$.receipt, priority = _message$constructor$.priority, pushData = _message$constructor$.pushData, will = _message$constructor$.will;\n\n              if (receipt) {\n                if (this[\"transient\"]) {\n                  console.warn('receipt option is ignored as the conversation is transient.');\n                } else if (_transient) {\n                  console.warn('receipt option is ignored as the message is sent transiently.');\n                } else if (this.members.length > 2) {\n                  console.warn('receipt option is recommended to be used in one-on-one conversation.'); // eslint-disable-line max-len\n                }\n              }\n\n              if (priority && !this[\"transient\"]) {\n                console.warn('priority option is ignored as the conversation is not transient.');\n              }\n\n              _Object$assign(message, {\n                cid: this.id,\n                from: this._client.id\n              });\n\n              message._setStatus(MessageStatus.SENDING);\n\n              _serializeMessage = serializeMessage(message), msg = _serializeMessage.msg, binaryMsg = _serializeMessage.binaryMsg;\n              command = new GenericCommand({\n                cmd: 'direct',\n                directMessage: new DirectCommand({\n                  msg: msg,\n                  binaryMsg: binaryMsg,\n                  cid: this.id,\n                  r: receipt,\n                  \"transient\": _transient,\n                  dt: message.id,\n                  pushData: _JSON$stringify(pushData),\n                  will: will,\n                  mentionPids: message.mentionList,\n                  mentionAll: message.mentionedAll\n                }),\n                priority: priority\n              });\n              _context.prev = 10;\n              _context.next = 13;\n              return this._send(command);\n\n            case 13:\n              resCommand = _context.sent;\n              _resCommand$ackMessag = resCommand.ackMessage, uid = _resCommand$ackMessag.uid, t = _resCommand$ackMessag.t, code = _resCommand$ackMessag.code, reason = _resCommand$ackMessag.reason, appCode = _resCommand$ackMessag.appCode;\n\n              if (!(code !== null)) {\n                _context.next = 17;\n                break;\n              }\n\n              throw createError({\n                code: code,\n                reason: reason,\n                appCode: appCode\n              });\n\n            case 17:\n              _Object$assign(message, {\n                id: uid,\n                timestamp: t\n              });\n\n              if (!_transient) {\n                this.lastMessage = message;\n                this.lastMessageAt = message.timestamp;\n              }\n\n              message._setStatus(MessageStatus.SENT);\n\n              if (receipt) {\n                internal(this).messagesWaitingForReceipt[message.id] = message;\n              }\n\n              return _context.abrupt(\"return\", message);\n\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](10);\n\n              message._setStatus(MessageStatus.FAILED);\n\n              throw _context.t0;\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[10, 24]]);\n    }));\n\n    function send(_x, _x2) {\n      return _send2.apply(this, arguments);\n    }\n\n    return send;\n  }();\n\n  _proto._update = /*#__PURE__*/function () {\n    var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message, newMessage, recall) {\n      var msg, binaryMsg, content, id, cid, timestamp, from, _status;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              this._debug('patch %O %O %O', message, newMessage, recall);\n\n              if (!(message instanceof Message)) {\n                _context2.next = 8;\n                break;\n              }\n\n              if (!(message.from !== this._client.id)) {\n                _context2.next = 4;\n                break;\n              }\n\n              throw new Error('Updating message from others is not allowed');\n\n            case 4:\n              if (!(message.status !== MessageStatus.SENT && message.status !== MessageStatus.DELIVERED)) {\n                _context2.next = 6;\n                break;\n              }\n\n              throw new Error('Message is not sent');\n\n            case 6:\n              _context2.next = 10;\n              break;\n\n            case 8:\n              if (message.id && message.timestamp) {\n                _context2.next = 10;\n                break;\n              }\n\n              throw new TypeError(\"\".concat(message, \" is not a Message\"));\n\n            case 10:\n              if (!recall) {\n                content = serializeMessage(newMessage);\n                msg = content.msg;\n                binaryMsg = content.binaryMsg;\n              }\n\n              _context2.next = 13;\n              return this._send(new GenericCommand({\n                cmd: CommandType.patch,\n                op: OpType.modify,\n                patchMessage: new PatchCommand({\n                  patches: [new PatchItem({\n                    cid: this.id,\n                    mid: message.id,\n                    timestamp: Number(message.timestamp),\n                    recall: recall,\n                    data: msg,\n                    binaryMsg: binaryMsg,\n                    mentionPids: newMessage.mentionList,\n                    mentionAll: newMessage.mentionedAll\n                  })],\n                  lastPatchTime: this._client._lastPatchTime\n                })\n              }));\n\n            case 13:\n              id = message.id, cid = message.cid, timestamp = message.timestamp, from = message.from, _status = message._status;\n\n              _Object$assign(newMessage, {\n                id: id,\n                cid: cid,\n                timestamp: timestamp,\n                from: from,\n                _status: _status\n              });\n\n              if (this.lastMessage.id === newMessage.id) {\n                this.lastMessage = newMessage;\n              }\n\n              return _context2.abrupt(\"return\", newMessage);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function _update(_x3, _x4, _x5) {\n      return _update2.apply(this, arguments);\n    }\n\n    return _update;\n  }()\n  /**\n   * 获取对话人数，或暂态对话的在线人数\n   * @return {Promise.<Number>}\n   */\n  ;\n\n  _proto.count =\n  /*#__PURE__*/\n  function () {\n    var _count = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var resCommand;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this._debug('count');\n\n              _context3.next = 3;\n              return this._send(new GenericCommand({\n                op: 'count'\n              }));\n\n            case 3:\n              resCommand = _context3.sent;\n              return _context3.abrupt(\"return\", resCommand.convMessage.count);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function count() {\n      return _count.apply(this, arguments);\n    }\n\n    return count;\n  }()\n  /**\n   * 应用增加成员的操作，产生副作用\n   * @param {string[]} members\n   * @abstract\n   * @private\n   */\n  ;\n\n  _proto._addMembers = function _addMembers() {}\n  /**\n   * 应用减少成员的操作，产生副作用\n   * @param {string[]} members\n   * @abstract\n   * @private\n   */\n  ;\n\n  _proto._removeMembers = function _removeMembers() {}\n  /**\n   * 修改已发送的消息\n   * @param {AVMessage} message 要修改的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @param {AVMessage} newMessage 新的消息\n   * @return {Promise.<AVMessage>} 更新后的消息\n   */\n  ;\n\n  _proto.update =\n  /*#__PURE__*/\n  function () {\n    var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(message, newMessage) {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (newMessage instanceof Message) {\n                _context4.next = 2;\n                break;\n              }\n\n              throw new TypeError(\"\".concat(newMessage, \" is not a Message\"));\n\n            case 2:\n              return _context4.abrupt(\"return\", this._update(message, newMessage, false));\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function update(_x6, _x7) {\n      return _update3.apply(this, arguments);\n    }\n\n    return update;\n  }()\n  /**\n   * 撤回已发送的消息\n   * @param {AVMessage} message 要撤回的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @return {Promise.<RecalledMessage>} 一条已撤回的消息\n   */\n  ;\n\n  _proto.recall =\n  /*#__PURE__*/\n  function () {\n    var _recall = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(message) {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this._update(message, new RecalledMessage(), true));\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function recall(_x8) {\n      return _recall.apply(this, arguments);\n    }\n\n    return recall;\n  }()\n  /**\n   * 查询消息记录\n   * 如果仅需实现消息向前记录翻页查询需求，建议使用 {@link Conversation#createMessagesIterator}。\n   * 不论何种方向，获得的消息都是按照时间升序排列的。\n   * startClosed 与 endClosed 用于指定查询区间的开闭。\n   *\n   * @param  {Object} [options]\n   * @param  {Number} [options.limit] 限制查询结果的数量，目前服务端默认为 20\n   * @param  {Number}   [options.type] 指定查询的富媒体消息类型，不指定则查询所有消息。\n   * @param  {MessageQueryDirection} [options.direction] 查询的方向。\n   * 在不指定的情况下如果 startTime 大于 endTime，则为从新到旧查询，可以实现加载聊天记录等场景。\n   * 如果 startTime 小于 endTime，则为从旧到新查询，可以实现弹幕等场景。\n   * @param  {Date}   [options.startTime] 从该时间开始查询，不传则从当前时间开始查询\n   * @param  {String} [options.startMessageId] 从该消息之前开始查询，需要与 startTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.startClosed] 指定查询范围是否包括开始的时间点，默认不包括\n   * @param  {Date}   [options.endTime] 查询到该时间为止，不传则查询最早消息为止\n   * @param  {String} [options.endMessageId] 查询到该消息为止，需要与 endTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.endClosed] 指定查询范围是否包括结束的时间点，默认不包括\n   *\n   * @param  {Date}   [options.beforeTime] DEPRECATED: 使用 startTime 代替。限制查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] DEPRECATED: 使用 startMessageId 代替。\n   * 限制查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Date}   [options.afterTime] DEPRECATED: 使用 endTime 代替。限制查询结果为大于该时间之前的消息\n   * @param  {String} [options.afterMessageId] DEPRECATED: 使用 endMessageId 代替。\n   * 限制查询结果为该消息之后的消息，需要与 afterTime 同时使用，为防止某时刻有重复消息\n   * @return {Promise.<Message[]>} 消息列表\n   */\n  ;\n\n  _proto.queryMessages =\n  /*#__PURE__*/\n  function () {\n    var _queryMessages = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var _this2 = this;\n\n      var options,\n          beforeTime,\n          beforeMessageId,\n          afterTime,\n          afterMessageId,\n          limit,\n          direction,\n          type,\n          startTime,\n          startMessageId,\n          startClosed,\n          endTime,\n          endMessageId,\n          endClosed,\n          conditions,\n          resCommand,\n          _args7 = arguments;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              options = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n\n              this._debug('query messages %O', options);\n\n              beforeTime = options.beforeTime, beforeMessageId = options.beforeMessageId, afterTime = options.afterTime, afterMessageId = options.afterMessageId, limit = options.limit, direction = options.direction, type = options.type, startTime = options.startTime, startMessageId = options.startMessageId, startClosed = options.startClosed, endTime = options.endTime, endMessageId = options.endMessageId, endClosed = options.endClosed;\n\n              if (!(beforeMessageId || beforeTime || afterMessageId || afterTime)) {\n                _context7.next = 6;\n                break;\n              }\n\n              console.warn('DEPRECATION: queryMessages options beforeTime, beforeMessageId, afterTime and afterMessageId are deprecated in favor of startTime, startMessageId, endTime and endMessageId.');\n              return _context7.abrupt(\"return\", this.queryMessages({\n                startTime: beforeTime,\n                startMessageId: beforeMessageId,\n                endTime: afterTime,\n                endMessageId: afterMessageId,\n                limit: limit\n              }));\n\n            case 6:\n              if (!(startMessageId && !startTime)) {\n                _context7.next = 8;\n                break;\n              }\n\n              throw new Error('query option startMessageId must be used with option startTime');\n\n            case 8:\n              if (!(endMessageId && !endTime)) {\n                _context7.next = 10;\n                break;\n              }\n\n              throw new Error('query option endMessageId must be used with option endTime');\n\n            case 10:\n              conditions = {\n                t: startTime,\n                mid: startMessageId,\n                tIncluded: startClosed,\n                tt: endTime,\n                tmid: endMessageId,\n                ttIncluded: endClosed,\n                l: limit,\n                lctype: type\n              };\n\n              if (conditions.t instanceof Date) {\n                conditions.t = conditions.t.getTime();\n              }\n\n              if (conditions.tt instanceof Date) {\n                conditions.tt = conditions.tt.getTime();\n              }\n\n              if (direction !== undefined) {\n                conditions.direction = direction;\n              } else if (conditions.tt > conditions.t) {\n                conditions.direction = MessageQueryDirection.OLD_TO_NEW;\n              }\n\n              _context7.next = 16;\n              return this._send(new GenericCommand({\n                cmd: 'logs',\n                logsMessage: new LogsCommand(_Object$assign(conditions, {\n                  cid: this.id\n                }))\n              }));\n\n            case 16:\n              resCommand = _context7.sent;\n              return _context7.abrupt(\"return\", _Promise.all(resCommand.logsMessage.logs.map( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref2) {\n                  var msgId, timestamp, patchTimestamp, from, ackAt, readAt, data, mentionAll, mentionPids, bin, messageData, message, status;\n                  return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n                    while (1) {\n                      switch (_context6.prev = _context6.next) {\n                        case 0:\n                          msgId = _ref2.msgId, timestamp = _ref2.timestamp, patchTimestamp = _ref2.patchTimestamp, from = _ref2.from, ackAt = _ref2.ackAt, readAt = _ref2.readAt, data = _ref2.data, mentionAll = _ref2.mentionAll, mentionPids = _ref2.mentionPids, bin = _ref2.bin;\n                          messageData = {\n                            data: data,\n                            bin: bin,\n                            id: msgId,\n                            cid: _this2.id,\n                            timestamp: timestamp,\n                            from: from,\n                            deliveredAt: ackAt,\n                            updatedAt: patchTimestamp,\n                            mentionList: mentionPids,\n                            mentionedAll: mentionAll\n                          };\n                          _context6.next = 4;\n                          return _this2._client.parseMessage(messageData);\n\n                        case 4:\n                          message = _context6.sent;\n                          status = MessageStatus.SENT;\n\n                          if (_this2.members.length === 2) {\n                            if (ackAt) status = MessageStatus.DELIVERED;\n                            if (ackAt) _this2._setLastDeliveredAt(ackAt);\n                            if (readAt) _this2._setLastReadAt(readAt);\n                          }\n\n                          message._setStatus(status);\n\n                          return _context6.abrupt(\"return\", message);\n\n                        case 9:\n                        case \"end\":\n                          return _context6.stop();\n                      }\n                    }\n                  }, _callee6);\n                }));\n\n                return function (_x9) {\n                  return _ref3.apply(this, arguments);\n                };\n              }())));\n\n            case 18:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function queryMessages() {\n      return _queryMessages.apply(this, arguments);\n    }\n\n    return queryMessages;\n  }()\n  /**\n   * 获取消息翻页迭代器\n   * @param  {Object} [options]\n   * @param  {Date}   [options.beforeTime] 限制起始查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] 限制起始查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Number} [options.limit] 限制每页查询结果的数量，目前服务端默认为 20\n   * @return {AsyncIterater.<Promise.<IteratorResult<Message[]>>>} [AsyncIterator]{@link https://github.com/tc39/proposal-async-iteration}，调用其 next 方法返回获取下一页消息的 Promise\n   * @example\n   * var messageIterator = conversation.createMessagesIterator({ limit: 10 });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message1, ..., message10],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message11, ..., message20],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // No more messages\n   *   // result: { value: [], done: true }\n   * });\n   */\n  ;\n\n  _proto.createMessagesIterator = function createMessagesIterator() {\n    var _this3 = this;\n\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        beforeTime = _ref4.beforeTime,\n        beforeMessageId = _ref4.beforeMessageId,\n        limit = _ref4.limit;\n\n    var promise;\n    return {\n      next: function next() {\n        if (promise === undefined) {\n          // first call\n          promise = _this3.queryMessages({\n            limit: limit,\n            startTime: beforeTime,\n            startMessageId: beforeMessageId\n          });\n        } else {\n          promise = promise.then(function (prevMessages) {\n            if (prevMessages.length === 0 || prevMessages.length < limit) {\n              // no more messages\n              return [];\n            }\n\n            return _this3.queryMessages({\n              startTime: prevMessages[0].timestamp,\n              startMessageId: prevMessages[0].id,\n              limit: limit\n            });\n          });\n        }\n\n        return promise.then(function (value) {\n          return {\n            value: _Array$from(value),\n            done: value.length === 0 || value.length < limit\n          };\n        });\n      }\n    };\n  }\n  /**\n   * 将该会话标记为已读\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.read =\n  /*#__PURE__*/\n  function () {\n    var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var client;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              this.unreadMessagesCount = 0;\n\n              this._setUnreadMessagesMentioned(false); // 跳过暂态会话\n\n\n              if (!this[\"transient\"]) {\n                _context8.next = 4;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", this);\n\n            case 4:\n              client = this._client;\n\n              if (!internal(client).readConversationsBuffer) {\n                internal(client).readConversationsBuffer = new _Set();\n              }\n\n              internal(client).readConversationsBuffer.add(this);\n\n              client._doSendRead();\n\n              return _context8.abrupt(\"return\", this);\n\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function read() {\n      return _read.apply(this, arguments);\n    }\n\n    return read;\n  }();\n\n  _proto._handleReceipt = function _handleReceipt(_ref5) {\n    var messageId = _ref5.messageId,\n        timestamp = _ref5.timestamp,\n        read = _ref5.read;\n\n    if (read) {\n      this._setLastReadAt(timestamp);\n    } else {\n      this._setLastDeliveredAt(timestamp);\n    }\n\n    var _internal = internal(this),\n        messagesWaitingForReceipt = _internal.messagesWaitingForReceipt;\n\n    var message = messagesWaitingForReceipt[messageId];\n    if (!message) return;\n\n    message._setStatus(MessageStatus.DELIVERED);\n\n    message.deliveredAt = timestamp;\n    delete messagesWaitingForReceipt[messageId];\n  }\n  /**\n   * 更新对话的最新回执时间戳（lastDeliveredAt、lastReadAt）\n   * @since 3.4.0\n   * @return {Promise.<this>} this\n   */\n  ;\n\n  _proto.fetchReceiptTimestamps =\n  /*#__PURE__*/\n  function () {\n    var _fetchReceiptTimestamps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var _yield$this$_send, _yield$this$_send$con, maxReadTimestamp, maxAckTimestamp;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._send(new GenericCommand({\n                op: 'max_read'\n              }));\n\n            case 2:\n              _yield$this$_send = _context9.sent;\n              _yield$this$_send$con = _yield$this$_send.convMessage;\n              maxReadTimestamp = _yield$this$_send$con.maxReadTimestamp;\n              maxAckTimestamp = _yield$this$_send$con.maxAckTimestamp;\n\n              this._setLastDeliveredAt(maxAckTimestamp);\n\n              this._setLastReadAt(maxReadTimestamp);\n\n              return _context9.abrupt(\"return\", this);\n\n            case 9:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function fetchReceiptTimestamps() {\n      return _fetchReceiptTimestamps.apply(this, arguments);\n    }\n\n    return fetchReceiptTimestamps;\n  }();\n\n  _proto._fetchAllReceiptTimestamps = function _fetchAllReceiptTimestamps() {\n    var convMessage = new ConvCommand({\n      queryAllMembers: true\n    });\n    return this._send(new GenericCommand({\n      op: 'max_read',\n      convMessage: convMessage\n    })).then(function (_ref6) {\n      var maxReadTuples = _ref6.convMessage.maxReadTuples;\n      return maxReadTuples.filter(function (maxReadTuple) {\n        return maxReadTuple.maxAckTimestamp || maxReadTuple.maxReadTimestamp;\n      }).map(function (_ref7) {\n        var pid = _ref7.pid,\n            maxAckTimestamp = _ref7.maxAckTimestamp,\n            maxReadTimestamp = _ref7.maxReadTimestamp;\n        return {\n          pid: pid,\n          lastDeliveredAt: decodeDate(maxAckTimestamp),\n          lastReadAt: decodeDate(maxReadTimestamp)\n        };\n      });\n    });\n  };\n\n  _createClass(ConversationBase, [{\n    key: \"unreadMessagesMentioned\",\n    get: function get() {\n      return internal(this).unreadMessagesMentioned;\n    }\n  }, {\n    key: \"unreadMessagesCount\",\n    set: function set(value) {\n      if (value !== this.unreadMessagesCount) {\n        internal(this).unreadMessagesCount = value;\n\n        this._client.emit(UNREAD_MESSAGES_COUNT_UPDATE, [this]);\n      }\n    }\n    /**\n     * 当前用户在该对话的未读消息数\n     * @type {Number}\n     */\n    ,\n    get: function get() {\n      return internal(this).unreadMessagesCount;\n    }\n  }, {\n    key: \"lastMessageAt\",\n    set: function set(value) {\n      var time = decodeDate(value);\n      if (time <= this._lastMessageAt) return;\n      this._lastMessageAt = time;\n    },\n    get: function get() {\n      return this._lastMessageAt;\n    }\n    /**\n     * 最后消息送达时间，常用来实现消息的「已送达」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n     * @type {?Date}\n     * @since 3.4.0\n     */\n\n  }, {\n    key: \"lastDeliveredAt\",\n    get: function get() {\n      if (this.members.length !== 2) return null;\n      return internal(this).lastDeliveredAt;\n    }\n  }, {\n    key: \"lastReadAt\",\n    get: function get() {\n      if (this.members.length !== 2) return null;\n      return internal(this).lastReadAt;\n    }\n  }]);\n\n  return ConversationBase;\n}(EventEmitter);\n\nvar debug$8 = d('LC:SignatureFactoryRunner');\n\nfunction _validateSignature() {\n  var signatureResult = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var signature = signatureResult.signature,\n      timestamp = signatureResult.timestamp,\n      nonce = signatureResult.nonce;\n\n  if (typeof signature !== 'string' || typeof timestamp !== 'number' || typeof nonce !== 'string') {\n    throw new Error('malformed signature');\n  }\n\n  return {\n    signature: signature,\n    timestamp: timestamp,\n    nonce: nonce\n  };\n}\n\nvar runSignatureFactory = (function (signatureFactory, params) {\n  return _Promise.resolve().then(function () {\n    debug$8('call signatureFactory with %O', params);\n    return signatureFactory.apply(void 0, _toConsumableArray(params));\n  }).then(tap(function (signatureResult) {\n    return debug$8('sign result %O', signatureResult);\n  }), function (error) {\n    // eslint-disable-next-line no-param-reassign\n    error.message = \"sign error: \".concat(error.message);\n    debug$8(error);\n    throw error;\n  }).then(_validateSignature);\n});\n\nfunction ownKeys$6(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$6(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$6(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$6(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n/**\n * 部分失败异常\n * @typedef OperationFailureError\n * @type {Error}\n * @property {string} message 异常信息\n * @property {string[]} clientIds 因为该原因失败的 client id 列表\n * @property {number} [code] 错误码\n * @property {string} [detail] 详细信息\n */\n\n/**\n * 部分成功的结果\n * @typedef PartiallySuccess\n * @type {Object}\n * @property {string[]} successfulClientIds 成功的 client id 列表\n * @property {OperationFailureError[]} failures 失败的异常列表\n */\n\n/**\n * 分页查询结果\n * @typedef PagedResults\n * @type {Object}\n * @property {T[]} results 查询结果\n * @property {string} [next] 存在表示还有更多结果，在下次查询中带上可实现翻页。\n */\n\nvar createPartiallySuccess = function createPartiallySuccess(_ref) {\n  var allowedPids = _ref.allowedPids,\n      failedPids = _ref.failedPids;\n  return {\n    successfulClientIds: allowedPids,\n    failures: failedPids.map(function (_ref2) {\n      var pids = _ref2.pids,\n          error = _objectWithoutProperties(_ref2, [\"pids\"]);\n\n      return _Object$assign(createError(error), {\n        clientIds: pids\n      });\n    })\n  };\n};\n/**\n * @extends ConversationBase\n * @private\n * @abstract\n */\n\n\nvar PersistentConversation = /*#__PURE__*/function (_ConversationBase) {\n  _inheritsLoose(PersistentConversation, _ConversationBase);\n\n  function PersistentConversation(data, _ref3, client) {\n    var _this;\n\n    var creator = _ref3.creator,\n        createdAt = _ref3.createdAt,\n        updatedAt = _ref3.updatedAt,\n        _ref3$transient = _ref3[\"transient\"],\n        _transient = _ref3$transient === void 0 ? false : _ref3$transient,\n        _ref3$system = _ref3.system,\n        system = _ref3$system === void 0 ? false : _ref3$system,\n        _ref3$muted = _ref3.muted,\n        muted = _ref3$muted === void 0 ? false : _ref3$muted,\n        _ref3$mutedMembers = _ref3.mutedMembers,\n        mutedMembers = _ref3$mutedMembers === void 0 ? [] : _ref3$mutedMembers,\n        attributes = _objectWithoutProperties(_ref3, [\"creator\", \"createdAt\", \"updatedAt\", \"transient\", \"system\", \"muted\", \"mutedMembers\"]);\n\n    _this = _ConversationBase.call(this, _objectSpread$6(_objectSpread$6({}, data), {}, {\n      /**\n       * 对话创建者\n       * @memberof PersistentConversation#\n       * @type {String}\n       */\n      creator: creator,\n\n      /**\n       * 对话创建时间\n       * @memberof PersistentConversation#\n       * @type {Date}\n       */\n      createdAt: createdAt,\n\n      /**\n       * 对话更新时间\n       * @memberof PersistentConversation#\n       * @type {Date}\n       */\n      updatedAt: updatedAt,\n\n      /**\n       * 对该对话设置了静音的用户列表\n       * @memberof PersistentConversation#\n       * @type {?String[]}\n       */\n      mutedMembers: mutedMembers,\n\n      /**\n       * 暂态对话标记\n       * @memberof PersistentConversation#\n       * @type {Boolean}\n       */\n      \"transient\": _transient,\n\n      /**\n       * 系统对话标记\n       * @memberof PersistentConversation#\n       * @type {Boolean}\n       * @since 3.3.0\n       */\n      system: system,\n\n      /**\n       * 当前用户静音该对话标记\n       * @memberof PersistentConversation#\n       * @type {Boolean}\n       */\n      muted: muted,\n      _attributes: attributes\n    }), client) || this;\n\n    _this._reset();\n\n    return _this;\n  }\n\n  var _proto = PersistentConversation.prototype;\n\n  /**\n   * 获取对话的自定义属性\n   * @since 3.2.0\n   * @param  {String} key key 属性的键名，'x' 对应 Conversation 表中的 x 列\n   * @return {Any} 属性的值\n   */\n  _proto.get = function get(key) {\n    return internal(this).currentAttributes[key];\n  }\n  /**\n   * 设置对话的自定义属性\n   * @since 3.2.0\n   * @param {String} key 属性的键名，'x' 对应 Conversation 表中的 x 列，支持使用 'x.y.z' 来修改对象的部分字段。\n   * @param {Any} value 属性的值\n   * @return {this} self\n   * @example\n   *\n   * // 设置对话的 color 属性\n   * conversation.set('color', {\n   *   text: '#000',\n   *   background: '#DDD',\n   * });\n   * // 设置对话的 color.text 属性\n   * conversation.set('color.text', '#333');\n   */\n  ;\n\n  _proto.set = function set(key, value) {\n    this._debug(\"set [\".concat(key, \"]: \").concat(value));\n\n    var _internal = internal(this),\n        pendingAttributes = _internal.pendingAttributes;\n\n    var pendingKeys = _Object$keys(pendingAttributes); // suppose pendingAttributes = { 'a.b': {} }\n    // set 'a' or 'a.b': delete 'a.b'\n\n\n    var re = new RegExp(\"^\".concat(key));\n    var childKeys = pendingKeys.filter(re.test.bind(re));\n    childKeys.forEach(function (k) {\n      delete pendingAttributes[k];\n    });\n\n    if (childKeys.length) {\n      pendingAttributes[key] = value;\n    } else {\n      // set 'a.c': nothing to do\n      // set 'a.b.c.d': assign c: { d: {} } to 'a.b'\n      var parentKey = find(pendingKeys, function (k) {\n        return key.indexOf(k) === 0;\n      }); // 'a.b'\n\n      if (parentKey) {\n        setValue(pendingAttributes[parentKey], key.slice(parentKey.length + 1), value);\n      } else {\n        pendingAttributes[key] = value;\n      }\n    }\n\n    this._buildCurrentAttributes();\n\n    return this;\n  };\n\n  _proto._buildCurrentAttributes = function _buildCurrentAttributes() {\n    var _internal2 = internal(this),\n        pendingAttributes = _internal2.pendingAttributes;\n\n    internal(this).currentAttributes = _Object$keys(pendingAttributes).reduce(function (target, k) {\n      return setValue(target, k, pendingAttributes[k]);\n    }, cloneDeep(this._attributes));\n  };\n\n  _proto._updateServerAttributes = function _updateServerAttributes(attributes) {\n    var _this2 = this;\n\n    _Object$keys(attributes).forEach(function (key) {\n      return setValue(_this2._attributes, key, attributes[key]);\n    });\n\n    this._buildCurrentAttributes();\n  };\n\n  _proto._reset = function _reset() {\n    _Object$assign(internal(this), {\n      pendingAttributes: {},\n      currentAttributes: this._attributes\n    });\n  }\n  /**\n   * 保存当前对话的属性至服务器\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.save =\n  /*#__PURE__*/\n  function () {\n    var _save = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var attr, convMessage, resCommand;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this._debug('save');\n\n              attr = internal(this).pendingAttributes;\n\n              if (!isEmpty(attr)) {\n                _context.next = 5;\n                break;\n              }\n\n              this._debug('nothing touched, resolve with self');\n\n              return _context.abrupt(\"return\", this);\n\n            case 5:\n              this._debug('attr: %O', attr);\n\n              convMessage = new ConvCommand({\n                attr: new JsonObjectMessage({\n                  data: _JSON$stringify(encode(attr))\n                })\n              });\n              _context.next = 9;\n              return this._send(new GenericCommand({\n                op: 'update',\n                convMessage: convMessage\n              }));\n\n            case 9:\n              resCommand = _context.sent;\n              this.updatedAt = resCommand.convMessage.udate;\n              this._attributes = internal(this).currentAttributes;\n              internal(this).pendingAttributes = {};\n              return _context.abrupt(\"return\", this);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function save() {\n      return _save.apply(this, arguments);\n    }\n\n    return save;\n  }()\n  /**\n   * 从服务器更新对话的属性\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.fetch =\n  /*#__PURE__*/\n  function () {\n    var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var query;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              query = this._client.getQuery().equalTo('objectId', this.id);\n              _context2.next = 3;\n              return query.find();\n\n            case 3:\n              return _context2.abrupt(\"return\", this);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function fetch() {\n      return _fetch.apply(this, arguments);\n    }\n\n    return fetch;\n  }()\n  /**\n   * 静音，客户端拒绝收到服务器端的离线推送通知\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.mute =\n  /*#__PURE__*/\n  function () {\n    var _mute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              this._debug('mute');\n\n              _context3.next = 3;\n              return this._send(new GenericCommand({\n                op: 'mute'\n              }));\n\n            case 3:\n              if (!this[\"transient\"]) {\n                this.muted = true;\n                this.mutedMembers = union(this.mutedMembers, [this._client.id]);\n              }\n\n              return _context3.abrupt(\"return\", this);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function mute() {\n      return _mute.apply(this, arguments);\n    }\n\n    return mute;\n  }()\n  /**\n   * 取消静音\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.unmute =\n  /*#__PURE__*/\n  function () {\n    var _unmute = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              this._debug('unmute');\n\n              _context4.next = 3;\n              return this._send(new GenericCommand({\n                op: 'unmute'\n              }));\n\n            case 3:\n              if (!this[\"transient\"]) {\n                this.muted = false;\n                this.mutedMembers = difference(this.mutedMembers, [this._client.id]);\n              }\n\n              return _context4.abrupt(\"return\", this);\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function unmute() {\n      return _unmute.apply(this, arguments);\n    }\n\n    return unmute;\n  }();\n\n  _proto._appendConversationSignature = /*#__PURE__*/function () {\n    var _appendConversationSignature2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(command, action, clientIds) {\n      var params, signatureResult;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!this._client.options.conversationSignatureFactory) {\n                _context5.next = 6;\n                break;\n              }\n\n              params = [this.id, this._client.id, clientIds.sort(), action];\n              _context5.next = 4;\n              return runSignatureFactory(this._client.options.conversationSignatureFactory, params);\n\n            case 4:\n              signatureResult = _context5.sent;\n\n              _Object$assign(command.convMessage, keyRemap({\n                signature: 's',\n                timestamp: 't',\n                nonce: 'n'\n              }, signatureResult));\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    function _appendConversationSignature(_x, _x2, _x3) {\n      return _appendConversationSignature2.apply(this, arguments);\n    }\n\n    return _appendConversationSignature;\n  }();\n\n  _proto._appendBlacklistSignature = /*#__PURE__*/function () {\n    var _appendBlacklistSignature2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(command, action, clientIds) {\n      var params, signatureResult;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!this._client.options.blacklistSignatureFactory) {\n                _context6.next = 6;\n                break;\n              }\n\n              params = [this._client.id, this.id, clientIds.sort(), action];\n              _context6.next = 4;\n              return runSignatureFactory(this._client.options.blacklistSignatureFactory, params);\n\n            case 4:\n              signatureResult = _context6.sent;\n\n              _Object$assign(command.blacklistMessage, keyRemap({\n                signature: 's',\n                timestamp: 't',\n                nonce: 'n'\n              }, signatureResult));\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function _appendBlacklistSignature(_x4, _x5, _x6) {\n      return _appendBlacklistSignature2.apply(this, arguments);\n    }\n\n    return _appendBlacklistSignature;\n  }()\n  /**\n   * 增加成员\n   * @param {String|String[]} clientIds 新增成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  ;\n\n  _proto.add =\n  /*#__PURE__*/\n  function () {\n    var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(clientIds) {\n      var command, _yield$this$_send, convMessage, allowedPids;\n\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              this._debug('add', clientIds);\n\n              if (typeof clientIds === 'string') {\n                clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n              }\n\n              command = new GenericCommand({\n                op: 'add',\n                convMessage: new ConvCommand({\n                  m: clientIds\n                })\n              });\n              _context7.next = 5;\n              return this._appendConversationSignature(command, 'add', clientIds);\n\n            case 5:\n              _context7.next = 7;\n              return this._send(command);\n\n            case 7:\n              _yield$this$_send = _context7.sent;\n              convMessage = _yield$this$_send.convMessage;\n              allowedPids = _yield$this$_send.convMessage.allowedPids;\n\n              this._addMembers(allowedPids);\n\n              return _context7.abrupt(\"return\", createPartiallySuccess(convMessage));\n\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function add(_x7) {\n      return _add.apply(this, arguments);\n    }\n\n    return add;\n  }()\n  /**\n   * 剔除成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  ;\n\n  _proto.remove =\n  /*#__PURE__*/\n  function () {\n    var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(clientIds) {\n      var command, _yield$this$_send2, convMessage, allowedPids;\n\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              this._debug('remove', clientIds);\n\n              if (typeof clientIds === 'string') {\n                clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n              }\n\n              command = new GenericCommand({\n                op: 'remove',\n                convMessage: new ConvCommand({\n                  m: clientIds\n                })\n              });\n              _context8.next = 5;\n              return this._appendConversationSignature(command, 'remove', clientIds);\n\n            case 5:\n              _context8.next = 7;\n              return this._send(command);\n\n            case 7:\n              _yield$this$_send2 = _context8.sent;\n              convMessage = _yield$this$_send2.convMessage;\n              allowedPids = _yield$this$_send2.convMessage.allowedPids;\n\n              this._removeMembers(allowedPids);\n\n              return _context8.abrupt(\"return\", createPartiallySuccess(convMessage));\n\n            case 12:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    function remove(_x8) {\n      return _remove.apply(this, arguments);\n    }\n\n    return remove;\n  }()\n  /**\n   * （当前用户）加入该对话\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.join =\n  /*#__PURE__*/\n  function () {\n    var _join = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var _this3 = this;\n\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              this._debug('join');\n\n              return _context9.abrupt(\"return\", this.add(this._client.id).then(function (_ref4) {\n                var failures = _ref4.failures;\n                if (failures[0]) throw failures[0];\n                return _this3;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function join() {\n      return _join.apply(this, arguments);\n    }\n\n    return join;\n  }()\n  /**\n   * （当前用户）退出该对话\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.quit =\n  /*#__PURE__*/\n  function () {\n    var _quit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var _this4 = this;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              this._debug('quit');\n\n              return _context10.abrupt(\"return\", this.remove(this._client.id).then(function (_ref5) {\n                var failures = _ref5.failures;\n                if (failures[0]) throw failures[0];\n                return _this4;\n              }));\n\n            case 2:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function quit() {\n      return _quit.apply(this, arguments);\n    }\n\n    return quit;\n  }()\n  /**\n   * 在该对话中禁言成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  ;\n\n  _proto.muteMembers =\n  /*#__PURE__*/\n  function () {\n    var _muteMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(clientIds) {\n      var command, _yield$this$_send3, convMessage;\n\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              this._debug('mute', clientIds);\n\n              clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n\n              command = new GenericCommand({\n                op: OpType.add_shutup,\n                convMessage: new ConvCommand({\n                  m: clientIds\n                })\n              });\n              _context11.next = 5;\n              return this._send(command);\n\n            case 5:\n              _yield$this$_send3 = _context11.sent;\n              convMessage = _yield$this$_send3.convMessage;\n              return _context11.abrupt(\"return\", createPartiallySuccess(convMessage));\n\n            case 8:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function muteMembers(_x9) {\n      return _muteMembers.apply(this, arguments);\n    }\n\n    return muteMembers;\n  }()\n  /**\n   * 在该对话中解除成员禁言\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  ;\n\n  _proto.unmuteMembers =\n  /*#__PURE__*/\n  function () {\n    var _unmuteMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(clientIds) {\n      var command, _yield$this$_send4, convMessage;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              this._debug('unmute', clientIds);\n\n              clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n\n              command = new GenericCommand({\n                op: OpType.remove_shutup,\n                convMessage: new ConvCommand({\n                  m: clientIds\n                })\n              });\n              _context12.next = 5;\n              return this._send(command);\n\n            case 5:\n              _yield$this$_send4 = _context12.sent;\n              convMessage = _yield$this$_send4.convMessage;\n              return _context12.abrupt(\"return\", createPartiallySuccess(convMessage));\n\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function unmuteMembers(_x10) {\n      return _unmuteMembers.apply(this, arguments);\n    }\n\n    return unmuteMembers;\n  }()\n  /**\n   * 查询该对话禁言成员列表\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页。\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  ;\n\n  _proto.queryMutedMembers =\n  /*#__PURE__*/\n  function () {\n    var _queryMutedMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var _ref6,\n          limit,\n          next,\n          command,\n          _yield$this$_send5,\n          _yield$this$_send5$co,\n          m,\n          newNext,\n          _args13 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _ref6 = _args13.length > 0 && _args13[0] !== undefined ? _args13[0] : {}, limit = _ref6.limit, next = _ref6.next;\n\n              this._debug('query muted: limit %O, next: %O', limit, next);\n\n              command = new GenericCommand({\n                op: OpType.query_shutup,\n                convMessage: new ConvCommand({\n                  limit: limit,\n                  next: next\n                })\n              });\n              _context13.next = 5;\n              return this._send(command);\n\n            case 5:\n              _yield$this$_send5 = _context13.sent;\n              _yield$this$_send5$co = _yield$this$_send5.convMessage;\n              m = _yield$this$_send5$co.m;\n              newNext = _yield$this$_send5$co.next;\n              return _context13.abrupt(\"return\", {\n                results: m,\n                next: newNext\n              });\n\n            case 10:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function queryMutedMembers() {\n      return _queryMutedMembers.apply(this, arguments);\n    }\n\n    return queryMutedMembers;\n  }()\n  /**\n   * 将用户加入该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  ;\n\n  _proto.blockMembers =\n  /*#__PURE__*/\n  function () {\n    var _blockMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(clientIds) {\n      var command, _yield$this$_send6, blacklistMessage;\n\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              this._debug('block', clientIds);\n\n              clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n\n              command = new GenericCommand({\n                cmd: 'blacklist',\n                op: OpType.block,\n                blacklistMessage: new BlacklistCommand({\n                  srcCid: this.id,\n                  toPids: clientIds\n                })\n              });\n              _context14.next = 5;\n              return this._appendBlacklistSignature(command, 'conversation-block-clients', clientIds);\n\n            case 5:\n              _context14.next = 7;\n              return this._send(command);\n\n            case 7:\n              _yield$this$_send6 = _context14.sent;\n              blacklistMessage = _yield$this$_send6.blacklistMessage;\n              return _context14.abrupt(\"return\", createPartiallySuccess(blacklistMessage));\n\n            case 10:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function blockMembers(_x11) {\n      return _blockMembers.apply(this, arguments);\n    }\n\n    return blockMembers;\n  }()\n  /**\n   * 将用户移出该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  ;\n\n  _proto.unblockMembers =\n  /*#__PURE__*/\n  function () {\n    var _unblockMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(clientIds) {\n      var command, _yield$this$_send7, blacklistMessage;\n\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              this._debug('unblock', clientIds);\n\n              clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n\n              command = new GenericCommand({\n                cmd: 'blacklist',\n                op: OpType.unblock,\n                blacklistMessage: new BlacklistCommand({\n                  srcCid: this.id,\n                  toPids: clientIds\n                })\n              });\n              _context15.next = 5;\n              return this._appendBlacklistSignature(command, 'conversation-unblock-clients', clientIds);\n\n            case 5:\n              _context15.next = 7;\n              return this._send(command);\n\n            case 7:\n              _yield$this$_send7 = _context15.sent;\n              blacklistMessage = _yield$this$_send7.blacklistMessage;\n              return _context15.abrupt(\"return\", createPartiallySuccess(blacklistMessage));\n\n            case 10:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function unblockMembers(_x12) {\n      return _unblockMembers.apply(this, arguments);\n    }\n\n    return unblockMembers;\n  }()\n  /**\n   * 查询该对话黑名单\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  ;\n\n  _proto.queryBlockedMembers =\n  /*#__PURE__*/\n  function () {\n    var _queryBlockedMembers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n      var _ref7,\n          limit,\n          next,\n          command,\n          _yield$this$_send8,\n          _yield$this$_send8$bl,\n          blockedPids,\n          newNext,\n          _args16 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _ref7 = _args16.length > 0 && _args16[0] !== undefined ? _args16[0] : {}, limit = _ref7.limit, next = _ref7.next;\n\n              this._debug('query blocked: limit %O, next: %O', limit, next);\n\n              command = new GenericCommand({\n                cmd: 'blacklist',\n                op: OpType.query,\n                blacklistMessage: new BlacklistCommand({\n                  srcCid: this.id,\n                  limit: limit,\n                  next: next\n                })\n              });\n              _context16.next = 5;\n              return this._send(command);\n\n            case 5:\n              _yield$this$_send8 = _context16.sent;\n              _yield$this$_send8$bl = _yield$this$_send8.blacklistMessage;\n              blockedPids = _yield$this$_send8$bl.blockedPids;\n              newNext = _yield$this$_send8$bl.next;\n              return _context16.abrupt(\"return\", {\n                results: blockedPids,\n                next: newNext\n              });\n\n            case 10:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this);\n    }));\n\n    function queryBlockedMembers() {\n      return _queryBlockedMembers.apply(this, arguments);\n    }\n\n    return queryBlockedMembers;\n  }();\n\n  _proto.toFullJSON = function toFullJSON() {\n    var creator = this.creator,\n        system = this.system,\n        _transient2 = this[\"transient\"],\n        createdAt = this.createdAt,\n        updatedAt = this.updatedAt,\n        _attributes = this._attributes;\n    return _objectSpread$6(_objectSpread$6({}, _ConversationBase.prototype.toFullJSON.call(this)), {}, {\n      creator: creator,\n      system: system,\n      \"transient\": _transient2,\n      createdAt: getTime(createdAt),\n      updatedAt: getTime(updatedAt)\n    }, _attributes);\n  };\n\n  _proto.toJSON = function toJSON() {\n    var creator = this.creator,\n        system = this.system,\n        _transient3 = this[\"transient\"],\n        muted = this.muted,\n        mutedMembers = this.mutedMembers,\n        createdAt = this.createdAt,\n        updatedAt = this.updatedAt,\n        _attributes = this._attributes;\n    return _objectSpread$6(_objectSpread$6({}, _ConversationBase.prototype.toJSON.call(this)), {}, {\n      creator: creator,\n      system: system,\n      \"transient\": _transient3,\n      muted: muted,\n      mutedMembers: mutedMembers,\n      createdAt: createdAt,\n      updatedAt: updatedAt\n    }, _attributes);\n  };\n\n  _createClass(PersistentConversation, [{\n    key: \"createdAt\",\n    set: function set(value) {\n      this._createdAt = decodeDate(value);\n    },\n    get: function get() {\n      return this._createdAt;\n    }\n  }, {\n    key: \"updatedAt\",\n    set: function set(value) {\n      this._updatedAt = decodeDate(value);\n    },\n    get: function get() {\n      return this._updatedAt;\n    }\n    /**\n     * 对话名字，对应 _Conversation 表中的 name\n     * @type {String}\n     */\n\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this.get('name');\n    },\n    set: function set(value) {\n      this.set('name', value);\n    }\n  }]);\n\n  return PersistentConversation;\n}(ConversationBase);\n\n/**\n * 对话成员角色枚举\n * @enum {String}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\n\nvar ConversationMemberRole = {\n  /** 所有者 */\n  OWNER: 'Owner',\n\n  /** 管理员 */\n  MANAGER: 'Manager',\n\n  /** 成员 */\n  MEMBER: 'Member'\n};\n\n_Object$freeze(ConversationMemberRole);\n\nvar ConversationMemberInfo = /*#__PURE__*/function () {\n  /**\n   * 对话成员属性，保存了成员与某个对话相关的属性，对应 _ConversationMemberInfo 表\n   * @since 4.0.0\n   */\n  function ConversationMemberInfo(_ref) {\n    var conversation = _ref.conversation,\n        memberId = _ref.memberId,\n        role = _ref.role;\n    if (!conversation) throw new Error('conversation requried');\n    if (!memberId) throw new Error('memberId requried');\n\n    _Object$assign(internal(this), {\n      conversation: conversation,\n      memberId: memberId,\n      role: role\n    });\n  }\n  /**\n   * 对话 Id\n   * @type {String}\n   * @readonly\n   */\n\n\n  var _proto = ConversationMemberInfo.prototype;\n\n  _proto.toJSON = function toJSON() {\n    var conversationId = this.conversationId,\n        memberId = this.memberId,\n        role = this.role,\n        isOwner = this.isOwner;\n    return {\n      conversationId: conversationId,\n      memberId: memberId,\n      role: role,\n      isOwner: isOwner\n    };\n  };\n\n  _createClass(ConversationMemberInfo, [{\n    key: \"conversationId\",\n    get: function get() {\n      return internal(this).conversation.id;\n    }\n    /**\n     * 成员 Id\n     * @type {String}\n     * @readonly\n     */\n\n  }, {\n    key: \"memberId\",\n    get: function get() {\n      return internal(this).memberId;\n    }\n    /**\n     * 角色\n     * @type {module:leancloud-realtime.ConversationMemberRole | String}\n     * @readonly\n     */\n\n  }, {\n    key: \"role\",\n    get: function get() {\n      if (this.isOwner) return ConversationMemberRole.OWNER;\n      return internal(this).role;\n    }\n    /**\n     * 是否是管理员\n     * @type {Boolean}\n     * @readonly\n     */\n\n  }, {\n    key: \"isOwner\",\n    get: function get() {\n      return this.memberId === internal(this).conversation.creator;\n    }\n  }]);\n\n  return ConversationMemberInfo;\n}();\n\n/**\n * 普通对话\n *\n * 无法直接实例化，请使用 {@link IMClient#createConversation} 创建新的普通对话。\n * @extends PersistentConversation\n * @public\n */\n\nvar Conversation = /*#__PURE__*/function (_PersistentConversati) {\n  _inheritsLoose(Conversation, _PersistentConversati);\n\n  function Conversation() {\n    return _PersistentConversati.apply(this, arguments) || this;\n  }\n\n  var _proto = Conversation.prototype;\n\n  _proto._addMembers = function _addMembers(members) {\n    var _this = this;\n\n    _PersistentConversati.prototype._addMembers.call(this, members);\n\n    this.members = union(this.members, members);\n\n    var _internal = internal(this),\n        memberInfoMap = _internal.memberInfoMap;\n\n    if (!memberInfoMap) return;\n    members.forEach(function (memberId) {\n      memberInfoMap[memberId] = memberInfoMap[memberId] || new ConversationMemberInfo({\n        conversation: _this,\n        memberId: memberId,\n        role: ConversationMemberRole.MEMBER\n      });\n    });\n  };\n\n  _proto._removeMembers = function _removeMembers(members) {\n    _PersistentConversati.prototype._removeMembers.call(this, members);\n\n    this.members = difference(this.members, members);\n\n    var _internal2 = internal(this),\n        memberInfoMap = _internal2.memberInfoMap;\n\n    if (!memberInfoMap) return;\n    members.forEach(function (memberId) {\n      delete memberInfoMap[memberId];\n    });\n  };\n\n  _proto._fetchAllMemberInfo = /*#__PURE__*/function () {\n    var _fetchAllMemberInfo2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _this2 = this;\n\n      var response, memberInfos, memberInfoMap;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._client._requestWithSessionToken({\n                method: 'GET',\n                path: '/classes/_ConversationMemberInfo',\n                query: {\n                  where: {\n                    cid: this.id\n                  }\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              memberInfos = response.results.map(function (info) {\n                return new ConversationMemberInfo({\n                  conversation: _this2,\n                  memberId: info.clientId,\n                  role: info.role\n                });\n              });\n              memberInfoMap = {};\n              memberInfos.forEach(function (memberInfo) {\n                memberInfoMap[memberInfo.memberId] = memberInfo;\n              });\n              this.members.forEach(function (memberId) {\n                memberInfoMap[memberId] = memberInfoMap[memberId] || new ConversationMemberInfo({\n                  conversation: _this2,\n                  memberId: memberId,\n                  role: ConversationMemberRole.MEMBER\n                });\n              });\n              internal(this).memberInfoMap = memberInfoMap;\n              return _context.abrupt(\"return\", memberInfoMap);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function _fetchAllMemberInfo() {\n      return _fetchAllMemberInfo2.apply(this, arguments);\n    }\n\n    return _fetchAllMemberInfo;\n  }()\n  /**\n   * 获取所有成员的对话属性\n   * @since 4.0.0\n   * @return {Promise.<ConversationMemberInfo[]>} 所有成员的对话属性列表\n   */\n  ;\n\n  _proto.getAllMemberInfo =\n  /*#__PURE__*/\n  function () {\n    var _getAllMemberInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _ref,\n          _ref$noCache,\n          noCache,\n          _internal3,\n          memberInfoMap,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, _ref$noCache = _ref.noCache, noCache = _ref$noCache === void 0 ? false : _ref$noCache;\n              _internal3 = internal(this), memberInfoMap = _internal3.memberInfoMap;\n\n              if (!(!memberInfoMap || noCache)) {\n                _context2.next = 6;\n                break;\n              }\n\n              _context2.next = 5;\n              return this._fetchAllMemberInfo();\n\n            case 5:\n              memberInfoMap = _context2.sent;\n\n            case 6:\n              return _context2.abrupt(\"return\", this.members.map(function (memberId) {\n                return memberInfoMap[memberId];\n              }));\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getAllMemberInfo() {\n      return _getAllMemberInfo.apply(this, arguments);\n    }\n\n    return getAllMemberInfo;\n  }()\n  /**\n   * 获取指定成员的对话属性\n   * @since 4.0.0\n   * @param {String} memberId 成员 Id\n   * @return {Promise.<ConversationMemberInfo>} 指定成员的对话属性\n   */\n  ;\n\n  _proto.getMemberInfo =\n  /*#__PURE__*/\n  function () {\n    var _getMemberInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(memberId) {\n      var _internal4, memberInfoMap;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(this.members.indexOf(memberId) === -1)) {\n                _context3.next = 2;\n                break;\n              }\n\n              throw new Error(\"\".concat(memberId, \" is not the mumber of conversation[\").concat(this.id, \"]\"));\n\n            case 2:\n              _internal4 = internal(this), memberInfoMap = _internal4.memberInfoMap;\n\n              if (memberInfoMap && memberInfoMap[memberId]) {\n                _context3.next = 6;\n                break;\n              }\n\n              _context3.next = 6;\n              return this.getAllMemberInfo();\n\n            case 6:\n              return _context3.abrupt(\"return\", internal(this).memberInfoMap[memberId]);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function getMemberInfo(_x) {\n      return _getMemberInfo.apply(this, arguments);\n    }\n\n    return getMemberInfo;\n  }()\n  /**\n   * 更新指定用户的角色\n   * @since 4.0.0\n   * @param {String} memberId 成员 Id\n   * @param {module:leancloud-realtime.ConversationMemberRole | String} role 角色\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.updateMemberRole =\n  /*#__PURE__*/\n  function () {\n    var _updateMemberRole = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(memberId, role) {\n      var _internal5, memberInfos;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              this._debug('update member role');\n\n              if (!(role === ConversationMemberRole.OWNER)) {\n                _context4.next = 3;\n                break;\n              }\n\n              throw createError({\n                code: ErrorCode.OWNER_PROMOTION_NOT_ALLOWED\n              });\n\n            case 3:\n              _context4.next = 5;\n              return this._send(new GenericCommand({\n                op: OpType.member_info_update,\n                convMessage: new ConvCommand({\n                  targetClientId: memberId,\n                  info: new ConvMemberInfo({\n                    pid: memberId,\n                    role: role\n                  })\n                })\n              }));\n\n            case 5:\n              _internal5 = internal(this), memberInfos = _internal5.memberInfos;\n\n              if (memberInfos && memberInfos[memberId]) {\n                internal(memberInfos[memberId]).role = role;\n              }\n\n              return _context4.abrupt(\"return\", this);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function updateMemberRole(_x2, _x3) {\n      return _updateMemberRole.apply(this, arguments);\n    }\n\n    return updateMemberRole;\n  }();\n\n  return Conversation;\n}(PersistentConversation);\n\n/**\n * 聊天室。\n *\n * 无法直接实例化，请使用 {@link IMClient#createChatRoom} 创建新的聊天室。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\n\nvar ChatRoom = /*#__PURE__*/function (_PersistentConversati) {\n  _inheritsLoose(ChatRoom, _PersistentConversati);\n\n  function ChatRoom() {\n    return _PersistentConversati.apply(this, arguments) || this;\n  }\n\n  return ChatRoom;\n}(PersistentConversation);\n\n/**\n * 服务号。\n *\n * 服务号不支持在客户端创建。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\n\nvar ServiceConversation = /*#__PURE__*/function (_PersistentConversati) {\n  _inheritsLoose(ServiceConversation, _PersistentConversati);\n\n  function ServiceConversation() {\n    return _PersistentConversati.apply(this, arguments) || this;\n  }\n\n  var _proto = ServiceConversation.prototype;\n\n  /**\n   * 订阅该服务号\n   * @return {Promise.<this>} self\n   */\n  _proto.subscribe =\n  /*#__PURE__*/\n  function () {\n    var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this.join());\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function subscribe() {\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  }()\n  /**\n   * 退订该服务号\n   * @return {Promise.<this>} self\n   */\n  ;\n\n  _proto.unsubscribe =\n  /*#__PURE__*/\n  function () {\n    var _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.quit());\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function unsubscribe() {\n      return _unsubscribe.apply(this, arguments);\n    }\n\n    return unsubscribe;\n  }();\n\n  return ServiceConversation;\n}(PersistentConversation);\n\nfunction ownKeys$7(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$7(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$7(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$7(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar transformNotFoundError = function transformNotFoundError(error) {\n  return error.code === ErrorCode.CONVERSATION_NOT_FOUND ? createError({\n    code: ErrorCode.TEMPORARY_CONVERSATION_EXPIRED\n  }) : error;\n};\n/**\n * 临时对话\n * @since 4.0.0\n * @extends ConversationBase\n * @public\n */\n\n\nvar TemporaryConversation = /*#__PURE__*/function (_ConversationBase) {\n  _inheritsLoose(TemporaryConversation, _ConversationBase);\n\n  /**\n   * 无法直接实例化，请使用 {@link IMClient#createTemporaryConversation} 创建新的临时对话。\n   */\n  function TemporaryConversation(data, _ref, client) {\n    var expiredAt = _ref.expiredAt;\n    return _ConversationBase.call(this, _objectSpread$7(_objectSpread$7({}, data), {}, {\n      expiredAt: expiredAt\n    }), client) || this;\n  }\n  /**\n   * 对话失效时间\n   * @type {Date}\n   */\n\n\n  var _proto = TemporaryConversation.prototype;\n\n  _proto._send = /*#__PURE__*/function () {\n    var _send2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _ConversationBase$pro,\n          _len,\n          args,\n          _key,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.expired) {\n                _context.next = 2;\n                break;\n              }\n\n              throw createError({\n                code: ErrorCode.TEMPORARY_CONVERSATION_EXPIRED\n              });\n\n            case 2:\n              _context.prev = 2;\n\n              for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = _args[_key];\n              }\n\n              _context.next = 6;\n              return (_ConversationBase$pro = _ConversationBase.prototype._send).call.apply(_ConversationBase$pro, [this].concat(args));\n\n            case 6:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              throw transformNotFoundError(_context.t0);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[2, 9]]);\n    }));\n\n    function _send() {\n      return _send2.apply(this, arguments);\n    }\n\n    return _send;\n  }();\n\n  _proto.send = /*#__PURE__*/function () {\n    var _send3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _ConversationBase$pro2,\n          _len2,\n          args,\n          _key2,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n\n              for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = _args2[_key2];\n              }\n\n              _context2.next = 4;\n              return (_ConversationBase$pro2 = _ConversationBase.prototype.send).call.apply(_ConversationBase$pro2, [this].concat(args));\n\n            case 4:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](0);\n              throw transformNotFoundError(_context2.t0);\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this, [[0, 7]]);\n    }));\n\n    function send() {\n      return _send3.apply(this, arguments);\n    }\n\n    return send;\n  }();\n\n  _proto.toFullJSON = function toFullJSON() {\n    var expiredAt = this.expiredAt;\n    return _objectSpread$7(_objectSpread$7({}, _ConversationBase.prototype.toFullJSON.call(this)), {}, {\n      expiredAt: getTime(expiredAt)\n    });\n  };\n\n  _proto.toJSON = function toJSON() {\n    var expiredAt = this.expiredAt,\n        expired = this.expired;\n    return _objectSpread$7(_objectSpread$7({}, _ConversationBase.prototype.toJSON.call(this)), {}, {\n      expiredAt: expiredAt,\n      expired: expired\n    });\n  };\n\n  _createClass(TemporaryConversation, [{\n    key: \"expiredAt\",\n    set: function set(value) {\n      this._expiredAt = decodeDate(value);\n    },\n    get: function get() {\n      return this._expiredAt;\n    }\n    /**\n     * 对话是否已失效\n     * @type {Boolean}\n     */\n\n  }, {\n    key: \"expired\",\n    get: function get() {\n      return this.expiredAt < new Date();\n    }\n  }]);\n\n  return TemporaryConversation;\n}(ConversationBase);\n\nvar debug$9 = d('LC:ConversationQuery');\n\nvar ConversationQuery = /*#__PURE__*/function () {\n  ConversationQuery._encode = function _encode(value) {\n    if (value instanceof Date) {\n      return {\n        __type: 'Date',\n        iso: value.toJSON()\n      };\n    }\n\n    if (value instanceof RegExp) {\n      return value.source;\n    }\n\n    return value;\n  };\n\n  ConversationQuery._quote = function _quote(s) {\n    return \"\\\\Q\".concat(s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q'), \"\\\\E\");\n  };\n\n  ConversationQuery._calculateFlag = function _calculateFlag(options) {\n    return ['withLastMessagesRefreshed', 'compact'].reduce( // eslint-disable-next-line no-bitwise\n    function (prev, key) {\n      return (prev << 1) + Boolean(options[key]);\n    }, 0);\n  }\n  /**\n   * 构造一个用 AND 连接所有查询的 ConversationQuery\n   * @param {...ConversationQuery} queries\n   * @return {ConversationQuery}\n   */\n  ;\n\n  ConversationQuery.and = function and() {\n    for (var _len = arguments.length, queries = new Array(_len), _key = 0; _key < _len; _key++) {\n      queries[_key] = arguments[_key];\n    }\n\n    if (queries.length < 2) {\n      throw new Error('The queries must contain at least two elements');\n    }\n\n    if (!queries.every(function (q) {\n      return q instanceof ConversationQuery;\n    })) {\n      throw new Error('The element of queries must be an instance of ConversationQuery');\n    }\n\n    var combined = new ConversationQuery(queries[0]._client);\n    combined._where.$and = queries.map(function (q) {\n      return q._where;\n    });\n    return combined;\n  }\n  /**\n   * 构造一个用 OR 连接所有查询的 ConversationQuery\n   * @param  {...ConversationQuery} queries\n   * @return {ConversationQuery}\n   */\n  ;\n\n  ConversationQuery.or = function or() {\n    var combined = ConversationQuery.and.apply(ConversationQuery, arguments);\n    combined._where.$or = combined._where.$and;\n    delete combined._where.$and;\n    return combined;\n  }\n  /**\n   * Create a ConversationQuery\n   * @param  {IMClient} client\n   */\n  ;\n\n  function ConversationQuery(client) {\n    this._client = client;\n    this._where = {};\n    this._extraOptions = {};\n  }\n\n  var _proto = ConversationQuery.prototype;\n\n  _proto._addCondition = function _addCondition(key, condition, value) {\n    // Check if we already have a condition\n    if (!this._where[key]) {\n      this._where[key] = {};\n    }\n\n    this._where[key][condition] = this.constructor._encode(value);\n    return this;\n  };\n\n  _proto.toJSON = function toJSON() {\n    var json = {\n      where: this._where,\n      flag: this.constructor._calculateFlag(this._extraOptions)\n    };\n    if (typeof this._skip !== 'undefined') json.skip = this._skip;\n    if (typeof this._limit !== 'undefined') json.limit = this._limit;\n    if (typeof this._order !== 'undefined') json.sort = this._order;\n    debug$9(json);\n    return json;\n  }\n  /**\n   * 增加查询条件，指定聊天室的组员包含某些成员即可返回\n   * @param {string[]} peerIds - 成员 ID 列表\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.containsMembers = function containsMembers(peerIds) {\n    return this.containsAll('m', peerIds);\n  }\n  /**\n   * 增加查询条件，指定聊天室的组员条件满足条件的才返回\n   *\n   * @param {string[]} - 成员 ID 列表\n   * @param {Boolean} includeSelf - 是否包含自己\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.withMembers = function withMembers(peerIds, includeSelf) {\n    var peerIdsSet = new _Set(peerIds);\n\n    if (includeSelf) {\n      peerIdsSet.add(this._client.id);\n    }\n\n    this.sizeEqualTo('m', peerIdsSet.size);\n    return this.containsMembers(_Array$from(peerIdsSet));\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.equalTo = function equalTo(key, value) {\n    this._where[key] = this.constructor._encode(value);\n    return this;\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于条件时即可返回\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.lessThan = function lessThan(key, value) {\n    return this._addCondition(key, '$lt', value);\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于等于条件时即可返回\n    * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.lessThanOrEqualTo = function lessThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$lte', value);\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.greaterThan = function greaterThan(key, value) {\n    return this._addCondition(key, '$gt', value);\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.greaterThanOrEqualTo = function greaterThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$gte', value);\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足不等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.notEqualTo = function notEqualTo(key, value) {\n    return this._addCondition(key, '$ne', value);\n  }\n  /**\n   * 增加查询条件，当 conversation 存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.exists = function exists(key) {\n    return this._addCondition(key, '$exists', true);\n  }\n  /**\n   * 增加查询条件，当 conversation 不存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.doesNotExist = function doesNotExist(key) {\n    return this._addCondition(key, '$exists', false);\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.containedIn = function containedIn(key, values) {\n    return this._addCondition(key, '$in', values);\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值不包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.notContainsIn = function notContainsIn(key, values) {\n    return this._addCondition(key, '$nin', values);\n  }\n  /**\n   * 增加查询条件，当conversation的属性中对应的字段中的元素包含所有的值才可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.containsAll = function containsAll(key, values) {\n    return this._addCondition(key, '$all', values);\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含此字符串即可返回\n   *\n   * @param {string} key\n   * @param {string} subString\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.contains = function contains(key, subString) {\n    return this._addCondition(key, '$regex', ConversationQuery._quote(subString));\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串起始即可返回\n   *\n   * @param {string} key\n   * @param {string} prefix\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.startsWith = function startsWith(key, prefix) {\n    return this._addCondition(key, '$regex', \"^\".concat(ConversationQuery._quote(prefix)));\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串结束即可返回\n   *\n   * @param {string} key\n   * @param {string} suffix\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.endsWith = function endsWith(key, suffix) {\n    return this._addCondition(key, '$regex', \"\".concat(ConversationQuery._quote(suffix), \"$\"));\n  }\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值满足提供的正则表达式即可返回\n   *\n   * @param {string} key\n   * @param {RegExp} regex\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.matches = function matches(key, regex) {\n    this._addCondition(key, '$regex', regex); // Javascript regex options support mig as inline options but store them\n    // as properties of the object. We support mi & should migrate them to\n    // modifiers\n\n\n    var _modifiers = '';\n\n    if (regex.ignoreCase) {\n      _modifiers += 'i';\n    }\n\n    if (regex.multiline) {\n      _modifiers += 'm';\n    }\n\n    if (_modifiers && _modifiers.length) {\n      this._addCondition(key, '$options', _modifiers);\n    }\n\n    return this;\n  }\n  /**\n   * 添加查询约束条件，查找 key 类型是数组，该数组的长度匹配提供的数值\n   *\n   * @param {string} key\n   * @param {Number} length\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.sizeEqualTo = function sizeEqualTo(key, length) {\n    return this._addCondition(key, '$size', length);\n  }\n  /**\n   * 设置返回集合的大小上限\n   *\n   * @param {Number} limit - 上限\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.limit = function limit(_limit) {\n    this._limit = _limit;\n    return this;\n  }\n  /**\n   * 设置返回集合的起始位置，一般用于分页\n   *\n   * @param {Number} skip - 起始位置跳过几个对象\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.skip = function skip(_skip) {\n    this._skip = _skip;\n    return this;\n  }\n  /**\n   * 设置返回集合按照指定key进行增序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.ascending = function ascending(key) {\n    this._order = key;\n    return this;\n  }\n  /**\n   * 设置返回集合按照指定key进行增序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.addAscending = function addAscending(key) {\n    if (this._order) {\n      this._order += \",\".concat(key);\n    } else {\n      this._order = key;\n    }\n\n    return this;\n  }\n  /**\n   * 设置返回集合按照指定 key 进行降序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.descending = function descending(key) {\n    this._order = \"-\".concat(key);\n    return this;\n  }\n  /**\n   * 设置返回集合按照指定 key 进行降序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.addDescending = function addDescending(key) {\n    if (this._order) {\n      this._order += \",-\".concat(key);\n    } else {\n      this._order = \"-\".concat(key);\n    }\n\n    return this;\n  }\n  /**\n   * 设置返回的 conversations 刷新最后一条消息\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.withLastMessagesRefreshed = function withLastMessagesRefreshed() {\n    var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this._extraOptions.withLastMessagesRefreshed = enabled;\n    return this;\n  }\n  /**\n   * 设置返回的 conversations 为精简模式，即不含成员列表\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  ;\n\n  _proto.compact = function compact() {\n    var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this._extraOptions.compact = enabled;\n    return this;\n  }\n  /**\n   * 执行查询\n   * @return {Promise.<ConversationBase[]>}\n   */\n  ;\n\n  _proto.find =\n  /*#__PURE__*/\n  function () {\n    var _find = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._client._executeQuery(this));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function find() {\n      return _find.apply(this, arguments);\n    }\n\n    return find;\n  }()\n  /**\n   * 返回符合条件的第一个结果\n   * @return {Promise.<ConversationBase>}\n   */\n  ;\n\n  _proto.first =\n  /*#__PURE__*/\n  function () {\n    var _first = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.limit(1).find();\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent[0]);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function first() {\n      return _first.apply(this, arguments);\n    }\n\n    return first;\n  }();\n\n  return ConversationQuery;\n}();\n\nvar debug$a = d('LC:SessionManager');\n\nvar SessionManager = /*#__PURE__*/function () {\n  function SessionManager() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        refresh = _ref.refresh,\n        onBeforeGetSessionToken = _ref.onBeforeGetSessionToken;\n\n    this.refresh = refresh;\n    this._onBeforeGetSessionToken = onBeforeGetSessionToken;\n    this.setSessionToken(null, 0);\n  }\n\n  var _proto = SessionManager.prototype;\n\n  _proto.setSessionToken = function setSessionToken(token, ttl) {\n    debug$a('set session token', token, ttl);\n    var sessionToken = new Expirable(token, ttl * 1000);\n    this._sessionToken = sessionToken;\n    delete this._pendingSessionTokenPromise;\n    return sessionToken;\n  };\n\n  _proto.setSessionTokenAsync = /*#__PURE__*/function () {\n    var _setSessionTokenAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(promise) {\n      var _this = this;\n\n      var currentSessionToken;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentSessionToken = this._sessionToken;\n              this._pendingSessionTokenPromise = promise[\"catch\"](function (error) {\n                // revert, otherwise the following getSessionToken calls\n                // will all be rejected\n                _this._sessionToken = currentSessionToken;\n                throw error;\n              });\n              _context.t0 = this.setSessionToken;\n              _context.t1 = this;\n              _context.t2 = _toConsumableArray;\n              _context.next = 7;\n              return this._pendingSessionTokenPromise;\n\n            case 7:\n              _context.t3 = _context.sent;\n              _context.t4 = (0, _context.t2)(_context.t3);\n              return _context.abrupt(\"return\", _context.t0.apply.call(_context.t0, _context.t1, _context.t4));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function setSessionTokenAsync(_x) {\n      return _setSessionTokenAsync.apply(this, arguments);\n    }\n\n    return setSessionTokenAsync;\n  }();\n\n  _proto.getSessionToken = /*#__PURE__*/function () {\n    var _getSessionToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _ref2,\n          _ref2$autoRefresh,\n          autoRefresh,\n          _ref3,\n          value,\n          originalValue,\n          _yield$this$setSessio,\n          newValue,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref2 = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {}, _ref2$autoRefresh = _ref2.autoRefresh, autoRefresh = _ref2$autoRefresh === void 0 ? true : _ref2$autoRefresh;\n              debug$a('get session token');\n\n              if (this._onBeforeGetSessionToken) {\n                this._onBeforeGetSessionToken(this);\n              }\n\n              _context2.t0 = this._sessionToken;\n\n              if (_context2.t0) {\n                _context2.next = 8;\n                break;\n              }\n\n              _context2.next = 7;\n              return this._pendingSessionTokenPromise;\n\n            case 7:\n              _context2.t0 = _context2.sent;\n\n            case 8:\n              _ref3 = _context2.t0;\n              value = _ref3.value;\n              originalValue = _ref3.originalValue;\n\n              if (!(value === Expirable.EXPIRED && autoRefresh && this.refresh)) {\n                _context2.next = 19;\n                break;\n              }\n\n              debug$a('refresh expired session token');\n              _context2.next = 15;\n              return this.setSessionTokenAsync(this.refresh(this, originalValue));\n\n            case 15:\n              _yield$this$setSessio = _context2.sent;\n              newValue = _yield$this$setSessio.value;\n              debug$a('session token', newValue);\n              return _context2.abrupt(\"return\", newValue);\n\n            case 19:\n              debug$a('session token', value);\n              return _context2.abrupt(\"return\", value);\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function getSessionToken() {\n      return _getSessionToken.apply(this, arguments);\n    }\n\n    return getSessionToken;\n  }();\n\n  _proto.revoke = function revoke() {\n    if (this._sessionToken) this._sessionToken.expiredAt = -1;\n  };\n\n  return SessionManager;\n}();\n\nvar _dec$2, _dec2, _class$3;\n\nfunction ownKeys$8(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$8(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$8(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$8(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar debug$b = d('LC:IMClient');\nvar INVITED$1 = INVITED,\n    KICKED$1 = KICKED,\n    MEMBERS_JOINED$1 = MEMBERS_JOINED,\n    MEMBERS_LEFT$1 = MEMBERS_LEFT,\n    MEMBER_INFO_UPDATED$1 = MEMBER_INFO_UPDATED,\n    BLOCKED$1 = BLOCKED,\n    UNBLOCKED$1 = UNBLOCKED,\n    MEMBERS_BLOCKED$1 = MEMBERS_BLOCKED,\n    MEMBERS_UNBLOCKED$1 = MEMBERS_UNBLOCKED,\n    MUTED$1 = MUTED,\n    UNMUTED$1 = UNMUTED,\n    MEMBERS_MUTED$1 = MEMBERS_MUTED,\n    MEMBERS_UNMUTED$1 = MEMBERS_UNMUTED,\n    MESSAGE$2 = MESSAGE$1,\n    UNREAD_MESSAGES_COUNT_UPDATE$1 = UNREAD_MESSAGES_COUNT_UPDATE,\n    CLOSE$1 = CLOSE,\n    CONFLICT$1 = CONFLICT,\n    UNHANDLED_MESSAGE$1 = UNHANDLED_MESSAGE,\n    CONVERSATION_INFO_UPDATED$1 = CONVERSATION_INFO_UPDATED,\n    MESSAGE_RECALL$1 = MESSAGE_RECALL,\n    MESSAGE_UPDATE$1 = MESSAGE_UPDATE,\n    INFO_UPDATED$1 = INFO_UPDATED;\n\nvar isTemporaryConversatrionId = function isTemporaryConversatrionId(id) {\n  return /^_tmp:/.test(id);\n};\n/**\n * 1 patch-msg\n * 1 temp-conv-msg\n * 0 auto-bind-deviceid-and-installation\n * 1 transient-msg-ack\n * 1 keep-notification\n * 1 partial-failed-msg\n * @ignore\n */\n\n\nvar configBitmap = 59;\nvar IMClient = (_dec$2 = throttle(1000), _dec2 = throttle(1000), (_class$3 = /*#__PURE__*/function (_EventEmitter) {\n  _inheritsLoose(IMClient, _EventEmitter);\n\n  /**\n   * 无法直接实例化，请使用 {@link Realtime#createIMClient} 创建新的 IMClient。\n   *\n   * @extends EventEmitter\n   */\n  function IMClient(id) {\n    var _this;\n\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var props = arguments.length > 2 ? arguments[2] : undefined;\n\n    if (!(id === undefined || typeof id === 'string')) {\n      throw new TypeError(\"Client id [\".concat(id, \"] is not a String\"));\n    }\n\n    _this = _EventEmitter.call(this) || this;\n\n    _Object$assign(_assertThisInitialized(_this), {\n      /**\n       * @var id {String} 客户端 id\n       * @memberof IMClient#\n       */\n      id: id,\n      options: options\n    }, props);\n\n    if (!_this._messageParser) {\n      throw new Error('IMClient must be initialized with a MessageParser');\n    }\n\n    _this._conversationCache = new Cache(\"client:\".concat(_this.id));\n    _this._ackMessageBuffer = {};\n    internal(_assertThisInitialized(_this)).lastPatchTime = _Date$now();\n    internal(_assertThisInitialized(_this)).lastNotificationTime = undefined;\n    internal(_assertThisInitialized(_this))._eventemitter = new EventEmitter();\n\n    if (debug$b.enabled) {\n      values(IMEvent).forEach(function (event) {\n        return _this.on(event, function () {\n          for (var _len = arguments.length, payload = new Array(_len), _key = 0; _key < _len; _key++) {\n            payload[_key] = arguments[_key];\n          }\n\n          return _this._debug(\"\".concat(event, \" event emitted. %o\"), payload);\n        });\n      });\n    } // onIMClientCreate hook\n\n\n    applyDecorators(_this._plugins.onIMClientCreate, _assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = IMClient.prototype;\n\n  _proto._debug = function _debug() {\n    for (var _len2 = arguments.length, params = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      params[_key2] = arguments[_key2];\n    }\n\n    debug$b.apply(void 0, params.concat([\"[\".concat(this.id, \"]\")]));\n  }\n  /**\n   * @override\n   * @private\n   */\n  ;\n\n  _proto._dispatchCommand =\n  /*#__PURE__*/\n  function () {\n    var _dispatchCommand2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(command) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this._debug(trim(command), 'received');\n\n              if (command.serverTs && command.notificationType === 1) {\n                internal(this).lastNotificationTime = getTime(decodeDate(command.serverTs));\n              }\n\n              _context.t0 = command.cmd;\n              _context.next = _context.t0 === CommandType.conv ? 5 : _context.t0 === CommandType.direct ? 6 : _context.t0 === CommandType.session ? 7 : _context.t0 === CommandType.unread ? 8 : _context.t0 === CommandType.rcp ? 9 : _context.t0 === CommandType.patch ? 10 : 11;\n              break;\n\n            case 5:\n              return _context.abrupt(\"return\", this._dispatchConvMessage(command));\n\n            case 6:\n              return _context.abrupt(\"return\", this._dispatchDirectMessage(command));\n\n            case 7:\n              return _context.abrupt(\"return\", this._dispatchSessionMessage(command));\n\n            case 8:\n              return _context.abrupt(\"return\", this._dispatchUnreadMessage(command));\n\n            case 9:\n              return _context.abrupt(\"return\", this._dispatchRcpMessage(command));\n\n            case 10:\n              return _context.abrupt(\"return\", this._dispatchPatchMessage(command));\n\n            case 11:\n              return _context.abrupt(\"return\", this.emit(UNHANDLED_MESSAGE$1, command));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function _dispatchCommand(_x) {\n      return _dispatchCommand2.apply(this, arguments);\n    }\n\n    return _dispatchCommand;\n  }();\n\n  _proto._dispatchSessionMessage = /*#__PURE__*/function () {\n    var _dispatchSessionMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n      var _message$sessionMessa, code, reason;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _message$sessionMessa = message.sessionMessage, code = _message$sessionMessa.code, reason = _message$sessionMessa.reason;\n              _context2.t0 = message.op;\n              _context2.next = _context2.t0 === OpType.closed ? 4 : 8;\n              break;\n\n            case 4:\n              internal(this)._eventemitter.emit('close');\n\n              if (!(code === ErrorCode.SESSION_CONFLICT)) {\n                _context2.next = 7;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", this.emit(CONFLICT$1, {\n                reason: reason\n              }));\n\n            case 7:\n              return _context2.abrupt(\"return\", this.emit(CLOSE$1, {\n                code: code,\n                reason: reason\n              }));\n\n            case 8:\n              this.emit(UNHANDLED_MESSAGE$1, message);\n              throw new Error('Unrecognized session command');\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    function _dispatchSessionMessage(_x2) {\n      return _dispatchSessionMessage2.apply(this, arguments);\n    }\n\n    return _dispatchSessionMessage;\n  }();\n\n  _proto._dispatchUnreadMessage = function _dispatchUnreadMessage(_ref) {\n    var _this2 = this;\n\n    var _ref$unreadMessage = _ref.unreadMessage,\n        convs = _ref$unreadMessage.convs,\n        notifTime = _ref$unreadMessage.notifTime;\n    internal(this).lastUnreadNotifTime = notifTime; // ensure all converstions are cached\n\n    return this.getConversations(convs.map(function (conv) {\n      return conv.cid;\n    })).then(function () {\n      return (// update conversations data\n        _Promise.all(convs.map(function (_ref2) {\n          var cid = _ref2.cid,\n              unread = _ref2.unread,\n              mid = _ref2.mid,\n              ts = _ref2.timestamp,\n              from = _ref2.from,\n              data = _ref2.data,\n              binaryMsg = _ref2.binaryMsg,\n              patchTimestamp = _ref2.patchTimestamp,\n              mentioned = _ref2.mentioned;\n\n          var conversation = _this2._conversationCache.get(cid); // deleted conversation\n\n\n          if (!conversation) return null;\n          var timestamp;\n\n          if (ts) {\n            timestamp = decodeDate(ts);\n            conversation.lastMessageAt = timestamp; // eslint-disable-line no-param-reassign\n          }\n\n          return (mid ? _this2._messageParser.parse(binaryMsg || data).then(function (message) {\n            var messageProps = {\n              id: mid,\n              cid: cid,\n              timestamp: timestamp,\n              updatedAt: patchTimestamp,\n              from: from\n            };\n\n            _Object$assign(message, messageProps);\n\n            conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n          }) : _Promise.resolve()).then(function () {\n            conversation._setUnreadMessagesMentioned(mentioned);\n\n            var countNotUpdated = unread === internal(conversation).unreadMessagesCount;\n            if (countNotUpdated) return null; // to be filtered\n            // manipulate internal property directly to skip unreadmessagescountupdate event\n\n            internal(conversation).unreadMessagesCount = unread;\n            return conversation;\n          }); // filter conversations without unread count update\n        })).then(function (conversations) {\n          return conversations.filter(function (conversation) {\n            return conversation;\n          });\n        })\n      );\n    }).then(function (conversations) {\n      if (conversations.length) {\n        /**\n         * 未读消息数目更新\n         * @event IMClient#UNREAD_MESSAGES_COUNT_UPDATE\n         * @since 3.4.0\n         * @param {Conversation[]} conversations 未读消息数目有更新的对话列表\n         */\n        _this2.emit(UNREAD_MESSAGES_COUNT_UPDATE$1, conversations);\n      }\n    });\n  };\n\n  _proto._dispatchRcpMessage = /*#__PURE__*/function () {\n    var _dispatchRcpMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(message) {\n      var rcpMessage, read, conversationId, messageId, timestamp, conversation;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              rcpMessage = message.rcpMessage, read = message.rcpMessage.read;\n              conversationId = rcpMessage.cid;\n              messageId = rcpMessage.id;\n              timestamp = decodeDate(rcpMessage.t);\n              conversation = this._conversationCache.get(conversationId); // conversation not cached means the client does not send the message\n              // during this session\n\n              if (conversation) {\n                _context3.next = 7;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 7:\n              conversation._handleReceipt({\n                messageId: messageId,\n                timestamp: timestamp,\n                read: read\n              });\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    function _dispatchRcpMessage(_x3) {\n      return _dispatchRcpMessage2.apply(this, arguments);\n    }\n\n    return _dispatchRcpMessage;\n  }();\n\n  _proto._dispatchPatchMessage = function _dispatchPatchMessage(_ref3) {\n    var _this3 = this;\n\n    var patches = _ref3.patchMessage.patches;\n    // ensure all converstions are cached\n    return this.getConversations(patches.map(function (patch) {\n      return patch.cid;\n    })).then(function () {\n      return _Promise.all(patches.map(function (_ref4) {\n        var cid = _ref4.cid,\n            mid = _ref4.mid,\n            timestamp = _ref4.timestamp,\n            recall = _ref4.recall,\n            data = _ref4.data,\n            patchTimestamp = _ref4.patchTimestamp,\n            from = _ref4.from,\n            binaryMsg = _ref4.binaryMsg,\n            mentionAll = _ref4.mentionAll,\n            mentionPids = _ref4.mentionPids,\n            patchCode = _ref4.patchCode,\n            patchReason = _ref4.patchReason;\n\n        var conversation = _this3._conversationCache.get(cid); // deleted conversation\n\n\n        if (!conversation) return null;\n        return _this3._messageParser.parse(binaryMsg || data).then(function (message) {\n          var patchTime = getTime(decodeDate(patchTimestamp));\n          var messageProps = {\n            id: mid,\n            cid: cid,\n            timestamp: timestamp,\n            updatedAt: patchTime,\n            from: from,\n            mentionList: mentionPids,\n            mentionedAll: mentionAll\n          };\n\n          _Object$assign(message, messageProps);\n\n          message._setStatus(MessageStatus.SENT);\n\n          message._updateMentioned(_this3.id);\n\n          if (internal(_this3).lastPatchTime < patchTime) {\n            internal(_this3).lastPatchTime = patchTime;\n          } // update conversation lastMessage\n\n\n          if (conversation.lastMessage && conversation.lastMessage.id === mid) {\n            conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n          }\n\n          var reason;\n\n          if (patchCode) {\n            reason = {\n              code: patchCode.toNumber(),\n              detail: patchReason\n            };\n          }\n\n          if (recall) {\n            /**\n             * 消息被撤回\n             * @event IMClient#MESSAGE_RECALL\n             * @param {AVMessage} message 被撤回的消息\n             * @param {ConversationBase} conversation 消息所在的会话\n             * @param {PatchReason} [reason] 撤回的原因，不存在代表是发送者主动撤回\n             */\n            _this3.emit(MESSAGE_RECALL$1, message, conversation, reason);\n            /**\n             * 消息被撤回\n             * @event ConversationBase#MESSAGE_RECALL\n             * @param {AVMessage} message 被撤回的消息\n             * @param {PatchReason} [reason] 撤回的原因，不存在代表是发送者主动撤回\n             */\n\n\n            conversation.emit(MESSAGE_RECALL$1, message, reason);\n          } else {\n            /**\n             * 消息被修改\n             * @event IMClient#MESSAGE_UPDATE\n             * @param {AVMessage} message 被修改的消息\n             * @param {ConversationBase} conversation 消息所在的会话\n             * @param {PatchReason} [reason] 修改的原因，不存在代表是发送者主动修改\n             */\n            _this3.emit(MESSAGE_UPDATE$1, message, conversation, reason);\n            /**\n             * 消息被修改\n             * @event ConversationBase#MESSAGE_UPDATE\n             * @param {AVMessage} message 被修改的消息\n             * @param {PatchReason} [reason] 修改的原因，不存在代表是发送者主动修改\n             */\n\n\n            conversation.emit(MESSAGE_UPDATE$1, message, reason);\n          }\n        });\n      }));\n    });\n  };\n\n  _proto._dispatchConvMessage = /*#__PURE__*/function () {\n    var _dispatchConvMessage2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(message) {\n      var convMessage, _message$convMessage, initBy, m, info, attr, conversation, payload, _payload, _payload2, _payload3, _payload4, _payload5, _payload6, _payload7, _payload8, _payload9, _payload10, _payload11, pid, role, _internal, memberInfoMap, memberInfo, _payload12, attributes, _payload13;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              convMessage = message.convMessage, _message$convMessage = message.convMessage, initBy = _message$convMessage.initBy, m = _message$convMessage.m, info = _message$convMessage.info, attr = _message$convMessage.attr;\n              _context4.next = 3;\n              return this.getConversation(convMessage.cid);\n\n            case 3:\n              conversation = _context4.sent;\n              _context4.t0 = message.op;\n              _context4.next = _context4.t0 === OpType.joined ? 7 : _context4.t0 === OpType.left ? 12 : _context4.t0 === OpType.members_joined ? 17 : _context4.t0 === OpType.members_left ? 22 : _context4.t0 === OpType.members_blocked ? 27 : _context4.t0 === OpType.members_unblocked ? 31 : _context4.t0 === OpType.blocked ? 35 : _context4.t0 === OpType.unblocked ? 39 : _context4.t0 === OpType.members_shutuped ? 43 : _context4.t0 === OpType.members_unshutuped ? 47 : _context4.t0 === OpType.shutuped ? 51 : _context4.t0 === OpType.unshutuped ? 55 : _context4.t0 === OpType.member_info_changed ? 59 : _context4.t0 === OpType.updated ? 71 : 77;\n              break;\n\n            case 7:\n              conversation._addMembers([this.id]);\n\n              payload = {\n                invitedBy: initBy\n              };\n              /**\n               * 当前用户被添加至某个对话\n               * @event IMClient#INVITED\n               * @param {Object} payload\n               * @param {String} payload.invitedBy 邀请者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(INVITED$1, payload, conversation);\n              /**\n               * 当前用户被添加至当前对话\n               * @event ConversationBase#INVITED\n               * @param {Object} payload\n               * @param {String} payload.invitedBy 该移除操作的发起者 id\n               */\n\n              conversation.emit(INVITED$1, payload);\n              return _context4.abrupt(\"return\");\n\n            case 12:\n              conversation._removeMembers([this.id]);\n\n              _payload = {\n                kickedBy: initBy\n              };\n              /**\n               * 当前用户被从某个对话中移除\n               * @event IMClient#KICKED\n               * @param {Object} payload\n               * @param {String} payload.kickedBy 该移除操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(KICKED$1, _payload, conversation);\n              /**\n               * 当前用户被从当前对话中移除\n               * @event ConversationBase#KICKED\n               * @param {Object} payload\n               * @param {String} payload.kickedBy 该移除操作的发起者 id\n               */\n\n              conversation.emit(KICKED$1, _payload);\n              return _context4.abrupt(\"return\");\n\n            case 17:\n              conversation._addMembers(m);\n\n              _payload2 = {\n                invitedBy: initBy,\n                members: m\n              };\n              /**\n               * 有用户被添加至某个对话\n               * @event IMClient#MEMBERS_JOINED\n               * @param {Object} payload\n               * @param {String[]} payload.members 被添加的用户 id 列表\n               * @param {String} payload.invitedBy 邀请者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MEMBERS_JOINED$1, _payload2, conversation);\n              /**\n               * 有成员被添加至当前对话\n               * @event ConversationBase#MEMBERS_JOINED\n               * @param {Object} payload\n               * @param {String[]} payload.members 被添加的成员 id 列表\n               * @param {String} payload.invitedBy 邀请者 id\n               */\n\n              conversation.emit(MEMBERS_JOINED$1, _payload2);\n              return _context4.abrupt(\"return\");\n\n            case 22:\n              conversation._removeMembers(m);\n\n              _payload3 = {\n                kickedBy: initBy,\n                members: m\n              };\n              /**\n               * 有成员被从某个对话中移除\n               * @event IMClient#MEMBERS_LEFT\n               * @param {Object} payload\n               * @param {String[]} payload.members 被移除的成员 id 列表\n               * @param {String} payload.kickedBy 该移除操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MEMBERS_LEFT$1, _payload3, conversation);\n              /**\n               * 有成员被从当前对话中移除\n               * @event ConversationBase#MEMBERS_LEFT\n               * @param {Object} payload\n               * @param {String[]} payload.members 被移除的成员 id 列表\n               * @param {String} payload.kickedBy 该移除操作的发起者 id\n               */\n\n              conversation.emit(MEMBERS_LEFT$1, _payload3);\n              return _context4.abrupt(\"return\");\n\n            case 27:\n              _payload4 = {\n                blockedBy: initBy,\n                members: m\n              };\n              /**\n               * 有成员被加入某个对话的黑名单\n               * @event IMClient#MEMBERS_BLOCKED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.blockedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MEMBERS_BLOCKED$1, _payload4, conversation);\n              /**\n               * 有成员被加入当前对话的黑名单\n               * @event ConversationBase#MEMBERS_BLOCKED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.blockedBy 该操作的发起者 id\n               */\n\n              conversation.emit(MEMBERS_BLOCKED$1, _payload4);\n              return _context4.abrupt(\"return\");\n\n            case 31:\n              _payload5 = {\n                unblockedBy: initBy,\n                members: m\n              };\n              /**\n               * 有成员被移出某个对话的黑名单\n               * @event IMClient#MEMBERS_UNBLOCKED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.unblockedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MEMBERS_UNBLOCKED$1, _payload5, conversation);\n              /**\n               * 有成员被移出当前对话的黑名单\n               * @event ConversationBase#MEMBERS_UNBLOCKED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.unblockedBy 该操作的发起者 id\n               */\n\n              conversation.emit(MEMBERS_UNBLOCKED$1, _payload5);\n              return _context4.abrupt(\"return\");\n\n            case 35:\n              _payload6 = {\n                blockedBy: initBy\n              };\n              /**\n               * 当前用户被加入某个对话的黑名单\n               * @event IMClient#BLOCKED\n               * @param {Object} payload\n               * @param {String} payload.blockedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(BLOCKED$1, _payload6, conversation);\n              /**\n               * 当前用户被加入当前对话的黑名单\n               * @event ConversationBase#BLOCKED\n               * @param {Object} payload\n               * @param {String} payload.blockedBy 该操作的发起者 id\n               */\n\n              conversation.emit(BLOCKED$1, _payload6);\n              return _context4.abrupt(\"return\");\n\n            case 39:\n              _payload7 = {\n                unblockedBy: initBy\n              };\n              /**\n               * 当前用户被移出某个对话的黑名单\n               * @event IMClient#UNBLOCKED\n               * @param {Object} payload\n               * @param {String} payload.unblockedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(UNBLOCKED$1, _payload7, conversation);\n              /**\n               * 当前用户被移出当前对话的黑名单\n               * @event ConversationBase#UNBLOCKED\n               * @param {Object} payload\n               * @param {String} payload.unblockedBy 该操作的发起者 id\n               */\n\n              conversation.emit(UNBLOCKED$1, _payload7);\n              return _context4.abrupt(\"return\");\n\n            case 43:\n              _payload8 = {\n                mutedBy: initBy,\n                members: m\n              };\n              /**\n               * 有成员在某个对话中被禁言\n               * @event IMClient#MEMBERS_MUTED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.mutedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MEMBERS_MUTED$1, _payload8, conversation);\n              /**\n               * 有成员在当前对话中被禁言\n               * @event ConversationBase#MEMBERS_MUTED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.mutedBy 该操作的发起者 id\n               */\n\n              conversation.emit(MEMBERS_MUTED$1, _payload8);\n              return _context4.abrupt(\"return\");\n\n            case 47:\n              _payload9 = {\n                unmutedBy: initBy,\n                members: m\n              };\n              /**\n               * 有成员在某个对话中被解除禁言\n               * @event IMClient#MEMBERS_UNMUTED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.unmutedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MEMBERS_UNMUTED$1, _payload9, conversation);\n              /**\n               * 有成员在当前对话中被解除禁言\n               * @event ConversationBase#MEMBERS_UNMUTED\n               * @param {Object} payload\n               * @param {String[]} payload.members 成员 id 列表\n               * @param {String} payload.unmutedBy 该操作的发起者 id\n               */\n\n              conversation.emit(MEMBERS_UNMUTED$1, _payload9);\n              return _context4.abrupt(\"return\");\n\n            case 51:\n              _payload10 = {\n                mutedBy: initBy\n              };\n              /**\n               * 有成员在某个对话中被禁言\n               * @event IMClient#MUTED\n               * @param {Object} payload\n               * @param {String} payload.mutedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MUTED$1, _payload10, conversation);\n              /**\n               * 有成员在当前对话中被禁言\n               * @event ConversationBase#MUTED\n               * @param {Object} payload\n               * @param {String} payload.mutedBy 该操作的发起者 id\n               */\n\n              conversation.emit(MUTED$1, _payload10);\n              return _context4.abrupt(\"return\");\n\n            case 55:\n              _payload11 = {\n                unmutedBy: initBy\n              };\n              /**\n               * 有成员在某个对话中被解除禁言\n               * @event IMClient#UNMUTED\n               * @param {Object} payload\n               * @param {String} payload.unmutedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(UNMUTED$1, _payload11, conversation);\n              /**\n               * 有成员在当前对话中被解除禁言\n               * @event ConversationBase#UNMUTED\n               * @param {Object} payload\n               * @param {String} payload.unmutedBy 该操作的发起者 id\n               */\n\n              conversation.emit(UNMUTED$1, _payload11);\n              return _context4.abrupt(\"return\");\n\n            case 59:\n              pid = info.pid, role = info.role;\n              _internal = internal(conversation), memberInfoMap = _internal.memberInfoMap; // 如果不存在缓存，且不是 role 的更新，则不通知\n\n              if (!(!memberInfoMap && !role)) {\n                _context4.next = 63;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 63:\n              _context4.next = 65;\n              return conversation.getMemberInfo(pid);\n\n            case 65:\n              memberInfo = _context4.sent;\n              internal(memberInfo).role = role;\n              _payload12 = {\n                member: pid,\n                memberInfo: memberInfo,\n                updatedBy: initBy\n              };\n              /**\n               * 有成员的对话信息被更新\n               * @event IMClient#MEMBER_INFO_UPDATED\n               * @param {Object} payload\n               * @param {String} payload.member 被更新对话信息的成员 id\n               * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n               * @param {String} payload.updatedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(MEMBER_INFO_UPDATED$1, _payload12, conversation);\n              /**\n               * 有成员的对话信息被更新\n               * @event ConversationBase#MEMBER_INFO_UPDATED\n               * @param {Object} payload\n               * @param {String} payload.member 被更新对话信息的成员 id\n               * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n               * @param {String} payload.updatedBy 该操作的发起者 id\n               */\n\n              conversation.emit(MEMBER_INFO_UPDATED$1, _payload12);\n              return _context4.abrupt(\"return\");\n\n            case 71:\n              attributes = decode(JSON.parse(attr.data));\n\n              conversation._updateServerAttributes(attributes);\n\n              _payload13 = {\n                attributes: attributes,\n                updatedBy: initBy\n              };\n              /**\n               * 该对话信息被更新\n               * @event IMClient#CONVERSATION_INFO_UPDATED\n               * @param {Object} payload\n               * @param {Object} payload.attributes 被更新的属性\n               * @param {String} payload.updatedBy 该操作的发起者 id\n               * @param {ConversationBase} conversation\n               */\n\n              this.emit(CONVERSATION_INFO_UPDATED$1, _payload13, conversation);\n              /**\n               * 有对话信息被更新\n               * @event ConversationBase#INFO_UPDATED\n               * @param {Object} payload\n               * @param {Object} payload.attributes 被更新的属性\n               * @param {String} payload.updatedBy 该操作的发起者 id\n               */\n\n              conversation.emit(INFO_UPDATED$1, _payload13);\n              return _context4.abrupt(\"return\");\n\n            case 77:\n              this.emit(UNHANDLED_MESSAGE$1, message);\n              throw new Error('Unrecognized conversation command');\n\n            case 79:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    function _dispatchConvMessage(_x4) {\n      return _dispatchConvMessage2.apply(this, arguments);\n    }\n\n    return _dispatchConvMessage;\n  }();\n\n  _proto._dispatchDirectMessage = function _dispatchDirectMessage(originalMessage) {\n    var _this4 = this;\n\n    var directMessage = originalMessage.directMessage,\n        _originalMessage$dire = originalMessage.directMessage,\n        id = _originalMessage$dire.id,\n        cid = _originalMessage$dire.cid,\n        fromPeerId = _originalMessage$dire.fromPeerId,\n        timestamp = _originalMessage$dire.timestamp,\n        _transient = _originalMessage$dire[\"transient\"],\n        patchTimestamp = _originalMessage$dire.patchTimestamp,\n        mentionPids = _originalMessage$dire.mentionPids,\n        mentionAll = _originalMessage$dire.mentionAll,\n        binaryMsg = _originalMessage$dire.binaryMsg,\n        msg = _originalMessage$dire.msg;\n    var content = binaryMsg ? binaryMsg.toArrayBuffer() : msg;\n    return _Promise.all([this.getConversation(directMessage.cid), this._messageParser.parse(content)]).then(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          conversation = _ref6[0],\n          message = _ref6[1];\n\n      // deleted conversation\n      if (!conversation) return undefined;\n      var messageProps = {\n        id: id,\n        cid: cid,\n        timestamp: timestamp,\n        updatedAt: patchTimestamp,\n        from: fromPeerId,\n        mentionList: mentionPids,\n        mentionedAll: mentionAll\n      };\n\n      _Object$assign(message, messageProps);\n\n      message._updateMentioned(_this4.id);\n\n      message._setStatus(MessageStatus.SENT); // filter outgoing message sent from another device\n\n\n      if (message.from !== _this4.id) {\n        if (!(_transient || conversation[\"transient\"])) {\n          _this4._sendAck(message);\n        }\n      }\n\n      return _this4._dispatchParsedMessage(message, conversation);\n    });\n  };\n\n  _proto._dispatchParsedMessage = function _dispatchParsedMessage(message, conversation) {\n    var _this5 = this;\n\n    // beforeMessageDispatch hook\n    return applyDispatcher(this._plugins.beforeMessageDispatch, [message, conversation]).then(function (shouldDispatch) {\n      if (shouldDispatch === false) return;\n      conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n\n      conversation.lastMessageAt = message.timestamp; // eslint-disable-line no-param-reassign\n      // filter outgoing message sent from another device\n\n      if (message.from !== _this5.id) {\n        conversation.unreadMessagesCount += 1; // eslint-disable-line no-param-reassign\n\n        if (message.mentioned) conversation._setUnreadMessagesMentioned(true);\n      }\n      /**\n       * 当前用户收到消息\n       * @event IMClient#MESSAGE\n       * @param {Message} message\n       * @param {ConversationBase} conversation 收到消息的对话\n       */\n\n\n      _this5.emit(MESSAGE$2, message, conversation);\n      /**\n       * 当前对话收到消息\n       * @event ConversationBase#MESSAGE\n       * @param {Message} message\n       */\n\n\n      conversation.emit(MESSAGE$2, message);\n    });\n  };\n\n  _proto._sendAck = function _sendAck(message) {\n    this._debug('send ack for %O', message);\n\n    var cid = message.cid;\n\n    if (!cid) {\n      throw new Error('missing cid');\n    }\n\n    if (!this._ackMessageBuffer[cid]) {\n      this._ackMessageBuffer[cid] = [];\n    }\n\n    this._ackMessageBuffer[cid].push(message);\n\n    return this._doSendAck();\n  } // jsdoc-ignore-start\n  ;\n\n  _proto. // jsdoc-ignore-end\n  _doSendAck = function _doSendAck() {\n    var _this6 = this;\n\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n\n    this._debug('do send ack %O', this._ackMessageBuffer);\n\n    _Promise.all(_Object$keys(this._ackMessageBuffer).map(function (cid) {\n      var convAckMessages = _this6._ackMessageBuffer[cid];\n      var timestamps = convAckMessages.map(function (message) {\n        return message.timestamp;\n      });\n      var command = new GenericCommand({\n        cmd: 'ack',\n        peerId: _this6.id,\n        ackMessage: new AckCommand({\n          cid: cid,\n          fromts: Math.min.apply(null, timestamps),\n          tots: Math.max.apply(null, timestamps)\n        })\n      });\n      delete _this6._ackMessageBuffer[cid];\n      return _this6._send(command, false)[\"catch\"](function (error) {\n        _this6._debug('send ack failed: %O', error);\n\n        _this6._ackMessageBuffer[cid] = convAckMessages;\n      });\n    }));\n  };\n\n  _proto._omitPeerId = function _omitPeerId(value) {\n    internal(this).peerIdOmittable = value;\n  };\n\n  _proto._send = function _send(cmd) {\n    var _this$_connection;\n\n    var command = cmd;\n\n    if (!internal(this).peerIdOmittable && this.id) {\n      command.peerId = this.id;\n    }\n\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return (_this$_connection = this._connection).send.apply(_this$_connection, [command].concat(args));\n  };\n\n  _proto._open = /*#__PURE__*/function () {\n    var _open2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(appId, tag, deviceId) {\n      var isReconnect,\n          _internal2,\n          lastUnreadNotifTime,\n          lastPatchTime,\n          lastNotificationTime,\n          command,\n          signatureResult,\n          sessionToken,\n          resCommand,\n          _resCommand,\n          peerId,\n          sessionMessage,\n          _resCommand$sessionMe,\n          token,\n          tokenTTL,\n          code,\n          serverTs,\n          serverTime,\n          _args5 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              isReconnect = _args5.length > 3 && _args5[3] !== undefined ? _args5[3] : false;\n\n              this._debug('open session');\n\n              _internal2 = internal(this), lastUnreadNotifTime = _internal2.lastUnreadNotifTime, lastPatchTime = _internal2.lastPatchTime, lastNotificationTime = _internal2.lastNotificationTime;\n              command = new GenericCommand({\n                cmd: 'session',\n                op: 'open',\n                appId: appId,\n                peerId: this.id,\n                sessionMessage: new SessionCommand({\n                  ua: \"js/\".concat(version),\n                  r: isReconnect,\n                  lastUnreadNotifTime: lastUnreadNotifTime,\n                  lastPatchTime: lastPatchTime,\n                  configBitmap: configBitmap\n                })\n              });\n\n              if (isReconnect) {\n                _context5.next = 13;\n                break;\n              }\n\n              _Object$assign(command.sessionMessage, trim({\n                tag: tag,\n                deviceId: deviceId\n              }));\n\n              if (!this.options.signatureFactory) {\n                _context5.next = 11;\n                break;\n              }\n\n              _context5.next = 9;\n              return runSignatureFactory(this.options.signatureFactory, [this._identity]);\n\n            case 9:\n              signatureResult = _context5.sent;\n\n              _Object$assign(command.sessionMessage, keyRemap({\n                signature: 's',\n                timestamp: 't',\n                nonce: 'n'\n              }, signatureResult));\n\n            case 11:\n              _context5.next = 17;\n              break;\n\n            case 13:\n              _context5.next = 15;\n              return this._sessionManager.getSessionToken({\n                autoRefresh: false\n              });\n\n            case 15:\n              sessionToken = _context5.sent;\n\n              if (sessionToken && sessionToken !== Expirable.EXPIRED) {\n                _Object$assign(command.sessionMessage, {\n                  st: sessionToken\n                });\n              }\n\n            case 17:\n              _context5.prev = 17;\n              _context5.next = 20;\n              return this._send(command);\n\n            case 20:\n              resCommand = _context5.sent;\n              _context5.next = 32;\n              break;\n\n            case 23:\n              _context5.prev = 23;\n              _context5.t0 = _context5[\"catch\"](17);\n\n              if (!(_context5.t0.code === ErrorCode.SESSION_TOKEN_EXPIRED)) {\n                _context5.next = 31;\n                break;\n              }\n\n              if (this._sessionManager) {\n                _context5.next = 28;\n                break;\n              }\n\n              throw new Error('Unexpected session expiration');\n\n            case 28:\n              debug$b('Session token expired, reopening');\n\n              this._sessionManager.revoke();\n\n              return _context5.abrupt(\"return\", this._open(appId, tag, deviceId, isReconnect));\n\n            case 31:\n              throw _context5.t0;\n\n            case 32:\n              _resCommand = resCommand, peerId = _resCommand.peerId, sessionMessage = _resCommand.sessionMessage, _resCommand$sessionMe = _resCommand.sessionMessage, token = _resCommand$sessionMe.st, tokenTTL = _resCommand$sessionMe.stTtl, code = _resCommand$sessionMe.code, serverTs = _resCommand.serverTs;\n\n              if (!code) {\n                _context5.next = 35;\n                break;\n              }\n\n              throw createError(sessionMessage);\n\n            case 35:\n              if (peerId) {\n                this.id = peerId;\n                if (!this._identity) this._identity = peerId;\n\n                if (token) {\n                  this._sessionManager = this._sessionManager || this._createSessionManager();\n\n                  this._sessionManager.setSessionToken(token, tokenTTL);\n                }\n\n                serverTime = getTime(decodeDate(serverTs));\n\n                if (serverTs) {\n                  internal(this).lastPatchTime = serverTime;\n                }\n\n                if (lastNotificationTime) {\n                  // Do not await for it as this is failable\n                  this._syncNotifications(lastNotificationTime)[\"catch\"](function (error) {\n                    return console.warn('Syncing notifications failed:', error);\n                  });\n                } else {\n                  // Set timestamp to now for next reconnection\n                  internal(this).lastNotificationTime = serverTime;\n                }\n              } else {\n                console.warn('Unexpected session opened without peerId.');\n              }\n\n              return _context5.abrupt(\"return\", undefined);\n\n            case 37:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this, [[17, 23]]);\n    }));\n\n    function _open(_x5, _x6, _x7) {\n      return _open2.apply(this, arguments);\n    }\n\n    return _open;\n  }();\n\n  _proto._syncNotifications = /*#__PURE__*/function () {\n    var _syncNotifications2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(timestamp) {\n      var _this7 = this;\n\n      var _yield$this$_fetchNot, hasMore, notifications;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._fetchNotifications(timestamp);\n\n            case 2:\n              _yield$this$_fetchNot = _context6.sent;\n              hasMore = _yield$this$_fetchNot.hasMore;\n              notifications = _yield$this$_fetchNot.notifications;\n              notifications.forEach(function (notification) {\n                var cmd = notification.cmd,\n                    op = notification.op,\n                    serverTs = notification.serverTs,\n                    notificationType = notification.notificationType,\n                    payload = _objectWithoutProperties(notification, [\"cmd\", \"op\", \"serverTs\", \"notificationType\"]);\n\n                _this7._dispatchCommand(_defineProperty({\n                  cmd: CommandType[cmd],\n                  op: OpType[op],\n                  serverTs: serverTs,\n                  notificationType: notificationType\n                }, \"\".concat(cmd, \"Message\"), payload));\n              });\n\n              if (!hasMore) {\n                _context6.next = 8;\n                break;\n              }\n\n              return _context6.abrupt(\"return\", this._syncNotifications(internal(this).lastNotificationTime));\n\n            case 8:\n              return _context6.abrupt(\"return\", undefined);\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    function _syncNotifications(_x8) {\n      return _syncNotifications2.apply(this, arguments);\n    }\n\n    return _syncNotifications;\n  }();\n\n  _proto._fetchNotifications = /*#__PURE__*/function () {\n    var _fetchNotifications2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(timestamp) {\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", this._requestWithSessionToken({\n                method: 'GET',\n                path: '/rtm/notifications',\n                query: {\n                  start_ts: timestamp,\n                  notification_type: 'permanent'\n                }\n              }));\n\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    function _fetchNotifications(_x9) {\n      return _fetchNotifications2.apply(this, arguments);\n    }\n\n    return _fetchNotifications;\n  }();\n\n  _proto._createSessionManager = function _createSessionManager() {\n    var _this8 = this;\n\n    debug$b('create SessionManager');\n    return new SessionManager({\n      onBeforeGetSessionToken: this._connection.checkConnectionAvailability.bind(this._connection),\n      refresh: function refresh(manager, expiredSessionToken) {\n        return manager.setSessionTokenAsync(_Promise.resolve(new GenericCommand({\n          cmd: 'session',\n          op: 'refresh',\n          sessionMessage: new SessionCommand({\n            ua: \"js/\".concat(version),\n            st: expiredSessionToken\n          })\n        })).then( /*#__PURE__*/function () {\n          var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(command) {\n            var signatureResult;\n            return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n              while (1) {\n                switch (_context8.prev = _context8.next) {\n                  case 0:\n                    if (!_this8.options.signatureFactory) {\n                      _context8.next = 5;\n                      break;\n                    }\n\n                    _context8.next = 3;\n                    return runSignatureFactory(_this8.options.signatureFactory, [_this8._identity]);\n\n                  case 3:\n                    signatureResult = _context8.sent;\n\n                    _Object$assign(command.sessionMessage, keyRemap({\n                      signature: 's',\n                      timestamp: 't',\n                      nonce: 'n'\n                    }, signatureResult));\n\n                  case 5:\n                    return _context8.abrupt(\"return\", command);\n\n                  case 6:\n                  case \"end\":\n                    return _context8.stop();\n                }\n              }\n            }, _callee8);\n          }));\n\n          return function (_x10) {\n            return _ref7.apply(this, arguments);\n          };\n        }()).then(_this8._send.bind(_this8)).then(function (_ref8) {\n          var _ref8$sessionMessage = _ref8.sessionMessage,\n              token = _ref8$sessionMessage.st,\n              ttl = _ref8$sessionMessage.stTtl;\n          return [token, ttl];\n        }));\n      }\n    });\n  };\n\n  _proto._requestWithSessionToken = /*#__PURE__*/function () {\n    var _requestWithSessionToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref9) {\n      var headers, query, params, sessionToken;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              headers = _ref9.headers, query = _ref9.query, params = _objectWithoutProperties(_ref9, [\"headers\", \"query\"]);\n              _context9.next = 3;\n              return this._sessionManager.getSessionToken();\n\n            case 3:\n              sessionToken = _context9.sent;\n              return _context9.abrupt(\"return\", this._request(_objectSpread$8({\n                headers: _objectSpread$8({\n                  'X-LC-IM-Session-Token': sessionToken\n                }, headers),\n                query: _objectSpread$8({\n                  client_id: this.id\n                }, query)\n              }, params)));\n\n            case 5:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, this);\n    }));\n\n    function _requestWithSessionToken(_x11) {\n      return _requestWithSessionToken2.apply(this, arguments);\n    }\n\n    return _requestWithSessionToken;\n  }()\n  /**\n   * 关闭客户端\n   * @return {Promise}\n   */\n  ;\n\n  _proto.close =\n  /*#__PURE__*/\n  function () {\n    var _close = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var _ee, command;\n\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              this._debug('close session');\n\n              _ee = internal(this)._eventemitter;\n\n              _ee.emit('beforeclose');\n\n              if (!this._connection.is('connected')) {\n                _context10.next = 7;\n                break;\n              }\n\n              command = new GenericCommand({\n                cmd: 'session',\n                op: 'close'\n              });\n              _context10.next = 7;\n              return this._send(command);\n\n            case 7:\n              _ee.emit('close');\n\n              this.emit(CLOSE$1, {\n                code: 0\n              });\n\n            case 9:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function close() {\n      return _close.apply(this, arguments);\n    }\n\n    return close;\n  }()\n  /**\n   * 获取 client 列表中在线的 client，每次查询最多 20 个 clientId，超出部分会被忽略\n   * @param  {String[]} clientIds 要查询的 client ids\n   * @return {Primse.<String[]>} 在线的 client ids\n   */\n  ;\n\n  _proto.ping =\n  /*#__PURE__*/\n  function () {\n    var _ping = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(clientIds) {\n      var command, resCommand;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              this._debug('ping');\n\n              if (clientIds instanceof Array) {\n                _context11.next = 3;\n                break;\n              }\n\n              throw new TypeError(\"clientIds \".concat(clientIds, \" is not an Array\"));\n\n            case 3:\n              if (clientIds.length) {\n                _context11.next = 5;\n                break;\n              }\n\n              return _context11.abrupt(\"return\", _Promise.resolve([]));\n\n            case 5:\n              command = new GenericCommand({\n                cmd: 'session',\n                op: 'query',\n                sessionMessage: new SessionCommand({\n                  sessionPeerIds: clientIds\n                })\n              });\n              _context11.next = 8;\n              return this._send(command);\n\n            case 8:\n              resCommand = _context11.sent;\n              return _context11.abrupt(\"return\", resCommand.sessionMessage.onlineSessionPeerIds);\n\n            case 10:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, this);\n    }));\n\n    function ping(_x12) {\n      return _ping.apply(this, arguments);\n    }\n\n    return ping;\n  }()\n  /**\n   * 获取某个特定的对话\n   * @param  {String} id 对话 id，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase>} 如果 id 对应的对话不存在则返回 null\n   */\n  ;\n\n  _proto.getConversation =\n  /*#__PURE__*/\n  function () {\n    var _getConversation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(id) {\n      var noCache,\n          cachedConversation,\n          _args12 = arguments;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              noCache = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : false;\n\n              if (!(typeof id !== 'string')) {\n                _context12.next = 3;\n                break;\n              }\n\n              throw new TypeError(\"\".concat(id, \" is not a String\"));\n\n            case 3:\n              if (noCache) {\n                _context12.next = 7;\n                break;\n              }\n\n              cachedConversation = this._conversationCache.get(id);\n\n              if (!cachedConversation) {\n                _context12.next = 7;\n                break;\n              }\n\n              return _context12.abrupt(\"return\", cachedConversation);\n\n            case 7:\n              if (!isTemporaryConversatrionId(id)) {\n                _context12.next = 14;\n                break;\n              }\n\n              _context12.next = 10;\n              return this._getTemporaryConversations([id]);\n\n            case 10:\n              _context12.t0 = _context12.sent[0];\n\n              if (_context12.t0) {\n                _context12.next = 13;\n                break;\n              }\n\n              _context12.t0 = null;\n\n            case 13:\n              return _context12.abrupt(\"return\", _context12.t0);\n\n            case 14:\n              return _context12.abrupt(\"return\", this.getQuery().equalTo('objectId', id).find().then(function (conversations) {\n                return conversations[0] || null;\n              }));\n\n            case 15:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12, this);\n    }));\n\n    function getConversation(_x13) {\n      return _getConversation.apply(this, arguments);\n    }\n\n    return getConversation;\n  }()\n  /**\n   * 通过 id 批量获取某个特定的对话\n   * @since 3.4.0\n   * @param  {String[]} ids 对话 id 列表，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase[]>} 如果 id 对应的对话不存在则返回 null\n   */\n  ;\n\n  _proto.getConversations =\n  /*#__PURE__*/\n  function () {\n    var _getConversations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(ids) {\n      var _this9 = this;\n\n      var noCache,\n          remoteConversationIds,\n          remoteTemporaryConversationIds,\n          query,\n          remoteTemporaryConversationsPromise,\n          _args13 = arguments;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              noCache = _args13.length > 1 && _args13[1] !== undefined ? _args13[1] : false;\n              remoteConversationIds = noCache ? ids : ids.filter(function (id) {\n                return _this9._conversationCache.get(id) === null;\n              });\n\n              if (!remoteConversationIds.length) {\n                _context13.next = 9;\n                break;\n              }\n\n              remoteTemporaryConversationIds = remove(remoteConversationIds, isTemporaryConversatrionId);\n              query = [];\n\n              if (remoteConversationIds.length) {\n                query.push(this.getQuery().containedIn('objectId', remoteConversationIds).limit(999).find());\n              }\n\n              if (remoteTemporaryConversationIds.length) {\n                remoteTemporaryConversationsPromise = remoteTemporaryConversationIds.map(this._getTemporaryConversations.bind(this));\n                query.push.apply(query, _toConsumableArray(remoteTemporaryConversationsPromise));\n              }\n\n              _context13.next = 9;\n              return _Promise.all(query);\n\n            case 9:\n              return _context13.abrupt(\"return\", ids.map(function (id) {\n                return _this9._conversationCache.get(id);\n              }));\n\n            case 10:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13, this);\n    }));\n\n    function getConversations(_x14) {\n      return _getConversations.apply(this, arguments);\n    }\n\n    return getConversations;\n  }();\n\n  _proto._getTemporaryConversations = /*#__PURE__*/function () {\n    var _getTemporaryConversations2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(ids) {\n      var command, resCommand;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              command = new GenericCommand({\n                cmd: 'conv',\n                op: 'query',\n                convMessage: new ConvCommand({\n                  tempConvIds: ids\n                })\n              });\n              _context14.next = 3;\n              return this._send(command);\n\n            case 3:\n              resCommand = _context14.sent;\n              return _context14.abrupt(\"return\", this._handleQueryResults(resCommand));\n\n            case 5:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14, this);\n    }));\n\n    function _getTemporaryConversations(_x15) {\n      return _getTemporaryConversations2.apply(this, arguments);\n    }\n\n    return _getTemporaryConversations;\n  }()\n  /**\n   * 构造一个 ConversationQuery 来查询对话\n   * @return {ConversationQuery.<PersistentConversation>}\n   */\n  ;\n\n  _proto.getQuery = function getQuery() {\n    return new ConversationQuery(this);\n  }\n  /**\n   * 构造一个 ConversationQuery 来查询聊天室\n   * @return {ConversationQuery.<ChatRoom>}\n   */\n  ;\n\n  _proto.getChatRoomQuery = function getChatRoomQuery() {\n    return this.getQuery().equalTo('tr', true);\n  }\n  /**\n   * 构造一个 ConversationQuery 来查询服务号\n   * @return {ConversationQuery.<ServiceConversation>}\n   */\n  ;\n\n  _proto.getServiceConversationQuery = function getServiceConversationQuery() {\n    return this.getQuery().equalTo('sys', true);\n  };\n\n  _proto._executeQuery = /*#__PURE__*/function () {\n    var _executeQuery2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(query) {\n      var queryJSON, command, resCommand;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              queryJSON = query.toJSON();\n              queryJSON.where = new JsonObjectMessage({\n                data: _JSON$stringify(encode(queryJSON.where))\n              });\n              command = new GenericCommand({\n                cmd: 'conv',\n                op: 'query',\n                convMessage: new ConvCommand(queryJSON)\n              });\n              _context15.next = 5;\n              return this._send(command);\n\n            case 5:\n              resCommand = _context15.sent;\n              return _context15.abrupt(\"return\", this._handleQueryResults(resCommand));\n\n            case 7:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15, this);\n    }));\n\n    function _executeQuery(_x16) {\n      return _executeQuery2.apply(this, arguments);\n    }\n\n    return _executeQuery;\n  }();\n\n  _proto._handleQueryResults = /*#__PURE__*/function () {\n    var _handleQueryResults2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(resCommand) {\n      var conversations, commandString;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.prev = 0;\n              conversations = decode(JSON.parse(resCommand.convMessage.results.data));\n              _context16.next = 8;\n              break;\n\n            case 4:\n              _context16.prev = 4;\n              _context16.t0 = _context16[\"catch\"](0);\n              commandString = _JSON$stringify(trim(resCommand));\n              throw new Error(\"Parse query result failed: \".concat(_context16.t0.message, \". Command: \").concat(commandString));\n\n            case 8:\n              _context16.next = 10;\n              return _Promise.all(conversations.map(this._parseConversationFromRawData.bind(this)));\n\n            case 10:\n              conversations = _context16.sent;\n              return _context16.abrupt(\"return\", conversations.map(this._upsertConversationToCache.bind(this)));\n\n            case 12:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16, this, [[0, 4]]);\n    }));\n\n    function _handleQueryResults(_x17) {\n      return _handleQueryResults2.apply(this, arguments);\n    }\n\n    return _handleQueryResults;\n  }();\n\n  _proto._upsertConversationToCache = function _upsertConversationToCache(fetchedConversation) {\n    var conversation = this._conversationCache.get(fetchedConversation.id);\n\n    if (!conversation) {\n      conversation = fetchedConversation;\n\n      this._debug('no match, set cache');\n\n      this._conversationCache.set(fetchedConversation.id, fetchedConversation);\n    } else {\n      this._debug('update cached conversation');\n\n      ['creator', 'createdAt', 'updatedAt', 'lastMessageAt', 'lastMessage', 'mutedMembers', 'members', '_attributes', 'transient', 'muted'].forEach(function (key) {\n        var value = fetchedConversation[key];\n        if (value !== undefined) conversation[key] = value;\n      });\n      if (conversation._reset) conversation._reset();\n    }\n\n    return conversation;\n  }\n  /**\n   * 反序列化消息，与 {@link Message#toFullJSON} 相对。\n   * @param {Object}\n   * @return {AVMessage} 解析后的消息\n   * @since 4.0.0\n   */\n  ;\n\n  _proto.parseMessage =\n  /*#__PURE__*/\n  function () {\n    var _parseMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(_ref10) {\n      var data, _ref10$bin, bin, properties, content, message;\n\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              data = _ref10.data, _ref10$bin = _ref10.bin, bin = _ref10$bin === void 0 ? false : _ref10$bin, properties = _objectWithoutProperties(_ref10, [\"data\", \"bin\"]);\n              content = bin ? base64Arraybuffer.decode(data) : data;\n              _context17.next = 4;\n              return this._messageParser.parse(content);\n\n            case 4:\n              message = _context17.sent;\n\n              _Object$assign(message, properties);\n\n              message._updateMentioned(this.id);\n\n              return _context17.abrupt(\"return\", message);\n\n            case 8:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17, this);\n    }));\n\n    function parseMessage(_x18) {\n      return _parseMessage.apply(this, arguments);\n    }\n\n    return parseMessage;\n  }()\n  /**\n   * 反序列化对话，与 {@link Conversation#toFullJSON} 相对。\n   * @param {Object}\n   * @return {ConversationBase} 解析后的对话\n   * @since 4.0.0\n   */\n  ;\n\n  _proto.parseConversation =\n  /*#__PURE__*/\n  function () {\n    var _parseConversation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(_ref11) {\n      var id, lastMessageAt, lastMessage, lastDeliveredAt, lastReadAt, unreadMessagesCount, members, mentioned, properties, conversationData, _transient2, system, expiredAt;\n\n      return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              id = _ref11.id, lastMessageAt = _ref11.lastMessageAt, lastMessage = _ref11.lastMessage, lastDeliveredAt = _ref11.lastDeliveredAt, lastReadAt = _ref11.lastReadAt, unreadMessagesCount = _ref11.unreadMessagesCount, members = _ref11.members, mentioned = _ref11.mentioned, properties = _objectWithoutProperties(_ref11, [\"id\", \"lastMessageAt\", \"lastMessage\", \"lastDeliveredAt\", \"lastReadAt\", \"unreadMessagesCount\", \"members\", \"mentioned\"]);\n              conversationData = {\n                id: id,\n                lastMessageAt: lastMessageAt,\n                lastMessage: lastMessage,\n                lastDeliveredAt: lastDeliveredAt,\n                lastReadAt: lastReadAt,\n                unreadMessagesCount: unreadMessagesCount,\n                members: members,\n                mentioned: mentioned\n              };\n\n              if (!lastMessage) {\n                _context18.next = 7;\n                break;\n              }\n\n              _context18.next = 5;\n              return this.parseMessage(lastMessage);\n\n            case 5:\n              conversationData.lastMessage = _context18.sent;\n\n              conversationData.lastMessage._setStatus(MessageStatus.SENT);\n\n            case 7:\n              _transient2 = properties[\"transient\"], system = properties.system, expiredAt = properties.expiredAt;\n\n              if (!_transient2) {\n                _context18.next = 10;\n                break;\n              }\n\n              return _context18.abrupt(\"return\", new ChatRoom(conversationData, properties, this));\n\n            case 10:\n              if (!system) {\n                _context18.next = 12;\n                break;\n              }\n\n              return _context18.abrupt(\"return\", new ServiceConversation(conversationData, properties, this));\n\n            case 12:\n              if (!(expiredAt || isTemporaryConversatrionId(id))) {\n                _context18.next = 14;\n                break;\n              }\n\n              return _context18.abrupt(\"return\", new TemporaryConversation(conversationData, {\n                expiredAt: expiredAt\n              }, this));\n\n            case 14:\n              return _context18.abrupt(\"return\", new Conversation(conversationData, properties, this));\n\n            case 15:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18, this);\n    }));\n\n    function parseConversation(_x19) {\n      return _parseConversation.apply(this, arguments);\n    }\n\n    return parseConversation;\n  }();\n\n  _proto._parseConversationFromRawData = /*#__PURE__*/function () {\n    var _parseConversationFromRawData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(rawData) {\n      var data, ttl;\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              data = keyRemap({\n                objectId: 'id',\n                lm: 'lastMessageAt',\n                m: 'members',\n                tr: 'transient',\n                sys: 'system',\n                c: 'creator',\n                mu: 'mutedMembers'\n              }, rawData);\n\n              if (data.msg) {\n                data.lastMessage = {\n                  data: data.msg,\n                  bin: data.bin,\n                  from: data.msg_from,\n                  id: data.msg_mid,\n                  timestamp: data.msg_timestamp,\n                  updatedAt: data.patch_timestamp\n                };\n                delete data.lastMessageFrom;\n                delete data.lastMessageId;\n                delete data.lastMessageTimestamp;\n                delete data.lastMessagePatchTimestamp;\n              }\n\n              ttl = data.ttl;\n              if (ttl) data.expiredAt = _Date$now() + ttl * 1000;\n              return _context19.abrupt(\"return\", this.parseConversation(data));\n\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19, this);\n    }));\n\n    function _parseConversationFromRawData(_x20) {\n      return _parseConversationFromRawData2.apply(this, arguments);\n    }\n\n    return _parseConversationFromRawData;\n  }()\n  /**\n   * 创建一个对话\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.name] 对话的名字\n   * @param {Boolean} [options.unique=true] 唯一对话，当其为 true 时，如果当前已经有相同成员的对话存在则返回该对话，否则会创建新的对话\n   * @return {Promise.<Conversation>}\n   */\n  ;\n\n  _proto.createConversation =\n  /*#__PURE__*/\n  function () {\n    var _createConversation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n      var _ref12,\n          m,\n          name,\n          _transient3,\n          _ref12$unique,\n          unique,\n          tempConv,\n          tempConvTTL,\n          properties,\n          members,\n          attr,\n          startCommandJson,\n          command,\n          params,\n          signatureResult,\n          _yield$this$_send,\n          _yield$this$_send$con,\n          cid,\n          cdate,\n          ttl,\n          data,\n          conversation,\n          _args20 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              _ref12 = _args20.length > 0 && _args20[0] !== undefined ? _args20[0] : {}, m = _ref12.members, name = _ref12.name, _transient3 = _ref12[\"transient\"], _ref12$unique = _ref12.unique, unique = _ref12$unique === void 0 ? true : _ref12$unique, tempConv = _ref12._tempConv, tempConvTTL = _ref12._tempConvTTL, properties = _objectWithoutProperties(_ref12, [\"members\", \"name\", \"transient\", \"unique\", \"_tempConv\", \"_tempConvTTL\"]);\n\n              if (_transient3 || _Array$isArray(m)) {\n                _context20.next = 3;\n                break;\n              }\n\n              throw new TypeError(\"conversation members \".concat(m, \" is not an array\"));\n\n            case 3:\n              members = new _Set(m);\n              members.add(this.id);\n              members = _Array$from(members).sort();\n              attr = properties || {};\n\n              if (!name) {\n                _context20.next = 11;\n                break;\n              }\n\n              if (!(typeof name !== 'string')) {\n                _context20.next = 10;\n                break;\n              }\n\n              throw new TypeError(\"conversation name \".concat(name, \" is not a string\"));\n\n            case 10:\n              attr.name = name;\n\n            case 11:\n              attr = new JsonObjectMessage({\n                data: _JSON$stringify(encode(attr))\n              });\n              startCommandJson = {\n                m: members,\n                attr: attr,\n                \"transient\": _transient3,\n                unique: unique,\n                tempConv: tempConv,\n                tempConvTTL: tempConvTTL\n              };\n              command = new GenericCommand({\n                cmd: 'conv',\n                op: 'start',\n                convMessage: new ConvCommand(startCommandJson)\n              });\n\n              if (!this.options.conversationSignatureFactory) {\n                _context20.next = 20;\n                break;\n              }\n\n              params = [null, this._identity, members, 'create'];\n              _context20.next = 18;\n              return runSignatureFactory(this.options.conversationSignatureFactory, params);\n\n            case 18:\n              signatureResult = _context20.sent;\n\n              _Object$assign(command.convMessage, keyRemap({\n                signature: 's',\n                timestamp: 't',\n                nonce: 'n'\n              }, signatureResult));\n\n            case 20:\n              _context20.next = 22;\n              return this._send(command);\n\n            case 22:\n              _yield$this$_send = _context20.sent;\n              _yield$this$_send$con = _yield$this$_send.convMessage;\n              cid = _yield$this$_send$con.cid;\n              cdate = _yield$this$_send$con.cdate;\n              ttl = _yield$this$_send$con.tempConvTTL;\n              data = _objectSpread$8({\n                name: name,\n                \"transient\": _transient3,\n                unique: unique,\n                id: cid,\n                createdAt: cdate,\n                updatedAt: cdate,\n                lastMessageAt: null,\n                creator: this.id,\n                members: _transient3 ? [] : members\n              }, properties);\n              if (ttl) data.expiredAt = _Date$now() + ttl * 1000;\n              _context20.next = 31;\n              return this.parseConversation(data);\n\n            case 31:\n              conversation = _context20.sent;\n              return _context20.abrupt(\"return\", this._upsertConversationToCache(conversation));\n\n            case 33:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20, this);\n    }));\n\n    function createConversation() {\n      return _createConversation.apply(this, arguments);\n    }\n\n    return createConversation;\n  }()\n  /**\n   * 创建一个聊天室\n   * @since 4.0.0\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String} [options.name] 对话的名字\n   * @return {Promise.<ChatRoom>}\n   */\n  ;\n\n  _proto.createChatRoom =\n  /*#__PURE__*/\n  function () {\n    var _createChatRoom = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(param) {\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              return _context21.abrupt(\"return\", this.createConversation(_objectSpread$8(_objectSpread$8({}, param), {}, {\n                \"transient\": true,\n                members: null,\n                unique: false,\n                _tempConv: false\n              })));\n\n            case 1:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21, this);\n    }));\n\n    function createChatRoom(_x21) {\n      return _createChatRoom.apply(this, arguments);\n    }\n\n    return createChatRoom;\n  }()\n  /**\n   * 创建一个临时对话\n   * @since 4.0.0\n   * @param {Object} options\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.ttl] 对话存在时间，单位为秒，最大值与默认值均为 86400（一天），过期后该对话不再可用。\n   * @return {Promise.<TemporaryConversation>}\n   */\n  ;\n\n  _proto.createTemporaryConversation =\n  /*#__PURE__*/\n  function () {\n    var _createTemporaryConversation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(_ref13) {\n      var _tempConvTTL, param;\n\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              _tempConvTTL = _ref13.ttl, param = _objectWithoutProperties(_ref13, [\"ttl\"]);\n              return _context22.abrupt(\"return\", this.createConversation(_objectSpread$8(_objectSpread$8({}, param), {}, {\n                \"transient\": false,\n                unique: false,\n                _tempConv: true,\n                _tempConvTTL: _tempConvTTL\n              })));\n\n            case 2:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22, this);\n    }));\n\n    function createTemporaryConversation(_x22) {\n      return _createTemporaryConversation.apply(this, arguments);\n    }\n\n    return createTemporaryConversation;\n  }() // jsdoc-ignore-start\n  ;\n\n  _proto. // jsdoc-ignore-end\n  _doSendRead = function _doSendRead() {\n    var _this10 = this;\n\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n    var buffer = internal(this).readConversationsBuffer;\n\n    var conversations = _Array$from(buffer);\n\n    if (!conversations.length) return;\n    var ids = conversations.map(function (conversation) {\n      if (!(conversation instanceof ConversationBase)) {\n        throw new TypeError(\"\".concat(conversation, \" is not a Conversation\"));\n      }\n\n      return conversation.id;\n    });\n\n    this._debug(\"mark [\".concat(ids, \"] as read\"));\n\n    buffer.clear();\n\n    this._sendReadCommand(conversations)[\"catch\"](function (error) {\n      _this10._debug('send read failed: %O', error);\n\n      conversations.forEach(buffer.add.bind(buffer));\n    });\n  };\n\n  _proto._sendReadCommand = function _sendReadCommand(conversations) {\n    var _this11 = this;\n\n    return this._send(new GenericCommand({\n      cmd: 'read',\n      readMessage: new ReadCommand({\n        convs: conversations.map(function (conversation) {\n          return new ReadTuple({\n            cid: conversation.id,\n            mid: conversation.lastMessage && conversation.lastMessage.from !== _this11.id ? conversation.lastMessage.id : undefined,\n            timestamp: (conversation.lastMessageAt || new Date()).getTime()\n          });\n        })\n      })\n    }), false);\n  };\n\n  return IMClient;\n}(EventEmitter), (_applyDecoratedDescriptor(_class$3.prototype, \"_doSendAck\", [_dec$2], _Object$getOwnPropertyDescriptor(_class$3.prototype, \"_doSendAck\"), _class$3.prototype), _applyDecoratedDescriptor(_class$3.prototype, \"_doSendRead\", [_dec2], _Object$getOwnPropertyDescriptor(_class$3.prototype, \"_doSendRead\"), _class$3.prototype)), _class$3));\n/**\n * 修改、撤回消息的原因\n * @typedef PatchReason\n * @type {Object}\n * @property {number} code 负数为内置 code，正数为开发者在 hook 中自定义的 code。比如因为敏感词过滤被修改的 code 为 -4408。\n * @property {string} [detail] 具体的原因说明。\n */\n\nvar RECONNECT_ERROR = 'reconnecterror';\n\nvar CoreEvent = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  RECONNECT_ERROR: RECONNECT_ERROR,\n  DISCONNECT: DISCONNECT,\n  RECONNECT: RECONNECT,\n  RETRY: RETRY,\n  SCHEDULE: SCHEDULE,\n  OFFLINE: OFFLINE,\n  ONLINE: ONLINE\n});\n\nvar _class$4;\n\nfunction ownKeys$9(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$9(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$9(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$9(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar  // jsdoc-ignore-end\nBinaryMessage = IE10Compatible(_class$4 = /*#__PURE__*/function (_Message) {\n  _inheritsLoose(BinaryMessage, _Message);\n\n  /**\n   * 二进制消息\n   * @extends Message\n   * @param {ArrayBuffer} buffer\n   * @since 4.0.0\n   */\n  function BinaryMessage(buffer) {\n    if (!(buffer instanceof ArrayBuffer)) {\n      throw new TypeError(\"\".concat(buffer, \" is not an ArrayBuffer\"));\n    }\n\n    return _Message.call(this, buffer) || this;\n  }\n  /**\n   * @type ArrayBuffer\n   */\n\n\n  BinaryMessage.validate = function validate(target) {\n    return target instanceof ArrayBuffer;\n  };\n\n  var _proto = BinaryMessage.prototype;\n\n  _proto.toJSON = function toJSON() {\n    return _objectSpread$9(_objectSpread$9({}, _Message.prototype._toJSON.call(this)), {}, {\n      data: base64Arraybuffer.encode(this.content)\n    });\n  };\n\n  _proto.toFullJSON = function toFullJSON() {\n    return _objectSpread$9(_objectSpread$9({}, _Message.prototype.toFullJSON.call(this)), {}, {\n      bin: true,\n      data: base64Arraybuffer.encode(this.content)\n    });\n  };\n\n  _createClass(BinaryMessage, [{\n    key: \"buffer\",\n    get: function get() {\n      return this.content;\n    },\n    set: function set(buffer) {\n      this.content = buffer;\n    }\n  }]);\n\n  return BinaryMessage;\n}(Message)) || _class$4;\n\nvar _dec$3, _class$5;\n\nvar  // jsdoc-ignore-end\nTextMessage = (_dec$3 = messageType(-1), _dec$3(_class$5 = IE10Compatible(_class$5 = /*#__PURE__*/function (_TypedMessage) {\n  _inheritsLoose(TextMessage, _TypedMessage);\n\n  /**\n   * 文类类型消息\n   * @extends TypedMessage\n   * @param  {String} [text='']\n   * @throws {TypeError} text 不是 String 类型\n   */\n  function TextMessage() {\n    var _this;\n\n    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError(\"\".concat(text, \" is not a string\"));\n    }\n\n    _this = _TypedMessage.call(this) || this;\n\n    _this.setText(text);\n\n    return _this;\n  }\n\n  return TextMessage;\n}(TypedMessage)) || _class$5) || _class$5);\n/**\n * @name TYPE\n * @memberof TextMessage\n * @type Number\n * @static\n * @const\n */\n\nvar _class$6;\n\nfunction ownKeys$a(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$a(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$a(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$a(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof _Symbol === \"undefined\" || o[_Symbol$iterator] == null) { if (_Array$isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = _getIterator(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar debug$c = d('LC:MessageParser');\n\nvar tryParseJson = function tryParseJson(target, key, descriptor) {\n  var fn = descriptor.value; // eslint-disable-next-line no-param-reassign\n\n  descriptor.value = function wrapper(param) {\n    var content;\n\n    if (typeof param !== 'string') {\n      content = param;\n    } else {\n      try {\n        content = JSON.parse(param);\n      } catch (error) {\n        content = param;\n      }\n    }\n\n    return fn.call(this, content);\n  };\n};\n\nvar applyPlugins = function applyPlugins(target, key, descriptor) {\n  var fn = descriptor.value; // eslint-disable-next-line no-param-reassign\n\n  descriptor.value = function wrapper(json) {\n    var _this = this;\n\n    return _Promise.resolve(json).then(applyMiddlewares(this._plugins.beforeMessageParse)).then(function (decoratedJson) {\n      return fn.call(_this, decoratedJson);\n    }).then(applyMiddlewares(this._plugins.afterMessageParse));\n  };\n};\n\nvar MessageParser = (_class$6 = /*#__PURE__*/function () {\n  /**\n   * 消息解析器\n   * @param {Object} plugins 插件，插件的 messageClasses 会自动被注册，在解析时 beforeMessageParse 与 afterMessageParse Middleware 会被应用。\n   */\n  function MessageParser() {\n    var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._plugins = plugins;\n    this._messageClasses = [];\n    this.register(plugins.messageClasses);\n  }\n  /**\n   * 注册消息类\n   *\n   * @param  {Function | Function[]} messageClass 消息类，需要实现 {@link AVMessage} 接口，\n   * 建议继承自 {@link TypedMessage}，也可以传入一个消息类数组。\n   * @throws {TypeError} 如果 messageClass 没有实现 {@link AVMessage} 接口则抛出异常\n   */\n\n\n  var _proto = MessageParser.prototype;\n\n  _proto.register = function register(messageClasses) {\n    var _this2 = this;\n\n    ensureArray(messageClasses).map(function (klass) {\n      return _this2._register(klass);\n    });\n  };\n\n  _proto._register = function _register(messageClass) {\n    if (messageClass && messageClass.parse && messageClass.prototype && messageClass.prototype.getPayload) {\n      this._messageClasses.unshift(messageClass);\n    } else {\n      throw new TypeError('Invalid messageClass');\n    }\n  } // jsdoc-ignore-start\n  ;\n\n  _proto. // jsdoc-ignore-end\n\n  /**\n   * 解析消息内容\n   * @param {Object | string | any} target 消息内容，如果是字符串会尝试 parse 为 JSON。\n   * @return {AVMessage} 解析后的消息\n   * @throws {Error} 如果不匹配任何注册的消息则抛出异常\n   */\n  parse = function parse(content) {\n    debug$c('parsing message: %O', content); // eslint-disable-next-line\n\n    var _iterator = _createForOfIteratorHelper(this._messageClasses),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var Klass = _step.value;\n        var contentCopy = isPlainObject(content) ? _objectSpread$a({}, content) : content;\n        var valid = void 0;\n        var result = void 0;\n\n        try {\n          valid = Klass.validate(contentCopy);\n        } catch (error) {// eslint-disable-line no-empty\n        }\n\n        if (valid) {\n          try {\n            result = Klass.parse(contentCopy);\n          } catch (error) {\n            console.warn('parsing a valid message content error', {\n              error: error,\n              Klass: Klass,\n              content: contentCopy\n            });\n          }\n\n          if (result !== undefined) {\n            debug$c('parse result: %O', result);\n            return result;\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    throw new Error('No Message Class matched');\n  };\n\n  return MessageParser;\n}(), (_applyDecoratedDescriptor(_class$6.prototype, \"parse\", [tryParseJson, applyPlugins], _Object$getOwnPropertyDescriptor(_class$6.prototype, \"parse\"), _class$6.prototype)), _class$6);\n\nfunction ownKeys$b(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$b(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$b(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$b(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\nvar debug$d = d('LC:IMPlugin');\n/**\n * 消息优先级枚举\n * @enum {Number}\n * @since 3.3.0\n */\n\nvar MessagePriority = {\n  /** 高 */\n  HIGH: 1,\n\n  /** 普通 */\n  NORMAL: 2,\n\n  /** 低 */\n  LOW: 3\n};\n\n_Object$freeze(MessagePriority);\n/**\n * 为 Conversation 定义一个新属性\n * @param {String} prop 属性名\n * @param {Object} [descriptor] 属性的描述符，参见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor#Description getOwnPropertyDescriptor#Description - MDN}，默认为该属性名对应的 Conversation 自定义属性的 getter/setter\n * @returns void\n * @example\n *\n * conversation.get('type');\n * conversation.set('type', 1);\n *\n * // equals to\n * defineConversationProperty('type');\n * conversation.type;\n * conversation.type = 1;\n */\n\n\nvar defineConversationProperty = function defineConversationProperty(prop) {\n  var descriptor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    get: function get() {\n      return this.get(prop);\n    },\n    set: function set(value) {\n      this.set(prop, value);\n    }\n  };\n\n  _Object$defineProperty(Conversation.prototype, prop, descriptor);\n};\n\nvar onRealtimeCreate = function onRealtimeCreate(realtime) {\n  /* eslint-disable no-param-reassign */\n  var deviceId = uuid();\n  realtime._IMClients = {};\n  realtime._IMClientsCreationCount = 0;\n  var messageParser = new MessageParser(realtime._plugins);\n  realtime._messageParser = messageParser;\n\n  var signAVUser = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(user) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", realtime._request({\n                method: 'POST',\n                path: '/rtm/sign',\n                data: {\n                  session_token: user.getSessionToken()\n                }\n              }));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function signAVUser(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /**\n   * 注册消息类\n   *\n   * 在接收消息、查询消息时，会按照消息类注册顺序的逆序依次尝试解析消息内容\n   *\n   * @memberof Realtime\n   * @instance\n   * @param  {Function | Function[]} messageClass 消息类，需要实现 {@link AVMessage} 接口，\n   * 建议继承自 {@link TypedMessage}\n   * @throws {TypeError} 如果 messageClass 没有实现 {@link AVMessage} 接口则抛出异常\n   */\n\n\n  var register = messageParser.register.bind(messageParser);\n  /**\n   * 创建一个即时通讯客户端，多次创建相同 id 的客户端会返回同一个实例\n   * @memberof Realtime\n   * @instance\n   * @param  {String|AV.User} [identity] 客户端 identity，如果不指定该参数，服务端会随机生成一个字符串作为 identity，\n   * 如果传入一个已登录的 AV.User，则会使用该用户的 id 作为客户端 identity 登录。\n   * @param  {Object} [options]\n   * @param  {Function} [options.signatureFactory] open session 时的签名方法 // TODO need details\n   * @param  {Function} [options.conversationSignatureFactory] 对话创建、增减成员操作时的签名方法\n   * @param  {Function} [options.blacklistSignatureFactory] 黑名单操作时的签名方法\n   * @param  {String} [options.tag] 客户端类型标记，以支持单点登录功能\n   * @param  {String} [options.isReconnect=false] 单点登录时标记该次登录是不是应用启动时自动重新登录\n   * @return {Promise.<IMClient>}\n   */\n\n  var createIMClient = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(identity) {\n      var _realtime$_open$then;\n\n      var _ref3,\n          tag,\n          isReconnect,\n          clientOptions,\n          lagecyTag,\n          id,\n          buildinOptions,\n          sessionToken,\n          _tag,\n          promise,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref3 = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {}, tag = _ref3.tag, isReconnect = _ref3.isReconnect, clientOptions = _objectWithoutProperties(_ref3, [\"tag\", \"isReconnect\"]);\n              lagecyTag = _args2.length > 2 ? _args2[2] : undefined;\n              buildinOptions = {};\n\n              if (!identity) {\n                _context2.next = 19;\n                break;\n              }\n\n              if (!(typeof identity === 'string')) {\n                _context2.next = 8;\n                break;\n              }\n\n              id = identity;\n              _context2.next = 17;\n              break;\n\n            case 8:\n              if (!(identity.id && identity.getSessionToken)) {\n                _context2.next = 16;\n                break;\n              }\n\n              id = identity.id;\n              sessionToken = identity.getSessionToken();\n\n              if (sessionToken) {\n                _context2.next = 13;\n                break;\n              }\n\n              throw new Error('User must be authenticated');\n\n            case 13:\n              buildinOptions.signatureFactory = signAVUser;\n              _context2.next = 17;\n              break;\n\n            case 16:\n              throw new TypeError('Identity must be a String or an AV.User');\n\n            case 17:\n              if (!(realtime._IMClients[id] !== undefined)) {\n                _context2.next = 19;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", realtime._IMClients[id]);\n\n            case 19:\n              if (lagecyTag) {\n                console.warn('DEPRECATION createIMClient tag param: Use options.tag instead.');\n              }\n\n              _tag = tag || lagecyTag;\n              promise = (_realtime$_open$then = realtime._open().then(function (connection) {\n                var client = new IMClient(id, _objectSpread$b(_objectSpread$b({}, buildinOptions), clientOptions), {\n                  _connection: connection,\n                  _request: realtime._request.bind(realtime),\n                  _messageParser: messageParser,\n                  _plugins: realtime._plugins,\n                  _identity: identity\n                });\n                connection.on(RECONNECT, function () {\n                  return client._open(realtime._options.appId, _tag, deviceId, true)\n                  /**\n                   * 客户端连接恢复正常，该事件通常在 {@link Realtime#event:RECONNECT} 之后发生\n                   * @event IMClient#RECONNECT\n                   * @see Realtime#event:RECONNECT\n                   * @since 3.2.0\n                   */\n\n                  /**\n                   * 客户端重新登录发生错误（网络连接已恢复，但重新登录错误）\n                   * @event IMClient#RECONNECT_ERROR\n                   * @since 3.2.0\n                   */\n                  .then(function () {\n                    return client.emit(RECONNECT);\n                  }, function (error) {\n                    return client.emit(RECONNECT_ERROR, error);\n                  });\n                });\n\n                internal(client)._eventemitter.on('beforeclose', function () {\n                  delete realtime._IMClients[client.id];\n\n                  if (realtime._firstIMClient === client) {\n                    delete realtime._firstIMClient;\n                  }\n                }, realtime);\n\n                internal(client)._eventemitter.on('close', function () {\n                  realtime._deregister(client);\n                }, realtime);\n\n                return client._open(realtime._options.appId, _tag, deviceId, isReconnect).then(function () {\n                  realtime._IMClients[client.id] = client;\n                  realtime._IMClientsCreationCount += 1;\n\n                  if (realtime._IMClientsCreationCount === 1) {\n                    client._omitPeerId(true);\n\n                    realtime._firstIMClient = client;\n                  } else if (realtime._IMClientsCreationCount > 1 && realtime._firstIMClient) {\n                    realtime._firstIMClient._omitPeerId(false);\n                  }\n\n                  realtime._register(client);\n\n                  return client;\n                })[\"catch\"](function (error) {\n                  delete realtime._IMClients[client.id];\n                  throw error;\n                });\n              })).then.apply(_realtime$_open$then, _toConsumableArray(finalize(function () {\n                realtime._deregisterPending(promise);\n              })));\n\n              if (identity) {\n                realtime._IMClients[id] = promise;\n              }\n\n              realtime._registerPending(promise);\n\n              return _context2.abrupt(\"return\", promise);\n\n            case 25:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function createIMClient(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  _Object$assign(realtime, {\n    register: register,\n    createIMClient: createIMClient\n  });\n  /* eslint-enable no-param-reassign */\n\n};\n\nvar beforeCommandDispatch = function beforeCommandDispatch(command, realtime) {\n  var isIMCommand = command.service === null || command.service === 2;\n  if (!isIMCommand) return true;\n  var targetClient = command.peerId ? realtime._IMClients[command.peerId] : realtime._firstIMClient;\n\n  if (targetClient) {\n    _Promise.resolve(targetClient).then(function (client) {\n      return client._dispatchCommand(command);\n    })[\"catch\"](debug$d);\n  } else {\n    debug$d('[WARN] Unexpected message received without any live client match: %O', trim(command));\n  }\n\n  return false;\n};\n\nvar IMPlugin = {\n  name: 'leancloud-realtime-plugin-im',\n  onRealtimeCreate: onRealtimeCreate,\n  beforeCommandDispatch: beforeCommandDispatch,\n  messageClasses: [Message, BinaryMessage, RecalledMessage, TextMessage]\n};\n\nfunction ownKeys$c(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread$c(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$c(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys$c(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\nRealtime.defineConversationProperty = defineConversationProperty;\nRealtime.__preRegisteredPlugins = [IMPlugin];\n\nvar Event = _objectSpread$c(_objectSpread$c({}, CoreEvent), IMEvent);\n\n/** core + plugins + platform adapters */\nsetAdapters({\n  WebSocket: platformAdaptersNode.WebSocket,\n  request: platformAdaptersNode.request\n});\n\nexports.EventEmitter = EventEmitter;\nexports.BinaryMessage = BinaryMessage;\nexports.ChatRoom = ChatRoom;\nexports.Conversation = Conversation;\nexports.ConversationMemberRole = ConversationMemberRole;\nexports.ConversationQuery = ConversationQuery;\nexports.ErrorCode = ErrorCode;\nexports.Event = Event;\nexports.IE10Compatible = IE10Compatible;\nexports.IMPlugin = IMPlugin;\nexports.Message = Message;\nexports.MessageParser = MessageParser;\nexports.MessagePriority = MessagePriority;\nexports.MessageQueryDirection = MessageQueryDirection;\nexports.MessageStatus = MessageStatus;\nexports.Promise = polyfilledPromise;\nexports.Protocals = message;\nexports.Protocols = message;\nexports.Realtime = Realtime;\nexports.RecalledMessage = RecalledMessage;\nexports.ServiceConversation = ServiceConversation;\nexports.TemporaryConversation = TemporaryConversation;\nexports.TextMessage = TextMessage;\nexports.TypedMessage = TypedMessage;\nexports.debug = debug$2;\nexports.defineConversationProperty = defineConversationProperty;\nexports.getAdapter = getAdapter;\nexports.messageField = messageField;\nexports.messageType = messageType;\nexports.setAdapters = setAdapters;\n//# sourceMappingURL=im-node.js.map\n"]}